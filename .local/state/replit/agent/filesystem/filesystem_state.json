{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nMysticRead AI is a comprehensive web application that uses artificial intelligence to provide personalized mystical insights through three main analysis types:\n\n1. **Palmistry Analysis** - Upload or capture palm photos analyzed by AI to reveal personality traits, relationships, career prospects, health, and future predictions\n2. **Astrology Chart Analysis** - Generate detailed astrological readings using birth date, time, and location for comprehensive life insights\n3. **Vastu Analysis** - Analyze home and office layouts according to Vastu Shastra principles for optimal energy flow and prosperity\n\nAll analyses are powered by OpenAI's GPT-5 model for accurate and detailed insights.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development practices\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Navigation**: Tabbed interface for switching between palmistry, astrology, and Vastu analysis\n- **Camera Integration**: Custom camera hook using Web APIs for palm image capture\n\n## Backend Architecture\n- **Server Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful endpoints with structured error handling and request logging\n- **File Processing**: Multer middleware for handling image uploads with validation\n- **AI Integration**: OpenAI GPT-5 API for multi-modal analysis including vision and text processing with structured response validation\n- **Data Validation**: Zod schemas for runtime type checking and API response validation for all analysis types\n\n## Data Storage Solutions\n- **Development Storage**: In-memory storage using Map data structures for rapid prototyping\n- **Production Ready**: Drizzle ORM configured with PostgreSQL schema for persistent data storage\n- **Schema Definition**: Shared schema between frontend and backend for type consistency across all analysis types\n- **Multi-Analysis Support**: Unified storage system handling palmistry, astrology, and Vastu analysis data\n\n## Authentication and Authorization\n- **Current Implementation**: No authentication system implemented\n- **Session Management**: Basic session support configured via connect-pg-simple for future use\n- **API Security**: File upload validation and size limits for security\n\n## Build and Development\n- **Build System**: Vite for fast development and optimized production builds\n- **Development Environment**: Hot module replacement and error overlay for enhanced developer experience\n- **TypeScript Configuration**: Strict type checking with path mapping for clean imports\n- **Package Management**: NPM with lockfile for dependency consistency\n\n# External Dependencies\n\n## AI and Machine Learning\n- **OpenAI API**: GPT-5 model for comprehensive analysis across palmistry, astrology, and Vastu\n- **Vision Analysis**: Advanced image processing for palm reading and Vastu layout analysis\n- **Text Analysis**: Sophisticated astrological chart interpretation using birth data\n- **Image Processing**: Base64 encoding for image transmission to AI service\n\n## Database and Storage\n- **Neon Database**: Serverless PostgreSQL database provider\n- **Drizzle ORM**: Type-safe database operations with migration support\n- **Database Migrations**: Automated schema management and versioning\n\n## UI and Design System\n- **Radix UI**: Headless, accessible component primitives\n- **Shadcn/ui**: Pre-built component library for consistent design\n- **Lucide React**: Icon library for modern, consistent iconography\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n\n## Development and Build Tools\n- **Vite**: Fast build tool with optimized development server\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer plugins\n\n## Third-Party Services\n- **Replit Integration**: Development environment optimizations and deployment tools\n- **Font Loading**: Google Fonts integration for typography (Architects Daughter, DM Sans, Fira Code, Geist Mono)\n\n# Recent Changes\n\n## August 2025 - Multi-Analysis Platform Launch\n- **Expanded Analysis Types**: Added astrology chart analysis and Vastu layout analysis alongside palmistry\n- **Enhanced AI Integration**: Upgraded to OpenAI GPT-5 model for improved accuracy across all analysis types\n- **Tabbed Interface**: Implemented intuitive tab-based navigation between palmistry, astrology, and Vastu analysis\n- **Comprehensive Schemas**: Developed detailed data schemas for all three analysis types with structured results\n- **Advanced UI Components**: Created specialized interfaces for each analysis type with appropriate input methods\n- **Results Management**: Built separate results components for displaying palmistry, astrology, and Vastu insights\n- **Unified Storage**: Extended storage system to handle multiple analysis types with consistent data management\n- **Brand Evolution**: Renamed from PalmRead AI to MysticRead AI to reflect expanded capabilities\n\n## Initial Launch\n- Initial setup of palmistry web application\n- Integration of OpenAI Vision API for palm analysis\n- Implementation of camera capture and image upload functionality\n- Development of comprehensive UI components using Shadcn/ui\n- Setup of backend API endpoints for palm image analysis","size_bytes":5721},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        success: \"var(--success)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2801},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertPalmAnalysisSchema, \n  palmAnalysisResultSchema, \n  astrologyInputSchema, \n  astrologyAnalysisResultSchema,\n  vastuInputSchema,\n  vastuAnalysisResultSchema,\n  numerologyInputSchema,\n  numerologyAnalysisResultSchema,\n  tarotInputSchema,\n  tarotAnalysisResultSchema,\n  insertAnalysisSchema,\n  userRegistrationSchema,\n  userLoginSchema\n} from \"@shared/schema\";\nimport { analyzePalmImage, analyzeAstrologyChart, analyzeVastu, analyzeNumerology, analyzeTarot, generateChatResponse, generateMysticalChatResponse } from \"./services/openai\";\nimport multer from \"multer\";\nimport bcrypt from \"bcryptjs\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\n\nconst PgSession = connectPgSimple(session);\n\n// Middleware to check if user is authenticated\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Configure multer for image uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session middleware\n  app.use(session({\n    store: new PgSession({\n      conString: process.env.DATABASE_URL,\n      tableName: 'session'\n    }),\n    secret: process.env.SESSION_SECRET || 'mystic-read-ai-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // User registration endpoint\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = userRegistrationSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      // Create user\n      const user = await storage.createUser({\n        email: userData.email,\n        hashedPassword,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        credits: 0\n      });\n\n      // Start session\n      (req.session as any).userId = user.id;\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        credits: user.credits,\n        aiChatCredits: user.aiChatCredits,\n        aiChatMinutesUsed: user.aiChatMinutesUsed\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Registration failed\" \n      });\n    }\n  });\n\n  // User login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const loginData = userLoginSchema.parse(req.body);\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(loginData.email);\n      if (!user || !user.hashedPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Verify password\n      const validPassword = await bcrypt.compare(loginData.password, user.hashedPassword);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Start session\n      (req.session as any).userId = user.id;\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        credits: user.credits,\n        aiChatCredits: user.aiChatCredits,\n        aiChatMinutesUsed: user.aiChatMinutesUsed\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Login failed\" \n      });\n    }\n  });\n\n  // User logout endpoint\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        credits: user.credits,\n        aiChatCredits: user.aiChatCredits,\n        aiChatMinutesUsed: user.aiChatMinutesUsed\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get user\" \n      });\n    }\n  });\n\n  // Analyze palm image endpoint\n  app.post(\"/api/palm/analyze\", upload.single('palmImage'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n\n      // Convert image to base64\n      const base64Image = req.file.buffer.toString('base64');\n      \n      // Analyze palm using OpenAI\n      const analysisResult = await analyzePalmImage(base64Image);\n      \n      // Log the raw response to debug schema mismatch\n      console.log(\"Raw GPT-5 Response:\", JSON.stringify(analysisResult, null, 2));\n      \n      // Validate the analysis result\n      const validatedResult = palmAnalysisResultSchema.parse(analysisResult);\n      \n      // Store the analysis in main analyses table for chat compatibility\n      const analysis = await storage.createAnalysis({\n        type: \"palm\",\n        imageUrl: `data:${req.file.mimetype};base64,${base64Image}`,\n        inputData: { imageUrl: `data:${req.file.mimetype};base64,${base64Image}` },\n        analysisResult: validatedResult,\n      });\n\n      res.json({\n        id: analysis.id,\n        result: validatedResult,\n        imageUrl: analysis.imageUrl,\n      });\n    } catch (error) {\n      console.error(\"Palm analysis error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze palm image\" \n      });\n    }\n  });\n\n  // Get palm analysis by ID\n  app.get(\"/api/palm/:id\", async (req, res) => {\n    try {\n      const analysis = await storage.getPalmAnalysis(req.params.id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to retrieve analysis\" });\n    }\n  });\n\n  // Analyze astrology chart endpoint\n  app.post(\"/api/astrology/analyze\", async (req, res) => {\n    try {\n      const astrologyData = astrologyInputSchema.parse(req.body);\n      \n      // Analyze astrology chart using OpenAI\n      const analysisResult = await analyzeAstrologyChart(astrologyData);\n      \n      // Validate the analysis result\n      const validatedResult = astrologyAnalysisResultSchema.parse(analysisResult);\n      \n      // Store the analysis\n      const analysis = await storage.createAnalysis({\n        type: \"astrology\",\n        imageUrl: null,\n        inputData: astrologyData,\n        analysisResult: validatedResult,\n      });\n\n      res.json({\n        id: analysis.id,\n        result: validatedResult,\n        inputData: astrologyData,\n      });\n    } catch (error) {\n      console.error(\"Astrology analysis error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze astrology chart\" \n      });\n    }\n  });\n\n  // Analyze Vastu layout endpoint\n  app.post(\"/api/vastu/analyze\", upload.single('layoutImage'), async (req, res) => {\n    try {\n      // Parse the Vastu data from the form\n      let vastuDataRaw;\n      try {\n        vastuDataRaw = JSON.parse(req.body.vastuData || '{}');\n      } catch (parseError) {\n        console.error(\"JSON parse error:\", parseError);\n        return res.status(400).json({ message: \"Invalid JSON in vastuData\" });\n      }\n      \n      const vastuData = vastuInputSchema.parse(vastuDataRaw);\n      \n      let base64Image: string | undefined;\n      let imageUrl: string | null = null;\n      \n      if (req.file) {\n        base64Image = req.file.buffer.toString('base64');\n        imageUrl = `data:${req.file.mimetype};base64,${base64Image}`;\n      }\n      \n      // Analyze Vastu using OpenAI\n      const analysisResult = await analyzeVastu(vastuData, base64Image);\n      \n      // Validate the analysis result\n      const validatedResult = vastuAnalysisResultSchema.parse(analysisResult);\n      \n      // Store the analysis\n      const analysis = await storage.createAnalysis({\n        type: \"vastu\",\n        imageUrl,\n        inputData: vastuData,\n        analysisResult: validatedResult,\n      });\n\n      res.json({\n        id: analysis.id,\n        result: validatedResult,\n        inputData: vastuData,\n        imageUrl,\n      });\n    } catch (error) {\n      console.error(\"Vastu analysis error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze Vastu layout\" \n      });\n    }\n  });\n\n  // Analyze numerology endpoint\n  app.post(\"/api/numerology/analyze\", async (req, res) => {\n    try {\n      const numerologyData = numerologyInputSchema.parse(req.body);\n      \n      // Analyze using OpenAI\n      const analysisResult = await analyzeNumerology(numerologyData);\n      \n      // Validate the analysis result\n      const validatedResult = numerologyAnalysisResultSchema.parse(analysisResult);\n      \n      // Store the analysis\n      const numerologyAnalysis = await storage.createAnalysis({\n        type: \"numerology\",\n        inputData: numerologyData,\n        analysisResult: validatedResult,\n      });\n\n      res.json({\n        id: numerologyAnalysis.id,\n        result: validatedResult,\n        inputData: numerologyData,\n      });\n    } catch (error) {\n      console.error(\"Numerology analysis error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze numerology\" \n      });\n    }\n  });\n\n  // Analyze tarot endpoint\n  app.post(\"/api/tarot/analyze\", async (req, res) => {\n    try {\n      const tarotData = tarotInputSchema.parse(req.body);\n      \n      // Analyze using OpenAI\n      const analysisResult = await analyzeTarot(tarotData);\n      \n      // Validate the analysis result\n      const validatedResult = tarotAnalysisResultSchema.parse(analysisResult);\n      \n      // Store the analysis\n      const tarotAnalysis = await storage.createAnalysis({\n        type: \"tarot\",\n        inputData: tarotData,\n        analysisResult: validatedResult,\n      });\n\n      res.json({\n        id: tarotAnalysis.id,\n        result: validatedResult,\n        inputData: tarotData,\n      });\n    } catch (error) {\n      console.error(\"Tarot analysis error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze tarot reading\" \n      });\n    }\n  });\n\n  // Get analysis by ID (generic endpoint)\n  app.get(\"/api/analysis/:id\", async (req, res) => {\n    try {\n      const analysis = await storage.getAnalysis(req.params.id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to retrieve analysis\" });\n    }\n  });\n\n  // Chat conversation endpoints  \n  app.get(\"/api/chat/conversation/:analysisId\", async (req: any, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const { analysisId } = req.params;\n      const userId = req.session.userId;\n\n      // Get or create conversation\n      let conversation = await storage.getChatConversationByAnalysis(analysisId, userId);\n      if (!conversation) {\n        conversation = await storage.createChatConversation({\n          analysisId,\n          userId,\n        });\n      }\n\n      // Get messages for this conversation\n      const messages = await storage.getChatMessagesByConversation(conversation.id);\n\n      res.json({ messages });\n    } catch (error) {\n      console.error(\"Chat conversation error:\", error);\n      res.status(500).json({ message: \"Failed to get conversation\" });\n    }\n  });\n\n  // Send chat message (simplified without payment)\n  app.post(\"/api/chat/send\", async (req: any, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const { analysisId, analysisType, message, analysisData } = req.body;\n      const userId = req.session.userId;\n\n      // Get or create conversation\n      let conversation = await storage.getChatConversationByAnalysis(analysisId, userId);\n      if (!conversation) {\n        conversation = await storage.createChatConversation({\n          analysisId,\n          userId,\n        });\n      }\n\n      // Get current messages\n      const messages = await storage.getChatMessagesByConversation(conversation.id);\n\n      // Save user message\n      await storage.createChatMessage({\n        conversationId: conversation.id,\n        role: 'user',\n        content: message,\n      });\n\n      // Generate AI response using OpenAI\n      const aiResponse = await generateChatResponse(message, analysisType, analysisData, messages);\n\n      // Save AI response\n      await storage.createChatMessage({\n        conversationId: conversation.id,\n        role: 'assistant', \n        content: aiResponse,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Send message error:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // General AI Chat endpoint for mystical guidance\n  app.post(\"/api/chat\", async (req: any, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const { message, conversationHistory } = req.body;\n\n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Generate AI response using OpenAI for general mystical chat\n      const aiResponse = await generateMysticalChatResponse(\n        message, \n        conversationHistory || []\n      );\n\n      res.json({ response: aiResponse });\n    } catch (error) {\n      console.error(\"Mystical chat error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate chat response\" \n      });\n    }\n  });\n\n  // Razorpay Payment Routes\n  app.post(\"/api/payments/create-order\", requireAuth, async (req: any, res) => {\n    try {\n      const { amount, creditsRequested, paymentTier, minutesGranted } = req.body;\n      const userId = req.session.userId;\n\n      if (!amount || !creditsRequested || !paymentTier || !minutesGranted) {\n        return res.status(400).json({ message: \"Missing required payment parameters\" });\n      }\n\n      // Create payment record first\n      const payment = await storage.createPayment({\n        userId,\n        amount: amount.toString(),\n        creditsGranted: creditsRequested,\n        minutesGranted,\n        paymentTier,\n        status: 'pending'\n      });\n\n      // In a real implementation, you would create a Razorpay order here\n      // For now, returning mock data for development\n      const mockOrderId = `order_${Date.now()}`;\n      \n      res.json({\n        orderId: mockOrderId,\n        amount: amount,\n        currency: \"USD\",\n        paymentId: payment.id\n      });\n    } catch (error) {\n      console.error(\"Create payment order error:\", error);\n      res.status(500).json({ message: \"Failed to create payment order\" });\n    }\n  });\n\n  app.post(\"/api/payments/verify\", requireAuth, async (req: any, res) => {\n    try {\n      const { razorpay_payment_id, razorpay_order_id, razorpay_signature, paymentId } = req.body;\n      const userId = req.session.userId;\n\n      // In a real implementation, you would verify the Razorpay signature here\n      // For now, simulating successful verification\n      \n      // Update payment status\n      const payment = await storage.updatePaymentStatus(\n        paymentId,\n        'completed',\n        razorpay_payment_id,\n        new Date()\n      );\n\n      // Get current user\n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Add credits to user\n      const newAiChatCredits = user.aiChatCredits + payment.creditsGranted;\n      await storage.updateUserAiChatCredits(userId, newAiChatCredits, user.aiChatMinutesUsed);\n\n      res.json({ \n        success: true,\n        creditsAdded: payment.creditsGranted,\n        totalCredits: newAiChatCredits\n      });\n    } catch (error) {\n      console.error(\"Payment verification error:\", error);\n      res.status(500).json({ message: \"Payment verification failed\" });\n    }\n  });\n\n  // Credit-based AI Chat endpoint\n  app.post(\"/api/ai-chat\", requireAuth, async (req: any, res) => {\n    try {\n      const { message } = req.body;\n      const userId = req.session.userId;\n\n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Get current user and check credits\n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.aiChatCredits <= 0) {\n        return res.status(403).json({ \n          message: \"No AI chat credits remaining\", \n          needsPayment: true \n        });\n      }\n\n      // Get or create AI chat session\n      let session = await storage.getActiveAiChatSession(userId);\n      if (!session) {\n        session = await storage.createAiChatSession({\n          userId,\n          status: 'active'\n        });\n      }\n\n      // Save user message\n      await storage.createAiChatMessage({\n        sessionId: session.id,\n        role: 'user',\n        content: message\n      });\n\n      // Generate AI response\n      const aiResponse = await generateMysticalChatResponse(message, []);\n\n      // Save AI response\n      await storage.createAiChatMessage({\n        sessionId: session.id,\n        role: 'assistant',\n        content: aiResponse\n      });\n\n      // Deduct 1 credit and update usage\n      const newCredits = user.aiChatCredits - 1;\n      const estimatedMinutes = parseFloat((session.minutesUsed + 0.2).toFixed(2)); // Estimate ~0.2 minutes per exchange\n      \n      await Promise.all([\n        storage.updateUserAiChatCredits(userId, newCredits, user.aiChatMinutesUsed),\n        storage.updateAiChatSessionUsage(session.id, estimatedMinutes, session.creditsUsed + 1)\n      ]);\n\n      res.json({ \n        response: aiResponse,\n        creditsRemaining: newCredits,\n        minutesUsed: estimatedMinutes\n      });\n    } catch (error) {\n      console.error(\"AI chat error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to process AI chat\" \n      });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19897},"server/storage.ts":{"content":"import { \n  type PalmAnalysis, \n  type InsertPalmAnalysis, \n  type Analysis, \n  type InsertAnalysis, \n  type User,\n  type InsertUser,\n  type ChatConversation,\n  type InsertChatConversation,\n  type ChatMessage,\n  type InsertChatMessage,\n  type Payment,\n  type InsertPayment,\n  type AiChatSession,\n  type InsertAiChatSession,\n  type AiChatMessage,\n  type InsertAiChatMessage,\n  palmAnalyses, \n  analyses,\n  users,\n  chatConversations,\n  chatMessages,\n  payments,\n  aiChatSessions,\n  aiChatMessages\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Palm analysis methods\n  createPalmAnalysis(analysis: InsertPalmAnalysis): Promise<PalmAnalysis>;\n  getPalmAnalysis(id: string): Promise<PalmAnalysis | undefined>;\n  \n  // General analysis methods  \n  createAnalysis(analysis: InsertAnalysis): Promise<Analysis>;\n  getAnalysis(id: string): Promise<Analysis | undefined>;\n  \n  // User authentication methods\n  createUser(user: InsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  updateUserCredits(userId: string, credits: number): Promise<User>;\n  updateUserAiChatCredits(userId: string, aiChatCredits: number, aiChatMinutesUsed: number): Promise<User>;\n  \n  // Chat methods (post-analysis)\n  createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n  getChatConversationByAnalysis(analysisId: string, userId: string): Promise<ChatConversation | undefined>;\n  updateConversationQuestions(conversationId: string, questionsUsed: number): Promise<ChatConversation>;\n  \n  // Chat message methods (post-analysis)\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessagesByConversation(conversationId: string): Promise<ChatMessage[]>;\n  \n  // AI Chat methods (credit-based general chat)\n  createAiChatSession(session: InsertAiChatSession): Promise<AiChatSession>;\n  getActiveAiChatSession(userId: string): Promise<AiChatSession | undefined>;\n  updateAiChatSessionUsage(sessionId: string, minutesUsed: number, creditsUsed: number): Promise<AiChatSession>;\n  \n  // AI Chat message methods\n  createAiChatMessage(message: InsertAiChatMessage): Promise<AiChatMessage>;\n  getAiChatMessagesBySession(sessionId: string): Promise<AiChatMessage[]>;\n  \n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  \n  // Payment methods\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePaymentStatus(paymentId: string, status: string, razorpayPaymentId?: string, completedAt?: Date): Promise<Payment>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Palm analysis methods\n  async createPalmAnalysis(insertAnalysis: InsertPalmAnalysis): Promise<PalmAnalysis> {\n    const [analysis] = await db\n      .insert(palmAnalyses)\n      .values(insertAnalysis)\n      .returning();\n    return analysis;\n  }\n\n  async getPalmAnalysis(id: string): Promise<PalmAnalysis | undefined> {\n    const [analysis] = await db.select().from(palmAnalyses).where(eq(palmAnalyses.id, id));\n    return analysis || undefined;\n  }\n\n  // General analysis methods\n  async createAnalysis(insertAnalysis: InsertAnalysis): Promise<Analysis> {\n    const [analysis] = await db\n      .insert(analyses)\n      .values(insertAnalysis)\n      .returning();\n    return analysis;\n  }\n\n  async getAnalysis(id: string): Promise<Analysis | undefined> {\n    const [analysis] = await db.select().from(analyses).where(eq(analyses.id, id));\n    return analysis || undefined;\n  }\n\n  // User authentication methods\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async updateUserCredits(userId: string, credits: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ credits, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserAiChatCredits(userId: string, aiChatCredits: number, aiChatMinutesUsed: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ aiChatCredits, aiChatMinutesUsed, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Chat methods\n  async createChatConversation(insertConversation: InsertChatConversation): Promise<ChatConversation> {\n    const [conversation] = await db\n      .insert(chatConversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async getChatConversationByAnalysis(analysisId: string, userId: string): Promise<ChatConversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(chatConversations)\n      .where(eq(chatConversations.analysisId, analysisId));\n    return conversation || undefined;\n  }\n\n  async updateConversationQuestions(conversationId: string, questionsUsed: number): Promise<ChatConversation> {\n    const [conversation] = await db\n      .update(chatConversations)\n      .set({ questionsUsed, updatedAt: new Date() })\n      .where(eq(chatConversations.id, conversationId))\n      .returning();\n    return conversation;\n  }\n\n  // Chat message methods\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const [message] = await db\n      .insert(chatMessages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async getChatMessagesByConversation(conversationId: string): Promise<ChatMessage[]> {\n    const messages = await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.conversationId, conversationId))\n      .orderBy(chatMessages.createdAt);\n    return messages;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.getUserById(id);\n  }\n\n  // Payment methods\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const [payment] = await db\n      .insert(payments)\n      .values(insertPayment)\n      .returning();\n    return payment;\n  }\n\n  async updatePaymentStatus(paymentId: string, status: string, razorpayPaymentId?: string, completedAt?: Date): Promise<Payment> {\n    const [payment] = await db\n      .update(payments)\n      .set({ \n        status, \n        ...(razorpayPaymentId && { razorpayPaymentId }),\n        ...(completedAt && { completedAt })\n      })\n      .where(eq(payments.id, paymentId))\n      .returning();\n    return payment;\n  }\n\n  // AI Chat methods\n  async createAiChatSession(insertSession: InsertAiChatSession): Promise<AiChatSession> {\n    const [session] = await db\n      .insert(aiChatSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async getActiveAiChatSession(userId: string): Promise<AiChatSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(aiChatSessions)\n      .where(eq(aiChatSessions.userId, userId))\n      .orderBy(aiChatSessions.createdAt); // Get most recent\n    return session || undefined;\n  }\n\n  async updateAiChatSessionUsage(sessionId: string, minutesUsed: number, creditsUsed: number): Promise<AiChatSession> {\n    const [session] = await db\n      .update(aiChatSessions)\n      .set({ minutesUsed, creditsUsed, updatedAt: new Date() })\n      .where(eq(aiChatSessions.id, sessionId))\n      .returning();\n    return session;\n  }\n\n  // AI Chat message methods\n  async createAiChatMessage(insertMessage: InsertAiChatMessage): Promise<AiChatMessage> {\n    const [message] = await db\n      .insert(aiChatMessages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async getAiChatMessagesBySession(sessionId: string): Promise<AiChatMessage[]> {\n    const messages = await db\n      .select()\n      .from(aiChatMessages)\n      .where(eq(aiChatMessages.sessionId, sessionId))\n      .orderBy(aiChatMessages.createdAt);\n    return messages;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8334},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, boolean, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session table for express-session storage\nexport const session = pgTable(\"session\", {\n  sid: varchar(\"sid\").primaryKey(),\n  sess: jsonb(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n\n// Users table for authentication and account management\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  hashedPassword: varchar(\"hashed_password\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  credits: integer(\"credits\").default(0).notNull(), // Question credits (for post-analysis chat)\n  aiChatCredits: integer(\"ai_chat_credits\").default(0).notNull(), // AI chat time credits\n  aiChatMinutesUsed: integer(\"ai_chat_minutes_used\").default(0).notNull(), // Track usage\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Generic analyses table for all analysis types (now supports 5 types)\nexport const analyses = pgTable(\"analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id), // Link to user account\n  type: varchar(\"type\").notNull(), // 'palm', 'astrology', 'vastu', 'numerology', 'tarot'\n  imageUrl: text(\"image_url\"), // Optional for astrology, numerology\n  inputData: jsonb(\"input_data\").notNull(), // Birth info, layout data, numerology inputs, etc.\n  analysisResult: jsonb(\"analysis_result\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Chat conversations linked to specific analyses\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  analysisId: varchar(\"analysis_id\").notNull().references(() => analyses.id),\n  questionsUsed: integer(\"questions_used\").default(0).notNull(),\n  questionsLimit: integer(\"questions_limit\").default(5).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Individual chat messages in conversations\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => chatConversations.id),\n  role: varchar(\"role\").notNull(), // 'user' or 'assistant'\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// AI chat sessions for credit-based general AI chat (separate from post-analysis chat)\nexport const aiChatSessions = pgTable(\"ai_chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  minutesUsed: decimal(\"minutes_used\", { precision: 5, scale: 2 }).default('0').notNull(),\n  creditsUsed: integer(\"credits_used\").default(0).notNull(),\n  status: varchar(\"status\").notNull(), // 'active', 'completed', 'expired'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// AI chat messages for general chat sessions\nexport const aiChatMessages = pgTable(\"ai_chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => aiChatSessions.id),\n  role: varchar(\"role\").notNull(), // 'user' or 'assistant'\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Payment records for credit purchases\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  razorpayPaymentId: varchar(\"razorpay_payment_id\").unique(),\n  razorpayOrderId: varchar(\"razorpay_order_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(), // Amount in USD\n  creditsGranted: integer(\"credits_granted\").notNull(), // AI chat credits (5, 10, or 15)\n  minutesGranted: integer(\"minutes_granted\").notNull(), // Chat minutes (5, 10, or 15)\n  paymentTier: varchar(\"payment_tier\").notNull(), // 'tier1', 'tier2', 'tier3'\n  status: varchar(\"status\").notNull(), // 'pending', 'completed', 'failed'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Keep legacy table for backward compatibility\nexport const palmAnalyses = pgTable(\"palm_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  imageUrl: text(\"image_url\").notNull(),\n  analysisResult: jsonb(\"analysis_result\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Palm analysis result schema\nexport const palmAnalysisResultSchema = z.object({\n  personalityOverview: z.string().optional(),\n  traits: z.array(z.string()).optional(),\n  lifeEnergyPercentage: z.number().optional(),\n  emotionalBalancePercentage: z.number().optional(),\n  careerPotentialPercentage: z.number().optional(),\n  loveAndRelationships: z.object({\n    heartLineAnalysis: z.string().optional(),\n    compatibilityInsights: z.string().optional(),\n    relationshipStrength: z.string().optional(),\n  }).optional(),\n  careerAndSuccess: z.object({\n    professionalStrengths: z.string().optional(),\n    recommendedPaths: z.array(z.string()).optional(),\n    successPotential: z.string().optional(),\n  }).optional(),\n  healthAndWellness: z.object({\n    lifeLineInsights: z.string().optional(),\n    wellnessRecommendations: z.array(z.string()).optional(),\n    vitalityLevel: z.string().optional(),\n  }).optional(),\n  futureInsights: z.object({\n    nearFuture: z.string().optional(),\n    lifePathDirection: z.string().optional(),\n    pathClarity: z.string().optional(),\n  }).optional(),\n  palmLines: z.object({\n    heartLine: z.string().optional(),\n    headLine: z.string().optional(),\n    lifeLine: z.string().optional(),\n    fateLine: z.string().optional(),\n  }).optional(),\n}).passthrough();\n\n// Astrology analysis schemas (enhanced with Kundli chart data)\nexport const astrologyInputSchema = z.object({\n  birthDate: z.string(),\n  birthTime: z.string(),\n  birthPlace: z.string(),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n});\n\nexport const astrologyAnalysisResultSchema = z.object({\n  personalityOverview: z.string(),\n  sunSign: z.string(),\n  moonSign: z.string(),\n  risingSign: z.string(),\n  // Enhanced Kundli chart data\n  kundliChart: z.object({\n    houses: z.array(z.object({\n      number: z.number(),\n      sign: z.string(),\n      planets: z.array(z.string()),\n      ruling: z.string(),\n    })),\n    planetaryPositions: z.object({\n      sun: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      moon: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      mercury: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      venus: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      mars: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      jupiter: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      saturn: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      rahu: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n      ketu: z.object({ sign: z.string(), house: z.number(), degrees: z.number() }),\n    }),\n    aspects: z.array(z.object({\n      from: z.string(),\n      to: z.string(),\n      type: z.string(),\n      influence: z.string(),\n    })),\n  }),\n  planetaryPositions: z.object({\n    sun: z.string(),\n    moon: z.string(),\n    mercury: z.string(),\n    venus: z.string(),\n    mars: z.string(),\n    jupiter: z.string(),\n    saturn: z.string(),\n  }),\n  lifeAreas: z.object({\n    loveAndRelationships: z.object({\n      overview: z.string(),\n      compatibility: z.string(),\n      romanticTendencies: z.string(),\n    }),\n    careerAndFinances: z.object({\n      careerPath: z.string(),\n      financialLuck: z.string(),\n      professionalStrengths: z.array(z.string()),\n    }),\n    healthAndWellbeing: z.object({\n      physicalHealth: z.string(),\n      mentalHealth: z.string(),\n      recommendations: z.array(z.string()),\n    }),\n    spiritualGrowth: z.object({\n      lifeLesson: z.string(),\n      spiritualPath: z.string(),\n      karmaInsights: z.string(),\n    }),\n  }),\n  predictions: z.object({\n    thisYear: z.string(),\n    nextThreeYears: z.string(),\n    majorLifeEvents: z.array(z.string()),\n  }),\n});\n\n// Numerology analysis schemas\nexport const numerologyInputSchema = z.object({\n  name: z.string().optional(),\n  birthDate: z.string().optional(),\n  companyName: z.string().optional(),\n  analysisType: z.enum(['personal', 'business']),\n});\n\nexport const numerologyAnalysisResultSchema = z.object({\n  personalityOverview: z.string(),\n  coreNumbers: z.object({\n    lifePathNumber: z.object({\n      number: z.number(),\n      meaning: z.string(),\n      traits: z.array(z.string()),\n    }),\n    destinyNumber: z.object({\n      number: z.number(),\n      meaning: z.string(),\n      purpose: z.string(),\n    }),\n    soulUrgeNumber: z.object({\n      number: z.number(),\n      meaning: z.string(),\n      desires: z.string(),\n    }),\n    personalityNumber: z.object({\n      number: z.number(),\n      meaning: z.string(),\n      impression: z.string(),\n    }),\n  }),\n  lifeAreas: z.object({\n    strengths: z.array(z.string()),\n    challenges: z.array(z.string()),\n    careerPath: z.string(),\n    relationships: z.string(),\n    luckyNumbers: z.array(z.number()),\n    favorableColors: z.array(z.string()),\n  }),\n  predictions: z.object({\n    currentYear: z.string(),\n    nextPhase: z.string(),\n    opportunities: z.array(z.string()),\n  }),\n});\n\n// Tarot analysis schemas\nexport const tarotInputSchema = z.object({\n  spreadType: z.enum(['three-card', 'celtic-cross', 'single-card']),\n  question: z.string().optional(),\n  drawnCards: z.array(z.object({\n    cardName: z.string(),\n    suit: z.string().optional(),\n    position: z.string(),\n    reversed: z.boolean(),\n  })),\n});\n\nexport const tarotAnalysisResultSchema = z.object({\n  spreadType: z.string(),\n  personalityOverview: z.string(),\n  cardAnalysis: z.array(z.object({\n    position: z.string(),\n    cardName: z.string(),\n    meaning: z.string(),\n    interpretation: z.string(),\n    reversed: z.boolean(),\n    reversedMeaning: z.string().optional(),\n  })),\n  overallMessage: z.string(),\n  guidance: z.object({\n    pastInfluences: z.string().optional(),\n    presentSituation: z.string(),\n    futureOutlook: z.string().optional(),\n    advice: z.string(),\n    outcome: z.string().optional(),\n  }),\n  actionSteps: z.array(z.string()),\n  reflection: z.string(),\n});\n\n// Vastu analysis schemas\nexport const vastuInputSchema = z.object({\n  layoutType: z.string(), // 'home', 'office', 'shop'\n  rooms: z.array(z.object({\n    name: z.string(),\n    direction: z.string(),\n    size: z.string(),\n  })),\n  entrance: z.string(),\n  buildingShape: z.string(),\n  surroundings: z.string(),\n});\n\nexport const vastuAnalysisResultSchema = z.object({\n  overallScore: z.number(),\n  overallAssessment: z.string(),\n  energyFlow: z.object({\n    positive: z.array(z.string()),\n    negative: z.array(z.string()),\n    neutral: z.array(z.string()),\n  }),\n  roomAnalysis: z.array(z.object({\n    room: z.string(),\n    direction: z.string(),\n    vastuCompliance: z.string(),\n    recommendations: z.array(z.string()),\n    score: z.number(),\n  })),\n  recommendations: z.object({\n    immediate: z.array(z.string()),\n    longTerm: z.array(z.string()),\n    remedies: z.array(z.string()),\n  }),\n  prosperity: z.object({\n    wealth: z.string(),\n    health: z.string(),\n    relationships: z.string(),\n    career: z.string(),\n  }),\n});\n\n// User authentication schemas\nexport const userRegistrationSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\nexport const userLoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\n// Chat message schemas\nexport const chatMessageSchema = z.object({\n  role: z.enum(['user', 'assistant']),\n  content: z.string(),\n});\n\n// Payment schemas\nexport const createPaymentSchema = z.object({\n  amount: z.number().positive(),\n  creditsRequested: z.number().positive(),\n  paymentTier: z.enum(['tier1', 'tier2', 'tier3']),\n});\n\n// AI chat schemas\nexport const aiChatMessageSchema = z.object({\n  role: z.enum(['user', 'assistant']),\n  content: z.string(),\n});\n\nexport const createAiChatSessionSchema = z.object({\n  userId: z.string(),\n});\n\n// Generic analysis schema (updated for 5 types)\nexport const analysisInputSchema = z.object({\n  type: z.enum(['palm', 'astrology', 'vastu', 'numerology', 'tarot']),\n  imageUrl: z.string().optional(),\n  inputData: z.union([\n    astrologyInputSchema, \n    vastuInputSchema, \n    numerologyInputSchema,\n    tarotInputSchema,\n    z.object({})\n  ]),\n});\n\nexport const analysisResultSchema = z.union([\n  palmAnalysisResultSchema,\n  astrologyAnalysisResultSchema,\n  vastuAnalysisResultSchema,\n  numerologyAnalysisResultSchema,\n  tarotAnalysisResultSchema,\n]);\n\n// Insert schemas\nexport const insertAnalysisSchema = createInsertSchema(analyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPalmAnalysisSchema = createInsertSchema(palmAnalyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertAiChatSessionSchema = createInsertSchema(aiChatSessions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiChatMessageSchema = createInsertSchema(aiChatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types for all entities\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UserRegistration = z.infer<typeof userRegistrationSchema>;\nexport type UserLogin = z.infer<typeof userLoginSchema>;\n\nexport type Analysis = typeof analyses.$inferSelect;\nexport type InsertAnalysis = z.infer<typeof insertAnalysisSchema>;\nexport type AnalysisResult = z.infer<typeof analysisResultSchema>;\n\nexport type PalmAnalysis = typeof palmAnalyses.$inferSelect;\nexport type InsertPalmAnalysis = z.infer<typeof insertPalmAnalysisSchema>;\nexport type PalmAnalysisResult = z.infer<typeof palmAnalysisResultSchema>;\n\nexport type AstrologyInput = z.infer<typeof astrologyInputSchema>;\nexport type AstrologyAnalysisResult = z.infer<typeof astrologyAnalysisResultSchema>;\n\nexport type VastuInput = z.infer<typeof vastuInputSchema>;\nexport type VastuAnalysisResult = z.infer<typeof vastuAnalysisResultSchema>;\n\nexport type NumerologyInput = z.infer<typeof numerologyInputSchema>;\nexport type NumerologyAnalysisResult = z.infer<typeof numerologyAnalysisResultSchema>;\n\nexport type TarotInput = z.infer<typeof tarotInputSchema>;\nexport type TarotAnalysisResult = z.infer<typeof tarotAnalysisResultSchema>;\n\nexport type ChatConversation = typeof chatConversations.$inferSelect;\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type CreatePayment = z.infer<typeof createPaymentSchema>;\n\nexport type AiChatSession = typeof aiChatSessions.$inferSelect;\nexport type InsertAiChatSession = z.infer<typeof insertAiChatSessionSchema>;\nexport type AiChatMessage = typeof aiChatMessages.$inferSelect;\nexport type InsertAiChatMessage = z.infer<typeof insertAiChatMessageSchema>;\n","size_bytes":16583},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/components/auth/auth-context\";\nimport { CommandPalette } from \"@/components/command-palette\";\nimport { CommandPaletteFAB } from \"@/components/command-palette-fab\";\nimport { useCommandPalette } from \"@/hooks/use-command-palette\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const { isOpen, openPalette, closePalette } = useCommandPalette();\n  \n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n          <CommandPalette isOpen={isOpen} onClose={closePalette} />\n          <CommandPaletteFAB onClick={openPalette} />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1304},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Clean Dark Theme Colors */\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 40%, 98%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(215, 20%, 65%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(263, 70%, 50%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(263, 70%, 50%);\n  --success: hsl(142, 76%, 36%);\n  \n  /* Mystical Accent Colors */\n  --mystical-purple: hsl(263, 70%, 50%);\n  --mystical-violet: hsl(280, 60%, 55%);\n  --mystical-gold: hsl(45, 90%, 60%);\n  \n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    line-height: 1.6;\n  }\n}\n\n/* Typography */\n.font-heading {\n  font-family: var(--font-serif);\n}\n\n/* Simple gradient background */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(222, 84%, 5%) 0%, hsl(222, 84%, 8%) 50%, hsl(217, 32%, 17%) 100%);\n}\n\n/* Subtle animated background */\n.subtle-bg {\n  background: \n    radial-gradient(circle at 20% 80%, hsl(263, 70%, 50%, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, hsl(280, 60%, 55%, 0.1) 0%, transparent 50%),\n    linear-gradient(135deg, hsl(222, 84%, 5%) 0%, hsl(222, 84%, 8%) 100%);\n}\n\n/* Clean card styling */\n.clean-card {\n  background: var(--card);\n  border: 1px solid var(--border);\n  border-radius: var(--radius);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.clean-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 15px -3px rgba(0, 0, 0, 0.2);\n  border-color: var(--accent);\n}\n\n/* Accent gradient */\n.accent-gradient {\n  background: linear-gradient(135deg, var(--mystical-purple), var(--mystical-violet));\n}\n\n/* Subtle glow effect */\n.subtle-glow {\n  box-shadow: 0 0 20px rgba(133, 77, 250, 0.2);\n}\n\n/* Text gradient */\n.text-gradient {\n  background: linear-gradient(135deg, var(--mystical-purple), var(--mystical-violet));\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Button hover effects */\n.hover-lift {\n  transition: transform 0.2s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-1px);\n}\n\n/* Cosmic loader animations */\n@keyframes spin-slow {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n@keyframes spin-reverse {\n  from { transform: rotate(360deg); }\n  to { transform: rotate(0deg); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes float-delayed {\n  0%, 100% { transform: translateY(-5px); }\n  50% { transform: translateY(5px); }\n}\n\n@keyframes fade-in {\n  0% { opacity: 0; transform: translateY(10px); }\n  100% { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes shooting-star {\n  0% {\n    transform: translateX(-100px) translateY(100px);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n  }\n  90% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(100vw) translateY(-100px);\n    opacity: 0;\n  }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 4s linear infinite;\n}\n\n.animate-spin-reverse {\n  animation: spin-reverse 3s linear infinite;\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-float-delayed {\n  animation: float-delayed 3s ease-in-out infinite;\n}\n\n.animate-fade-in {\n  animation: fade-in 0.5s ease-out;\n}\n\n.shooting-star {\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  background: linear-gradient(45deg, white, transparent);\n  border-radius: 50%;\n  box-shadow: 0 0 10px white;\n  animation: shooting-star 6s linear infinite;\n}\n\n.shooting-star::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 50px;\n  height: 1px;\n  background: linear-gradient(90deg, white, transparent);\n  transform-origin: 0 0;\n  transform: rotate(45deg);\n}","size_bytes":4471},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { AstrologyInput, VastuInput, NumerologyInput, TarotInput } from \"@shared/schema\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport async function analyzePalmImage(base64Image: string): Promise<any> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert palmist with decades of experience in palm reading and analysis. Analyze the provided palm image and provide detailed insights. Return your analysis in JSON format with the following structure:\n\n{\n  \"personalityOverview\": \"Detailed personality analysis based on palm features\",\n  \"traits\": [\"trait1\", \"trait2\", \"trait3\", \"trait4\"],\n  \"lifeEnergyPercentage\": 85,\n  \"emotionalBalancePercentage\": 92,\n  \"careerPotentialPercentage\": 78,\n  \"loveAndRelationships\": {\n    \"heartLineAnalysis\": \"Analysis of the heart line and its implications\",\n    \"compatibilityInsights\": \"Relationship compatibility insights\",\n    \"relationshipStrength\": \"High|Medium|Low\"\n  },\n  \"careerAndSuccess\": {\n    \"professionalStrengths\": \"Professional strengths based on palm analysis\",\n    \"recommendedPaths\": [\"path1\", \"path2\", \"path3\"],\n    \"successPotential\": \"Very High|High|Medium|Low\"\n  },\n  \"healthAndWellness\": {\n    \"lifeLineInsights\": \"Life line analysis and health insights\",\n    \"wellnessRecommendations\": [\"recommendation1\", \"recommendation2\", \"recommendation3\"],\n    \"vitalityLevel\": \"Strong|Moderate|Weak\"\n  },\n  \"futureInsights\": {\n    \"nearFuture\": \"Predictions for the next 1-3 years\",\n    \"lifePathDirection\": \"Overall life path direction insights\",\n    \"pathClarity\": \"High|Medium|Low\"\n  },\n  \"palmLines\": {\n    \"heartLine\": \"Description of heart line characteristics\",\n    \"headLine\": \"Description of head line characteristics\", \n    \"lifeLine\": \"Description of life line characteristics\",\n    \"fateLine\": \"Description of fate line characteristics\"\n  }\n}\n\nFocus on traditional palmistry principles including line analysis, mounts, finger analysis, and overall palm shape. Provide positive, constructive insights while being specific and detailed.`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Please analyze this palm image and provide a comprehensive palmistry reading. Focus on the major lines, mounts, and overall palm characteristics to give insights about personality, relationships, career, health, and future prospects.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 2000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI palm analysis error:\", error);\n    throw new Error(\"Failed to analyze palm image: \" + (error as Error).message);\n  }\n}\n\nexport async function analyzeAstrologyChart(astrologyData: AstrologyInput): Promise<any> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert Vedic astrologer with decades of experience in Jyotish and birth chart analysis. Analyze the provided birth information and create a comprehensive Kundli (birth chart) reading. Return your analysis in JSON format with the following structure:\n\n{\n  \"personalityOverview\": \"Detailed personality analysis based on birth chart\",\n  \"sunSign\": \"Sun sign with detailed characteristics\",\n  \"moonSign\": \"Moon sign with emotional patterns\", \n  \"risingSign\": \"Rising sign (Lagna) with outward personality traits\",\n  \"kundliChart\": {\n    \"houses\": [\n      {\n        \"number\": 1,\n        \"sign\": \"Aries\",\n        \"planets\": [\"Sun\", \"Mercury\"],\n        \"ruling\": \"Mars\"\n      }\n    ],\n    \"planetaryPositions\": {\n      \"sun\": {\"sign\": \"Leo\", \"house\": 5, \"degrees\": 15.30},\n      \"moon\": {\"sign\": \"Cancer\", \"house\": 4, \"degrees\": 22.45},\n      \"mercury\": {\"sign\": \"Virgo\", \"house\": 6, \"degrees\": 8.15},\n      \"venus\": {\"sign\": \"Libra\", \"house\": 7, \"degrees\": 12.20},\n      \"mars\": {\"sign\": \"Scorpio\", \"house\": 8, \"degrees\": 25.10},\n      \"jupiter\": {\"sign\": \"Sagittarius\", \"house\": 9, \"degrees\": 18.55},\n      \"saturn\": {\"sign\": \"Capricorn\", \"house\": 10, \"degrees\": 3.40},\n      \"rahu\": {\"sign\": \"Gemini\", \"house\": 3, \"degrees\": 14.25},\n      \"ketu\": {\"sign\": \"Sagittarius\", \"house\": 9, \"degrees\": 14.25}\n    },\n    \"aspects\": [\n      {\n        \"from\": \"Jupiter\",\n        \"to\": \"Sun\", \n        \"type\": \"Trine\",\n        \"influence\": \"Positive influence bringing wisdom and expansion\"\n      }\n    ]\n  },\n  \"planetaryPositions\": {\n    \"sun\": \"Sun position and its influence\",\n    \"moon\": \"Moon position and its influence\",\n    \"mercury\": \"Mercury position and communication style\",\n    \"venus\": \"Venus position and love/relationship style\",\n    \"mars\": \"Mars position and energy/drive\",\n    \"jupiter\": \"Jupiter position and expansion/luck\",\n    \"saturn\": \"Saturn position and discipline/challenges\"\n  },\n  \"lifeAreas\": {\n    \"loveAndRelationships\": {\n      \"overview\": \"Comprehensive relationship analysis\",\n      \"compatibility\": \"Compatibility insights and ideal partner traits\",\n      \"romanticTendencies\": \"Romantic behavior and love patterns\"\n    },\n    \"careerAndFinances\": {\n      \"careerPath\": \"Ideal career paths and professional strengths\",\n      \"financialLuck\": \"Financial prospects and money management\",\n      \"professionalStrengths\": [\"strength1\", \"strength2\", \"strength3\"]\n    },\n    \"healthAndWellbeing\": {\n      \"physicalHealth\": \"Physical health tendencies and areas to watch\",\n      \"mentalHealth\": \"Mental and emotional health insights\",\n      \"recommendations\": [\"recommendation1\", \"recommendation2\", \"recommendation3\"]\n    },\n    \"spiritualGrowth\": {\n      \"lifeLesson\": \"Key life lessons to learn\",\n      \"spiritualPath\": \"Spiritual development and growth areas\",\n      \"karmaInsights\": \"Karmic patterns and soul purpose\"\n    }\n  },\n  \"predictions\": {\n    \"thisYear\": \"Major themes and events for this year\",\n    \"nextThreeYears\": \"Long-term predictions for next 3 years\",\n    \"majorLifeEvents\": [\"event1\", \"event2\", \"event3\"]\n  }\n}\n\nFocus on providing insightful, positive, and constructive guidance based on traditional astrological principles.`\n        },\n        {\n          role: \"user\",\n          content: `Please create a detailed Kundli (birth chart) analysis with the following birth details:\nBirth Date: ${astrologyData.birthDate}\nBirth Time: ${astrologyData.birthTime}\nBirth Place: ${astrologyData.birthPlace}\n\nCalculate the exact planetary positions, houses, and aspects for this birth time and location. Generate a complete Kundli chart with:\n1. All 12 houses with their signs and ruling planets\n2. Precise planetary positions with degrees for Sun, Moon, Mercury, Venus, Mars, Jupiter, Saturn, Rahu, and Ketu\n3. Major planetary aspects and their influences\n4. Comprehensive Vedic astrology analysis covering personality, relationships, career, health, spiritual growth, and future predictions\n\nUse traditional Vedic astrology principles and provide accurate astronomical calculations for the birth chart.`\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 3000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI astrology analysis error:\", error);\n    throw new Error(\"Failed to analyze astrology chart: \" + (error as Error).message);\n  }\n}\n\nexport async function generateChatResponse(\n  userMessage: string,\n  analysisType: string,\n  analysisData: any,\n  previousMessages: any[]\n): Promise<string> {\n  try {\n    const contextPrompt = `You are an expert ${analysisType} consultant providing follow-up guidance based on a previous analysis. \n    \nPrevious analysis data: ${JSON.stringify(analysisData)}\n\nChat history:\n${previousMessages.map(m => `${m.role}: ${m.content}`).join('\\n')}\n\nProvide helpful, insightful responses about the ${analysisType} analysis. Be specific, reference the previous analysis results, and offer practical guidance. Keep responses concise but meaningful.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: contextPrompt\n        },\n        {\n          role: \"user\",\n          content: userMessage\n        }\n      ],\n      max_completion_tokens: 500,\n    });\n\n    return response.choices[0].message.content || \"I apologize, but I couldn't generate a response. Please try again.\";\n  } catch (error) {\n    console.error(\"OpenAI chat response error:\", error);\n    throw new Error(\"Failed to generate chat response: \" + (error as Error).message);\n  }\n}\n\nexport async function generateMysticalChatResponse(\n  userMessage: string,\n  conversationHistory: { role: string; content: string }[]\n): Promise<string> {\n  try {\n    const systemPrompt = `You are a wise and knowledgeable mystical assistant specializing in palmistry, astrology, numerology, tarot, Vastu Shastra, and spiritual guidance. You provide insightful, compassionate, and practical advice while maintaining a mystical yet grounded approach.\n\nYour expertise includes:\n- Palmistry: Understanding palm lines, mounts, and hand shapes\n- Astrology: Vedic and Western astrology, birth charts, planetary influences\n- Numerology: Life path numbers, destiny numbers, personal year cycles\n- Tarot: Card meanings, spreads, intuitive interpretations\n- Vastu Shastra: Space energy, directional influences, home harmony\n- Spiritual Guidance: Meditation, chakras, energy healing, personal growth\n\nGuidelines:\n- Provide thoughtful, personalized responses based on traditional wisdom\n- Be encouraging and positive while being honest about challenges\n- Offer practical advice that can be applied to daily life\n- Reference relevant mystical principles when appropriate\n- Maintain a warm, supportive, and wise tone\n- If asked about specific analysis results, help users understand and apply insights\n- Encourage users to trust their intuition while providing guidance\n\nKeep responses concise but meaningful, typically 2-4 paragraphs unless more detail is specifically requested.`;\n\n    // Build the conversation context with proper typing\n    const messages: { role: \"system\" | \"user\" | \"assistant\"; content: string }[] = [\n      {\n        role: \"system\",\n        content: systemPrompt\n      },\n      // Add conversation history with proper role typing\n      ...conversationHistory.slice(-10).map(msg => ({\n        role: (msg.role === \"user\" || msg.role === \"assistant\") ? msg.role as \"user\" | \"assistant\" : \"user\",\n        content: msg.content\n      })),\n      {\n        role: \"user\" as const,\n        content: userMessage\n      }\n    ];\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // Using gpt-4o as it's the most reliable model available\n      messages,\n      max_completion_tokens: 800,\n      temperature: 0.7,\n    });\n\n    return response.choices[0].message.content || \"I apologize, but I couldn't generate a response. Please try again.\";\n  } catch (error) {\n    console.error(\"OpenAI mystical chat error:\", error);\n    throw new Error(\"Failed to generate mystical chat response: \" + (error as Error).message);\n  }\n}\n\nexport async function analyzeVastu(vastuData: VastuInput, base64Image?: string): Promise<any> {\n  try {\n    const messages: any[] = [\n      {\n        role: \"system\",\n        content: `You are an expert Vastu consultant with deep knowledge of Vastu Shastra principles. Analyze the provided layout information and provide detailed Vastu guidance. Return your analysis in JSON format with the following structure:\n\n{\n  \"overallScore\": 85,\n  \"overallAssessment\": \"Comprehensive assessment of the space's Vastu compliance\",\n  \"energyFlow\": {\n    \"positive\": [\"area1\", \"area2\", \"area3\"],\n    \"negative\": [\"area1\", \"area2\"],\n    \"neutral\": [\"area1\", \"area2\"]\n  },\n  \"roomAnalysis\": [\n    {\n      \"room\": \"Room name\",\n      \"direction\": \"Direction placement\",\n      \"vastuCompliance\": \"Compliance level and explanation\",\n      \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n      \"score\": 90\n    }\n  ],\n  \"recommendations\": {\n    \"immediate\": [\"Quick fixes that can be implemented immediately\"],\n    \"longTerm\": [\"Structural changes for better Vastu\"],\n    \"remedies\": [\"Vastu remedies using colors, elements, symbols\"]\n  },\n  \"prosperity\": {\n    \"wealth\": \"Impact on financial prosperity\",\n    \"health\": \"Impact on physical and mental health\",\n    \"relationships\": \"Impact on family and relationship harmony\",\n    \"career\": \"Impact on professional growth and success\"\n  }\n}\n\nFocus on practical, implementable Vastu solutions while respecting traditional principles.`\n      },\n      {\n        role: \"user\",\n        content: `Please analyze this ${vastuData.layoutType} layout for Vastu compliance:\n\nLayout Details:\n- Type: ${vastuData.layoutType}\n- Entrance: ${vastuData.entrance}\n- Building Shape: ${vastuData.buildingShape}\n- Surroundings: ${vastuData.surroundings}\n\nRooms:\n${vastuData.rooms.map(room => `- ${room.name}: ${room.direction} direction, ${room.size} size`).join('\\n')}\n\nProvide a comprehensive Vastu analysis with practical recommendations for optimal energy flow and prosperity.`\n      },\n    ];\n\n    // Add image analysis if provided\n    if (base64Image) {\n      messages[1].content = [\n        {\n          type: \"text\",\n          text: messages[1].content\n        },\n        {\n          type: \"image_url\",\n          image_url: {\n            url: `data:image/jpeg;base64,${base64Image}`\n          }\n        }\n      ];\n    }\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages,\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 3000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI Vastu analysis error:\", error);\n    throw new Error(\"Failed to analyze Vastu layout: \" + (error as Error).message);\n  }\n}\n\nexport async function analyzeNumerology(numerologyData: NumerologyInput): Promise<any> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert numerologist with deep knowledge of Pythagorean and Chaldean numerology systems. Analyze the provided information and calculate core numbers with detailed insights. Return your analysis in JSON format with the following structure:\n\n{\n  \"personalityOverview\": \"Comprehensive personality analysis based on numerological calculations\",\n  \"coreNumbers\": {\n    \"lifePathNumber\": {\n      \"number\": 7,\n      \"meaning\": \"Detailed meaning of the life path number\",\n      \"traits\": [\"trait1\", \"trait2\", \"trait3\", \"trait4\"]\n    },\n    \"destinyNumber\": {\n      \"number\": 5,\n      \"meaning\": \"Detailed meaning of the destiny number\",\n      \"purpose\": \"Life purpose and ultimate goals\"\n    },\n    \"soulUrgeNumber\": {\n      \"number\": 3,\n      \"meaning\": \"Detailed meaning of the soul urge number\",\n      \"desires\": \"Inner desires and motivations\"\n    },\n    \"personalityNumber\": {\n      \"number\": 9,\n      \"meaning\": \"Detailed meaning of the personality number\",\n      \"impression\": \"How others perceive you\"\n    }\n  },\n  \"lifeAreas\": {\n    \"strengths\": [\"strength1\", \"strength2\", \"strength3\", \"strength4\"],\n    \"challenges\": [\"challenge1\", \"challenge2\", \"challenge3\"],\n    \"careerPath\": \"Ideal career paths and professional guidance\",\n    \"relationships\": \"Relationship patterns and compatibility insights\",\n    \"luckyNumbers\": [7, 14, 21, 28],\n    \"favorableColors\": [\"color1\", \"color2\", \"color3\"]\n  },\n  \"predictions\": {\n    \"currentYear\": \"Analysis of current year's energy and focus areas\",\n    \"nextPhase\": \"What to expect in the next phase of life\",\n    \"opportunities\": [\"opportunity1\", \"opportunity2\", \"opportunity3\"]\n  }\n}\n\nCalculate numbers using traditional numerological methods. For Life Path, reduce birth date to single digit. For Destiny/Expression, use full birth name. For Soul Urge, use vowels in name. For Personality, use consonants in name. Provide positive, empowering insights while being specific and actionable.`\n        },\n        {\n          role: \"user\",\n          content: `Please analyze my numerology with the following details:\n${numerologyData.analysisType === 'personal' ? `\nAnalysis Type: Personal Numerology\nFull Name: ${numerologyData.name}\nBirth Date: ${numerologyData.birthDate}\n\nCalculate my Life Path Number from birth date, Destiny Number from full name, Soul Urge Number from vowels, and Personality Number from consonants. Provide comprehensive insights about my personality, life purpose, strengths, challenges, and future guidance.` : `\nAnalysis Type: Business Numerology  \nCompany Name: ${numerologyData.companyName}\n\nCalculate the business destiny number from the company name and provide insights about business potential, success factors, favorable activities, and growth opportunities.`}\n\nProvide detailed numerological analysis with practical guidance for personal and professional development.`\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 3000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI numerology analysis error:\", error);\n    throw new Error(\"Failed to analyze numerology: \" + (error as Error).message);\n  }\n}\n\nexport async function analyzeTarot(tarotData: TarotInput): Promise<any> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert tarot reader with decades of experience in card interpretation and divination. Analyze the provided tarot spread and cards to give meaningful, insightful guidance. Return your analysis in JSON format with the following structure:\n\n{\n  \"spreadType\": \"The type of spread used\",\n  \"personalityOverview\": \"Personality insights based on the overall card energy and spread\",\n  \"cardAnalysis\": [\n    {\n      \"position\": \"Position name in the spread\",\n      \"cardName\": \"Name of the card\",\n      \"meaning\": \"Traditional meaning of the card\",\n      \"interpretation\": \"Specific interpretation for this position and question\",\n      \"reversed\": false,\n      \"reversedMeaning\": \"Meaning when reversed (if applicable)\"\n    }\n  ],\n  \"overallMessage\": \"The main message from the reading\",\n  \"guidance\": {\n    \"pastInfluences\": \"Past influences affecting the situation\",\n    \"presentSituation\": \"Current situation analysis\",\n    \"futureOutlook\": \"Future potential and trends\",\n    \"advice\": \"Practical advice and guidance\",\n    \"outcome\": \"Potential outcome if current path continues\"\n  },\n  \"actionSteps\": [\"step1\", \"step2\", \"step3\"],\n  \"reflection\": \"Deep reflection and spiritual insights from the reading\"\n}\n\nFocus on traditional tarot meanings while providing personalized, empowering guidance. Be specific about how each card relates to its position in the spread. Consider reversed cards as offering different perspectives, not necessarily negative meanings. Provide practical, actionable advice while honoring the mystical nature of tarot.`\n        },\n        {\n          role: \"user\",\n          content: `Please interpret this tarot reading:\n          \nSpread Type: ${tarotData.spreadType}\n${tarotData.question ? `Question: ${tarotData.question}` : 'General guidance reading'}\n\nCards Drawn:\n${tarotData.drawnCards.map((card, index) => \n  `${index + 1}. Position: ${card.position}\n     Card: ${card.cardName}${card.suit ? ` (${card.suit})` : ''}\n     ${card.reversed ? 'REVERSED' : 'UPRIGHT'}`\n).join('\\n\\n')}\n\nProvide a comprehensive tarot interpretation with deep insights, practical guidance, and spiritual wisdom. Consider the relationships between the cards and how they speak to each other within the spread. Offer empowering advice that helps the querent understand their situation and potential paths forward.`\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 4000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI tarot analysis error:\", error);\n    throw new Error(\"Failed to analyze tarot reading: \" + (error as Error).message);\n  }\n}\n","size_bytes":20880},"client/src/components/analysis-results.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PalmAnalysisResult } from \"@shared/schema\";\nimport { PostAnalysisChat } from \"./post-analysis-chat\";\nimport { \n  User, \n  Heart, \n  Briefcase, \n  Leaf, \n  Gem,\n  Download,\n  Share,\n  RotateCcw,\n  Star,\n  Trophy,\n  Activity,\n  Compass,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface AnalysisResultsProps {\n  result: PalmAnalysisResult;\n  imageUrl: string;\n  onAnalyzeAnother: () => void;\n  analysisId?: string;\n  isAuthenticated?: boolean;\n  onLoginRequired?: () => void;\n}\n\nexport function AnalysisResults({ \n  result, \n  imageUrl, \n  onAnalyzeAnother, \n  analysisId, \n  isAuthenticated = false, \n  onLoginRequired \n}: AnalysisResultsProps) {\n  const handleDownloadReport = () => {\n    const reportContent = `PALM READING ANALYSIS REPORT\n\n` +\n      `Personality Overview:\\n${result.personalityOverview || 'Not available'}\\n\\n` +\n      `Life Energy: ${result.lifeEnergyPercentage || 'N/A'}%\\n` +\n      `Emotional Balance: ${result.emotionalBalancePercentage || 'N/A'}%\\n` +\n      `Career Potential: ${result.careerPotentialPercentage || 'N/A'}%\\n\\n` +\n      `Love & Relationships:\\n${result.loveAndRelationships?.heartLineAnalysis || 'Not available'}\\n\\n` +\n      `Career & Success:\\n${result.careerAndSuccess?.professionalStrengths || 'Not available'}\\n\\n` +\n      `Health & Wellness:\\n${result.healthAndWellness?.lifeLineInsights || 'Not available'}\\n\\n` +\n      `Future Insights:\\n${result.futureInsights?.nearFuture || 'Not available'}\\n\\n` +\n      `Generated by MysticRead AI - ${new Date().toLocaleDateString()}`;\n    \n    const blob = new Blob([reportContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `palm-reading-report-${new Date().getTime()}.txt`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleShareResults = () => {\n    const shareText = `I just got my AI palm reading from MysticRead AI! ` +\n      `Life Energy: ${result.lifeEnergyPercentage || 'N/A'}%, ` +\n      `Emotional Balance: ${result.emotionalBalancePercentage || 'N/A'}%, ` +\n      `Career Potential: ${result.careerPotentialPercentage || 'N/A'}%. ` +\n      `Check out MysticRead AI for your own analysis!`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: 'My Palm Reading Results',\n        text: shareText,\n      });\n    } else {\n      navigator.clipboard.writeText(shareText).then(() => {\n        alert('Results copied to clipboard!');\n      });\n    }\n  };\n\n  return (\n    <section id=\"results-section\" className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          \n          {/* Results Header */}\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-4\">Your Palm Reading Results</h3>\n            <p className=\"text-lg text-gray-900\">\n              AI-powered analysis of your palm reveals fascinating insights about your life\n            </p>\n          </div>\n\n          {/* Analysis Overview */}\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n            {/* Palm Image with Annotations */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"bg-slate-50\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-4\">Analyzed Palm Image</h4>\n                  <div className=\"relative\">\n                    <img \n                      src={imageUrl} \n                      alt=\"Analyzed palm\" \n                      className=\"w-full rounded-lg shadow-md\"\n                      data-testid=\"img-analyzed-palm\"\n                    />\n                    <div className=\"absolute top-2 right-2 bg-white bg-opacity-90 rounded-full p-2\">\n                      <CheckCircle className=\"h-4 w-4 text-success\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 space-y-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-900\">\n                      <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                      <span>Heart Line</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-900\">\n                      <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                      <span>Head Line</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-900\">\n                      <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                      <span>Life Line</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-900\">\n                      <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\n                      <span>Fate Line</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Overall Summary */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"grid gap-6\">\n                {/* Personality Overview */}\n                <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n                        <User className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <h4 className=\"text-xl font-semibold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent\">Personality Overview</h4>\n                    </div>\n                    <p className=\"text-gray-900 leading-relaxed mb-4\" data-testid=\"text-personality-overview\">\n                      {result.personalityOverview}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {result.traits?.map((trait, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                          {trait}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Quick Stats */}\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <Card className=\"text-center\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"text-2xl font-bold text-accent mb-1\" data-testid=\"text-life-energy\">\n                        {result.lifeEnergyPercentage}%\n                      </div>\n                      <div className=\"text-sm text-blue-500\">Life Energy</div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"text-center\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"text-2xl font-bold text-success mb-1\" data-testid=\"text-emotional-balance\">\n                        {result.emotionalBalancePercentage}%\n                      </div>\n                      <div className=\"text-sm text-blue-500\">Emotional Balance</div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"text-center\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"text-2xl font-bold text-purple-600 mb-1\" data-testid=\"text-career-potential\">\n                        {result.careerPotentialPercentage}%\n                      </div>\n                      <div className=\"text-sm text-blue-500\">Career Potential</div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Detailed Analysis Sections */}\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Love & Relationships */}\n            <Card className=\"bg-rose-50 border-rose-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-rose-500 rounded-full flex items-center justify-center\">\n                    <Heart className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent\">Love & Relationships</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Heart Line Analysis</h5>\n                    <p className=\"text-gray-900 text-sm\" data-testid=\"text-heart-line-analysis\">\n                      {result.loveAndRelationships?.heartLineAnalysis || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Compatibility Insights</h5>\n                    <p className=\"text-gray-900 text-sm\" data-testid=\"text-compatibility-insights\">\n                      {result.loveAndRelationships?.compatibilityInsights || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-rose-600\">\n                    <Star className=\"h-4 w-4\" />\n                    <span data-testid=\"text-relationship-strength\">\n                      Relationship Strength: {result.loveAndRelationships?.relationshipStrength || 'Not analyzed'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Career & Success */}\n            <Card className=\"bg-amber-50 border-amber-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-amber-500 rounded-full flex items-center justify-center\">\n                    <Briefcase className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent\">Career & Success</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Professional Strengths</h5>\n                    <p className=\"text-gray-900 text-sm\" data-testid=\"text-professional-strengths\">\n                      {result.careerAndSuccess?.professionalStrengths || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Recommended Paths</h5>\n                    <ul className=\"text-gray-900 text-sm space-y-1\">\n                      {result.careerAndSuccess?.recommendedPaths?.map((path, index) => (\n                        <li key={index} data-testid={`text-career-path-${index}`}>• {path}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-amber-600\">\n                    <Trophy className=\"h-4 w-4\" />\n                    <span data-testid=\"text-success-potential\">\n                      Success Potential: {result.careerAndSuccess?.successPotential || 'Not analyzed'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Health & Wellness */}\n            <Card className=\"bg-emerald-50 border-emerald-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-emerald-500 rounded-full flex items-center justify-center\">\n                    <Leaf className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent\">Health & Wellness</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Life Line Insights</h5>\n                    <p className=\"text-gray-900 text-sm\" data-testid=\"text-life-line-insights\">\n                      {result.healthAndWellness?.lifeLineInsights || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Wellness Recommendations</h5>\n                    <ul className=\"text-gray-900 text-sm space-y-1\">\n                      {result.healthAndWellness?.wellnessRecommendations?.map((recommendation, index) => (\n                        <li key={index} data-testid={`text-wellness-recommendation-${index}`}>• {recommendation}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-emerald-600\">\n                    <Activity className=\"h-4 w-4\" />\n                    <span data-testid=\"text-vitality-level\">\n                      Vitality Level: {result.healthAndWellness?.vitalityLevel || 'Not analyzed'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Future Predictions */}\n            <Card className=\"bg-indigo-50 border-indigo-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-indigo-500 rounded-full flex items-center justify-center\">\n                    <Gem className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent\">Future Insights</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Near Future (1-3 Years)</h5>\n                    <p className=\"text-gray-900 text-sm\" data-testid=\"text-near-future\">\n                      {result.futureInsights?.nearFuture || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium bg-gradient-to-r from-purple-800 to-purple-900 bg-clip-text text-transparent mb-2\">Life Path Direction</h5>\n                    <p className=\"text-gray-900 text-sm\" data-testid=\"text-life-path-direction\">\n                      {result.futureInsights?.lifePathDirection || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-indigo-600\">\n                    <Compass className=\"h-4 w-4\" />\n                    <span data-testid=\"text-path-clarity\">\n                      Path Clarity: {result.futureInsights?.pathClarity || 'Not analyzed'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Post-Analysis Chat */}\n          {analysisId && (\n            <div className=\"mb-12\">\n              <PostAnalysisChat\n                analysisId={analysisId}\n                analysisType=\"palm\"\n                analysisData={result}\n                isAuthenticated={isAuthenticated}\n                onLoginRequired={onLoginRequired || (() => {})}\n              />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"text-center mt-12\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleDownloadReport}\n                className=\"bg-accent hover:bg-blue-600\"\n                data-testid=\"button-download-report\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Full Report\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleShareResults}\n                data-testid=\"button-share-results\"\n              >\n                <Share className=\"mr-2 h-4 w-4\" />\n                Share Results\n              </Button>\n              <Button \n                variant=\"ghost\"\n                onClick={onAnalyzeAnother}\n                className=\"text-accent hover:text-blue-600\"\n                data-testid=\"button-analyze-another\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Analyze Another Palm\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":17636},"client/src/components/astrology-analysis-interface.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Stars, Calendar, MapPin, Clock, Loader2 } from \"lucide-react\";\nimport { AstrologyAnalysisResult, AstrologyInput } from \"@shared/schema\";\nimport { CosmicLoader } from \"@/components/cosmic-loader\";\n\ninterface AstrologyAnalysisInterfaceProps {\n  onAnalysisComplete: (result: AstrologyAnalysisResult, inputData: AstrologyInput, analysisId: string) => void;\n}\n\nexport function AstrologyAnalysisInterface({ onAnalysisComplete }: AstrologyAnalysisInterfaceProps) {\n  const [birthDate, setBirthDate] = useState(\"\");\n  const [birthTime, setBirthTime] = useState(\"\");\n  const [birthPlace, setBirthPlace] = useState(\"\");\n  \n  const { toast } = useToast();\n\n  const analysisMutation = useMutation({\n    mutationFn: async (astrologyData: AstrologyInput) => {\n      const response = await apiRequest(\"POST\", \"/api/astrology/analyze\", astrologyData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onAnalysisComplete(data.result, data.inputData, data.id);\n      toast({\n        title: \"Analysis Complete!\",\n        description: \"Your astrological chart reading is ready.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = () => {\n    if (!birthDate || !birthTime || !birthPlace) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all birth details for accurate analysis.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const astrologyData: AstrologyInput = {\n      birthDate,\n      birthTime,\n      birthPlace,\n    };\n\n    analysisMutation.mutate(astrologyData);\n  };\n\n  return (\n    <div className=\"py-8\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-primary mb-4\">Astrology Chart Analysis</h3>\n            <p className=\"text-lg text-secondary\">\n              Enter your birth details to receive a comprehensive astrological reading\n            </p>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"birthDate\" className=\"text-primary font-medium\">\n                      <Calendar className=\"inline mr-2 h-4 w-4\" />\n                      Birth Date\n                    </Label>\n                    <Input\n                      id=\"birthDate\"\n                      type=\"date\"\n                      value={birthDate}\n                      onChange={(e) => setBirthDate(e.target.value)}\n                      className=\"w-full\"\n                      data-testid=\"input-birth-date\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"birthTime\" className=\"text-primary font-medium\">\n                      <Clock className=\"inline mr-2 h-4 w-4\" />\n                      Birth Time\n                    </Label>\n                    <Input\n                      id=\"birthTime\"\n                      type=\"time\"\n                      value={birthTime}\n                      onChange={(e) => setBirthTime(e.target.value)}\n                      className=\"w-full\"\n                      data-testid=\"input-birth-time\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"birthPlace\" className=\"text-primary font-medium\">\n                    <MapPin className=\"inline mr-2 h-4 w-4\" />\n                    Birth Place (City, Country)\n                  </Label>\n                  <Input\n                    id=\"birthPlace\"\n                    type=\"text\"\n                    placeholder=\"e.g., New York, USA or Mumbai, India\"\n                    value={birthPlace}\n                    onChange={(e) => setBirthPlace(e.target.value)}\n                    className=\"w-full\"\n                    data-testid=\"input-birth-place\"\n                  />\n                </div>\n\n                <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <h5 className=\"font-medium text-primary mb-3 flex items-center\">\n                    <Stars className=\"text-accent mr-2 h-4 w-4\" />\n                    Why We Need This Information\n                  </h5>\n                  <ul className=\"text-sm text-secondary space-y-1\">\n                    <li>• <strong>Birth Date:</strong> Determines your sun sign and planetary positions</li>\n                    <li>• <strong>Birth Time:</strong> Essential for calculating rising sign and house positions</li>\n                    <li>• <strong>Birth Place:</strong> Used to determine exact celestial coordinates</li>\n                    <li>• Accurate timing creates precise charts for better predictions</li>\n                  </ul>\n                </div>\n\n                <div className=\"text-center mt-8\">\n                  <Button\n                    onClick={handleAnalyze}\n                    disabled={analysisMutation.isPending || !birthDate || !birthTime || !birthPlace}\n                    size=\"lg\"\n                    className=\"bg-accent hover:bg-blue-600 text-white px-8 py-4 text-lg shadow-lg\"\n                    data-testid=\"button-analyze-astrology\"\n                  >\n                    {analysisMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                        Analyzing Chart...\n                      </>\n                    ) : (\n                      <>\n                        <Stars className=\"mr-2 h-5 w-5\" />\n                        Generate Astrology Reading\n                      </>\n                    )}\n                  </Button>\n                  <p className=\"text-sm text-secondary mt-2\">Analysis typically takes 15-45 seconds</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <CosmicLoader \n        analysisType=\"astrology\"\n        isVisible={analysisMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":6698},"client/src/components/astrology-results.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AstrologyAnalysisResult, AstrologyInput } from \"@shared/schema\";\nimport { KundliChart } from \"./kundli-chart\";\nimport { PostAnalysisChat } from \"./post-analysis-chat\";\nimport { \n  Stars, \n  Sun, \n  Moon, \n  Heart, \n  Briefcase, \n  Leaf, \n  Gem,\n  Download,\n  Share,\n  RotateCcw,\n  Zap,\n  TrendingUp,\n  Compass,\n  Brain\n} from \"lucide-react\";\n\ninterface AstrologyResultsProps {\n  result: AstrologyAnalysisResult;\n  inputData: AstrologyInput;\n  onAnalyzeAnother: () => void;\n  analysisId?: string;\n  isAuthenticated?: boolean;\n  onLoginRequired?: () => void;\n}\n\nexport function AstrologyResults({ \n  result, \n  inputData, \n  onAnalyzeAnother, \n  analysisId, \n  isAuthenticated = false, \n  onLoginRequired \n}: AstrologyResultsProps) {\n  const handleDownloadReport = () => {\n    const reportContent = `ASTROLOGY CHART ANALYSIS REPORT\\n\\n` +\n      `Birth Details:\\n` +\n      `Born: ${inputData.birthDate} at ${inputData.birthTime} in ${inputData.birthPlace}\\n\\n` +\n      `Personality Overview:\\n${result.personalityOverview || 'Not available'}\\n\\n` +\n      `Core Signs:\\n` +\n      `Sun Sign: ${result.sunSign || 'Not available'}\\n` +\n      `Moon Sign: ${result.moonSign || 'Not available'}\\n` +\n      `Rising Sign: ${result.risingSign || 'Not available'}\\n\\n` +\n      `Love & Relationships:\\n${result.lifeAreas?.loveAndRelationships?.overview || 'Not available'}\\n\\n` +\n      `Career & Finances:\\n${result.lifeAreas?.careerAndFinances?.careerPath || 'Not available'}\\n\\n` +\n      `Health & Wellbeing:\\n${result.lifeAreas?.healthAndWellbeing?.physicalHealth || 'Not available'}\\n\\n` +\n      `Future Predictions:\\n${result.predictions?.thisYear || 'Not available'}\\n\\n` +\n      `Generated by MysticRead AI - ${new Date().toLocaleDateString()}`;\n    \n    const blob = new Blob([reportContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `astrology-report-${new Date().getTime()}.txt`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleShareResults = () => {\n    const shareText = `I just got my astrology chart reading from MysticRead AI! ` +\n      `Sun: ${result.sunSign || 'N/A'}, Moon: ${result.moonSign || 'N/A'}, Rising: ${result.risingSign || 'N/A'}. ` +\n      `Check out MysticRead AI for your own cosmic insights!`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: 'My Astrology Chart Reading',\n        text: shareText,\n      });\n    } else {\n      navigator.clipboard.writeText(shareText).then(() => {\n        alert('Results copied to clipboard!');\n      });\n    }\n  };\n\n  return (\n    <section id=\"astrology-results-section\" className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          \n          {/* Results Header */}\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-primary mb-4\">Your Astrological Chart Reading</h3>\n            <p className=\"text-lg text-secondary\">\n              AI-powered analysis of your birth chart reveals insights about your cosmic blueprint\n            </p>\n            <div className=\"mt-4 text-sm text-muted-foreground\">\n              Born: {inputData.birthDate} at {inputData.birthTime} in {inputData.birthPlace}\n            </div>\n          </div>\n\n          {/* Kundli Chart Visualization */}\n          {result.kundliChart && (\n            <div className=\"mb-12\">\n              <KundliChart kundliData={result.kundliChart} />\n            </div>\n          )}\n\n          {/* Chart Overview */}\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n            {/* Signs Overview */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold text-primary mb-4 flex items-center\">\n                    <Stars className=\"mr-2 h-5 w-5 text-indigo-600\" />\n                    Your Core Signs\n                  </h4>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <Sun className=\"h-8 w-8 text-orange-500\" />\n                      <div>\n                        <div className=\"font-medium\">Sun Sign</div>\n                        <div className=\"text-sm text-secondary\" data-testid=\"text-sun-sign\">\n                          {result.sunSign}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Moon className=\"h-8 w-8 text-blue-500\" />\n                      <div>\n                        <div className=\"font-medium\">Moon Sign</div>\n                        <div className=\"text-sm text-secondary\" data-testid=\"text-moon-sign\">\n                          {result.moonSign}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <TrendingUp className=\"h-8 w-8 text-green-500\" />\n                      <div>\n                        <div className=\"font-medium\">Rising Sign</div>\n                        <div className=\"text-sm text-secondary\" data-testid=\"text-rising-sign\">\n                          {result.risingSign}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Personality Overview */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"bg-gradient-to-r from-blue-50 to-cyan-50 border-blue-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <Brain className=\"h-5 w-5 text-white\" />\n                    </div>\n                    <h4 className=\"text-xl font-semibold text-primary\">Personality Overview</h4>\n                  </div>\n                  <p className=\"text-secondary leading-relaxed\" data-testid=\"text-astrology-personality-overview\">\n                    {result.personalityOverview}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Planetary Positions */}\n          <Card className=\"mb-8 bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200\">\n            <CardContent className=\"p-6\">\n              <h4 className=\"text-xl font-semibold text-primary mb-6 flex items-center\">\n                <Zap className=\"mr-2 h-5 w-5 text-purple-600\" />\n                Planetary Influences\n              </h4>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {Object.entries(result.planetaryPositions).map(([planet, description]) => (\n                  <div key={planet} className=\"bg-white p-4 rounded-lg shadow-sm\">\n                    <div className=\"font-medium text-primary capitalize mb-2\">{planet}</div>\n                    <div className=\"text-sm text-secondary\" data-testid={`text-planet-${planet}`}>\n                      {description}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Life Areas Analysis */}\n          <div className=\"grid lg:grid-cols-2 gap-8 mb-8\">\n            {/* Love & Relationships */}\n            <Card className=\"bg-rose-50 border-rose-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-rose-500 rounded-full flex items-center justify-center\">\n                    <Heart className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Love & Relationships</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Overview</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-love-overview\">\n                      {result.lifeAreas?.loveAndRelationships?.overview || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Compatibility</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-love-compatibility\">\n                      {result.lifeAreas?.loveAndRelationships?.compatibility || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Romantic Tendencies</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-romantic-tendencies\">\n                      {result.lifeAreas?.loveAndRelationships?.romanticTendencies || 'Analysis not available'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Career & Finances */}\n            <Card className=\"bg-amber-50 border-amber-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-amber-500 rounded-full flex items-center justify-center\">\n                    <Briefcase className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Career & Finances</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Career Path</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-career-path\">\n                      {result.lifeAreas?.careerAndFinances?.careerPath || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Financial Prospects</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-financial-luck\">\n                      {result.lifeAreas?.careerAndFinances?.financialLuck || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Professional Strengths</h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {result.lifeAreas?.careerAndFinances?.professionalStrengths?.map((strength, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-amber-100 text-amber-800\">\n                          {strength}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Health & Wellbeing */}\n            <Card className=\"bg-emerald-50 border-emerald-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-emerald-500 rounded-full flex items-center justify-center\">\n                    <Leaf className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Health & Wellbeing</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Physical Health</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-physical-health\">\n                      {result.lifeAreas?.healthAndWellbeing?.physicalHealth || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Mental Health</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-mental-health\">\n                      {result.lifeAreas?.healthAndWellbeing?.mentalHealth || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Recommendations</h5>\n                    <ul className=\"text-secondary text-sm space-y-1\">\n                      {result.lifeAreas?.healthAndWellbeing?.recommendations?.map((recommendation, index) => (\n                        <li key={index} data-testid={`text-health-recommendation-${index}`}>• {recommendation}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Spiritual Growth */}\n            <Card className=\"bg-indigo-50 border-indigo-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-indigo-500 rounded-full flex items-center justify-center\">\n                    <Gem className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Spiritual Growth</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Life Lesson</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-life-lesson\">\n                      {result.lifeAreas?.spiritualGrowth?.lifeLesson || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Spiritual Path</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-spiritual-path\">\n                      {result.lifeAreas?.spiritualGrowth?.spiritualPath || 'Analysis not available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-primary mb-2\">Karma Insights</h5>\n                    <p className=\"text-secondary text-sm\" data-testid=\"text-karma-insights\">\n                      {result.lifeAreas?.spiritualGrowth?.karmaInsights || 'Analysis not available'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Future Predictions */}\n          <Card className=\"mb-8 bg-gradient-to-r from-violet-50 to-purple-50 border-violet-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"w-10 h-10 bg-violet-500 rounded-full flex items-center justify-center\">\n                  <Compass className=\"h-5 w-5 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-semibold text-primary\">Future Predictions</h4>\n              </div>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h5 className=\"font-medium text-primary mb-3\">This Year</h5>\n                  <p className=\"text-secondary text-sm\" data-testid=\"text-this-year\">\n                    {result.predictions?.thisYear || 'Analysis not available'}\n                  </p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-primary mb-3\">Next Three Years</h5>\n                  <p className=\"text-secondary text-sm\" data-testid=\"text-next-three-years\">\n                    {result.predictions?.nextThreeYears || 'Analysis not available'}\n                  </p>\n                </div>\n              </div>\n              <div className=\"mt-6\">\n                <h5 className=\"font-medium text-primary mb-3\">Major Life Events</h5>\n                <ul className=\"text-secondary text-sm space-y-1\">\n                  {result.predictions?.majorLifeEvents?.map((event, index) => (\n                    <li key={index} data-testid={`text-major-event-${index}`}>• {event}</li>\n                  ))}\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Post-Analysis Chat */}\n          {analysisId && (\n            <div className=\"mb-12\">\n              <PostAnalysisChat\n                analysisId={analysisId}\n                analysisType=\"astrology\"\n                analysisData={result}\n                isAuthenticated={isAuthenticated}\n                onLoginRequired={onLoginRequired || (() => {})}\n              />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"text-center\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleDownloadReport}\n                className=\"bg-accent hover:bg-blue-600\"\n                data-testid=\"button-download-astrology-report\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Full Report\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleShareResults}\n                data-testid=\"button-share-astrology-results\"\n              >\n                <Share className=\"mr-2 h-4 w-4\" />\n                Share Results\n              </Button>\n              <Button \n                variant=\"ghost\"\n                onClick={onAnalyzeAnother}\n                className=\"text-accent hover:text-blue-600\"\n                data-testid=\"button-analyze-another-astrology\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Analyze Another Chart\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":18206},"client/src/components/features-section.tsx":{"content":"import { Hand, Stars, Home, Calculator, Zap } from \"lucide-react\";\n\nexport function FeaturesSection() {\n  const features = [\n    {\n      icon: Hand,\n      title: \"Palmistry Divination\",\n      description: \"Ancient wisdom meets cosmic AI to reveal the secrets written in your palms - personality, destiny, and life's sacred journey.\",\n      rune: \"ᚱ\",\n      gradient: \"from-purple-400 to-violet-600\",\n    },\n    {\n      icon: Stars,\n      title: \"Celestial Astrology\", \n      description: \"Navigate the cosmic tapestry through your birth chart, unlocking stellar insights about love, purpose, and divine timing.\",\n      rune: \"ᚨ\",\n      gradient: \"from-indigo-400 to-purple-600\",\n    },\n    {\n      icon: Home,\n      title: \"Sacred Vastu Wisdom\",\n      description: \"Harmonize your living spaces with ancient Vastu principles, channeling prosperity and positive energy through divine alignment.\",\n      rune: \"ᚢ\",\n      gradient: \"from-violet-400 to-indigo-600\",\n    },\n    {\n      icon: Calculator,\n      title: \"Numerology Mysteries\",\n      description: \"Decode the mystical language of numbers that shape your reality, revealing hidden patterns in your life's cosmic design.\",\n      rune: \"ᚾ\",\n      gradient: \"from-purple-500 to-violet-500\",\n    },\n    {\n      icon: Zap,\n      title: \"Tarot Revelations\",\n      description: \"Unveil the archetypal forces guiding your path through ancient tarot wisdom, illuminating past, present, and future mysteries.\",\n      rune: \"ᚦ\",\n      gradient: \"from-indigo-500 to-purple-500\",\n    },\n  ];\n\n  return (\n    <section id=\"features\" className=\"py-20 bg-card\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h3 className=\"text-3xl md:text-4xl font-heading font-bold mb-6 text-foreground\">\n            Five Sacred Arts of\n            <span className=\"text-gradient\"> Divination</span>\n          </h3>\n          \n          <p className=\"text-lg text-secondary-foreground max-w-3xl mx-auto leading-relaxed\">\n            Explore ancient wisdom enhanced by AI intelligence. Each mystical art offers unique insights \n            into your personality, destiny, and life's deepest mysteries.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n          {features.map((feature, index) => (\n            <div \n              key={index} \n              className=\"clean-card p-6 text-center group\"\n            >\n              {/* Icon Container */}\n              <div className=\"relative mb-6\">\n                <div className={`w-16 h-16 rounded-full bg-gradient-to-br ${feature.gradient} flex items-center justify-center mx-auto shadow-lg`}>\n                  <feature.icon className=\"h-8 w-8 text-white\" />\n                </div>\n                \n                {/* Floating Badge */}\n                <div className=\"absolute -top-1 -right-1 w-6 h-6 rounded-full bg-gradient-to-br from-yellow-400 to-orange-400 flex items-center justify-center shadow-md\">\n                  <span className=\"text-white text-xs font-bold\">{feature.rune}</span>\n                </div>\n              </div>\n              \n              <h4 className=\"text-xl font-heading font-semibold mb-4 text-foreground group-hover:text-accent transition-colors duration-300\">\n                {feature.title}\n              </h4>\n              \n              <p className=\"text-secondary-foreground leading-relaxed text-sm\">\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3601},"client/src/components/footer.tsx":{"content":"import { Hand } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-16\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <Link href=\"/\" className=\"flex items-center space-x-2 mb-6\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <Hand className=\"text-white text-sm\" />\n              </div>\n              <h5 className=\"text-xl font-bold text-white\">MysticRead AI</h5>\n            </Link>\n            <p className=\"text-gray-300 mb-6\">\nDiscover your future through advanced AI-powered mystical analysis including palmistry, astrology, and Vastu.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-twitter text-xl\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-facebook text-xl\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-instagram text-xl\"></i>\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h6 className=\"font-semibold mb-4 text-white\">Features</h6>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Palm Analysis</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Astrology</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Vaastu</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Camera Integration</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">AI Technology</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Detailed Reports</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h6 className=\"font-semibold mb-4 text-white\">Support</h6>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">API Documentation</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Status</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h6 className=\"font-semibold mb-4 text-white\">Legal</h6>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Terms of Service</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Cookie Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Disclaimer</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-700 mt-12 pt-8 text-center text-gray-300\">\n          <p>&copy; 2025 MysticRead AI. All rights reserved. Built with advanced AI technology.</p>\n          <p className=\"mt-2\">Made by Motion Falcon</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3638},"client/src/components/header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { Menu, X } from \"lucide-react\";\nimport { AuthHeader } from \"@/components/auth/auth-header\";\n\nexport function Header() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  return (\n    <header className=\"bg-background/95 backdrop-blur-md border-b border-border sticky top-0 z-50\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <nav className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n            <div className=\"w-10 h-10 rounded-full accent-gradient flex items-center justify-center shadow-lg hover:scale-105 transition-all duration-300\">\n              <Sparkles className=\"text-white h-5 w-5\" />\n            </div>\n            <h1 className=\"text-2xl font-heading font-bold text-foreground group-hover:text-accent transition-colors duration-300\">\n              MysticRead<span className=\"text-accent\"> AI</span>\n            </h1>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <a href=\"#features\" className=\"text-secondary-foreground hover:text-foreground transition-colors duration-300\">\n              Features\n            </a>\n            <a href=\"#how-it-works\" className=\"text-secondary-foreground hover:text-foreground transition-colors duration-300\">\n              How It Works\n            </a>\n            <a href=\"#about\" className=\"text-secondary-foreground hover:text-foreground transition-colors duration-300\">\n              About\n            </a>\n          </div>\n          \n          <div className=\"hidden md:flex\">\n            <AuthHeader />\n          </div>\n          \n          <div className=\"md:hidden\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </nav>\n        \n        {isMobileMenuOpen && (\n          <div className=\"md:hidden mt-4 pb-4 border-t border-slate-200\">\n            <div className=\"flex flex-col space-y-2 pt-4\">\n              <a href=\"#features\" className=\"text-secondary hover:text-primary transition-colors py-2\">\n                Features\n              </a>\n              <a href=\"#how-it-works\" className=\"text-secondary hover:text-primary transition-colors py-2\">\n                How It Works\n              </a>\n              <a href=\"#about\" className=\"text-secondary hover:text-primary transition-colors py-2\">\n                About\n              </a>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":2899},"client/src/components/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Sparkles, Eye, ArrowRight } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/components/auth/auth-context\";\nimport { useState } from \"react\";\nimport { LoginDialog } from \"@/components/auth/login-dialog\";\nimport { RegisterDialog } from \"@/components/auth/register-dialog\";\n\nexport function HeroSection() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [showLogin, setShowLogin] = useState(false);\n  const [showRegister, setShowRegister] = useState(false);\n\n  const handleGetStarted = () => {\n    if (user) {\n      setLocation(\"/dashboard\");\n    } else {\n      setShowRegister(true);\n    }\n  };\n  \n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center subtle-bg\">\n      <div className=\"container mx-auto px-6 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          \n          <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-heading font-bold mb-8 leading-tight\">\n            <span className=\"text-foreground\">Unveil the</span><br />\n            <span className=\"text-gradient\">\n              Cosmic Mysteries\n            </span><br />\n            <span className=\"text-foreground text-3xl md:text-4xl lg:text-5xl\">within You</span>\n          </h1>\n          \n          <p className=\"text-lg md:text-xl text-secondary-foreground mb-12 max-w-3xl mx-auto leading-relaxed\">\n            Discover the secrets of your destiny through ancient wisdom powered by AI. \n            Explore palmistry, astrology, Vastu, numerology, and tarot readings with unprecedented accuracy and insight.\n          </p>\n          \n          {/* Clean Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-16\">\n            <Button \n              onClick={handleGetStarted}\n              size=\"lg\" \n              className=\"accent-gradient text-white px-8 py-4 text-lg font-medium hover:opacity-90 transition-all hover-lift\"\n              data-testid=\"button-get-started\"\n            >\n              {user ? (\n                <>\n                  <ArrowRight className=\"mr-2 h-5 w-5\" />\n                  Go to Dashboard\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"mr-2 h-5 w-5\" />\n                  Start Your Reading\n                </>\n              )}\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-border text-foreground hover:bg-muted px-8 py-4 text-lg font-medium hover-lift\"\n              data-testid=\"button-learn-more\"\n              onClick={() => {\n                document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' });\n              }}\n            >\n              <Eye className=\"mr-2 h-5 w-5\" />\n              Learn More\n            </Button>\n          </div>\n          \n          {/* Clean Stats or Features Preview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gradient mb-2\">5</div>\n              <div className=\"text-sm text-muted-foreground\">Mystical Arts</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gradient mb-2\">AI</div>\n              <div className=\"text-sm text-muted-foreground\">Powered Analysis</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gradient mb-2\">∞</div>\n              <div className=\"text-sm text-muted-foreground\">Possibilities</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Auth Dialogs */}\n      <LoginDialog\n        isOpen={showLogin}\n        onClose={() => setShowLogin(false)}\n        onSwitchToRegister={() => {\n          setShowLogin(false);\n          setShowRegister(true);\n        }}\n      />\n\n      <RegisterDialog\n        isOpen={showRegister}\n        onClose={() => setShowRegister(false)}\n        onSwitchToLogin={() => {\n          setShowRegister(false);\n          setShowLogin(true);\n        }}\n      />\n    </section>\n  );\n}\n","size_bytes":4288},"client/src/components/how-it-works-section.tsx":{"content":"export function HowItWorksSection() {\n  const steps = [\n    {\n      number: \"I\",\n      rune: \"ᚨ\",\n      title: \"Choose Your Path\",\n      description: \"Select your mystical journey - palm reading, stellar astrology, sacred Vastu, number mysteries, or tarot revelations.\",\n      element: \"spirit\",\n    },\n    {\n      number: \"II\", \n      rune: \"ᚱ\",\n      title: \"Cosmic Analysis\",\n      description: \"Our ethereal AI channels ancient wisdom through cosmic consciousness, interpreting sacred patterns and divine symbols.\",\n      element: \"mind\",\n    },\n    {\n      number: \"III\",\n      rune: \"ᚢ\",\n      title: \"Receive Enlightenment\", \n      description: \"Unveil profound insights about your soul's purpose, karmic patterns, and the mystical forces shaping your destiny.\",\n      element: \"soul\",\n    },\n  ];\n\n  return (\n    <section id=\"how-it-works\" className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h3 className=\"text-3xl md:text-4xl font-heading font-bold mb-6 text-foreground\">\n            How\n            <span className=\"text-gradient\"> MysticRead AI</span> Works\n          </h3>\n          \n          <p className=\"text-lg text-secondary-foreground max-w-3xl mx-auto leading-relaxed\">\n            Experience the perfect fusion of ancient divination wisdom with modern AI technology. \n            Our streamlined process makes mystical insights accessible and accurate.\n          </p>\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-center group\">\n                {/* Number Container */}\n                <div className=\"relative mb-6\">\n                  <div className=\"w-16 h-16 mx-auto accent-gradient rounded-full flex items-center justify-center shadow-lg\">\n                    <span className=\"text-xl font-bold text-white\">{step.number}</span>\n                  </div>\n                  \n                  {/* Floating Badge */}\n                  <div className=\"absolute -top-1 -right-1 w-6 h-6 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center shadow-md\">\n                    <span className=\"text-white text-xs font-bold\">{step.rune}</span>\n                  </div>\n                  \n                  {/* Connection line (except for last item) */}\n                  {index < steps.length - 1 && (\n                    <div className=\"hidden md:block absolute top-8 left-full w-8 h-px bg-border\"></div>\n                  )}\n                </div>\n                \n                <h4 className=\"text-xl font-heading font-semibold mb-4 text-foreground group-hover:text-accent transition-colors duration-300\">\n                  {step.title}\n                </h4>\n                \n                <p className=\"text-secondary-foreground leading-relaxed\">\n                  {step.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Call to Action */}\n        <div className=\"text-center mt-16\">\n          <div className=\"inline-flex items-center space-x-4 text-sm text-muted-foreground\">\n            <div className=\"w-8 h-px bg-border\"></div>\n            <span className=\"uppercase tracking-wider\">Ancient Wisdom Meets Modern AI</span>\n            <div className=\"w-8 h-px bg-border\"></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3536},"client/src/components/palm-analysis-interface.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCamera } from \"@/hooks/use-camera\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Camera, Upload, X, RefreshCw, Loader2 } from \"lucide-react\";\nimport { PalmAnalysisResult } from \"@shared/schema\";\nimport { CosmicLoader } from \"@/components/cosmic-loader\";\n\ninterface PalmAnalysisInterfaceProps {\n  onAnalysisComplete: (result: PalmAnalysisResult, imageUrl: string, analysisId: string) => void;\n}\n\nexport function PalmAnalysisInterface({ onAnalysisComplete }: PalmAnalysisInterfaceProps) {\n  const [selectedMethod, setSelectedMethod] = useState<\"upload\" | \"camera\">(\"upload\");\n  const [uploadedImage, setUploadedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const { toast } = useToast();\n  const {\n    isCameraActive,\n    error: cameraError,\n    videoRef,\n    startCamera,\n    stopCamera,\n    capturePhoto,\n  } = useCamera();\n\n  const analysisMutation = useMutation({\n    mutationFn: async (imageFile: File) => {\n      const formData = new FormData();\n      formData.append('palmImage', imageFile);\n      \n      // Use fetch directly for file uploads (apiRequest doesn't handle FormData properly)\n      const response = await fetch(\"/api/palm/analyze\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      onAnalysisComplete(data.result, data.imageUrl, data.id);\n      toast({\n        title: \"Analysis Complete!\",\n        description: \"Your palm reading is ready.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setUploadedImage(file);\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n    }\n  };\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    const file = event.dataTransfer.files?.[0];\n    if (file && file.type.startsWith('image/')) {\n      setUploadedImage(file);\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n    }\n  };\n\n  const handleCapture = async () => {\n    const blob = await capturePhoto();\n    if (blob) {\n      const file = new File([blob], \"palm-capture.jpg\", { type: \"image/jpeg\" });\n      setUploadedImage(file);\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n      stopCamera();\n      setSelectedMethod(\"upload\");\n    }\n  };\n\n  const handleAnalyze = () => {\n    if (!uploadedImage) {\n      toast({\n        title: \"No Image Selected\",\n        description: \"Please upload or capture a palm image first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    analysisMutation.mutate(uploadedImage);\n  };\n\n  const resetUpload = () => {\n    setUploadedImage(null);\n    setImagePreview(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <div className=\"py-8\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-primary mb-4\">Analyze Your Palm</h3>\n            <p className=\"text-lg text-secondary\">\n              Choose your preferred method to capture your palm image for AI analysis\n            </p>\n          </div>\n\n\n          {/* Upload Methods */}\n          <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n            <Card \n              className={`cursor-pointer transition-colors ${selectedMethod === \"upload\" ? \"border-accent\" : \"hover:border-accent\"}`}\n              onClick={() => setSelectedMethod(\"upload\")}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-20 h-20 bg-blue-50 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Upload className=\"h-8 w-8 text-accent\" />\n                </div>\n                <h4 className=\"text-xl font-semibold text-primary mb-2\">Upload Image</h4>\n                <p className=\"text-secondary mb-4\">\n                  Select an existing palm photo from your device\n                </p>\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={() => fileInputRef.current?.click()}\n                  data-testid=\"button-choose-file\"\n                >\n                  Choose File\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card \n              className={`cursor-pointer transition-colors ${selectedMethod === \"camera\" ? \"border-accent\" : \"hover:border-accent\"}`}\n              onClick={() => {\n                setSelectedMethod(\"camera\");\n                if (!isCameraActive) startCamera();\n              }}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-20 h-20 bg-green-50 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Camera className=\"h-8 w-8 text-success\" />\n                </div>\n                <h4 className=\"text-xl font-semibold text-primary mb-2\">Take Photo</h4>\n                <p className=\"text-secondary mb-4\">\n                  Use your device camera to capture your palm\n                </p>\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={() => startCamera()}\n                  data-testid=\"button-open-camera\"\n                >\n                  Open Camera\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Analysis Area */}\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Camera View */}\n              {selectedMethod === \"camera\" && isCameraActive && (\n                <div className=\"space-y-4\">\n                  <div className=\"relative rounded-lg overflow-hidden bg-slate-100\">\n                    <video \n                      ref={videoRef}\n                      autoPlay\n                      muted\n                      playsInline\n                      className=\"w-full h-80 object-cover\"\n                      data-testid=\"video-camera-preview\"\n                    />\n                    \n                    <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2\">\n                      <Button\n                        onClick={handleCapture}\n                        size=\"lg\"\n                        className=\"w-16 h-16 rounded-full bg-white border-4 border-accent hover:bg-slate-50\"\n                        data-testid=\"button-capture-photo\"\n                      >\n                        <div className=\"w-8 h-8 bg-accent rounded-full\"></div>\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <Button \n                      variant=\"ghost\" \n                      onClick={() => {\n                        stopCamera();\n                        setSelectedMethod(\"upload\");\n                      }}\n                      data-testid=\"button-close-camera\"\n                    >\n                      <X className=\"mr-2 h-4 w-4\" />\n                      Cancel\n                    </Button>\n                    <Button \n                      variant=\"ghost\"\n                      onClick={() => {\n                        stopCamera();\n                        setTimeout(startCamera, 100);\n                      }}\n                      data-testid=\"button-switch-camera\"\n                    >\n                      <RefreshCw className=\"mr-2 h-4 w-4\" />\n                      Switch Camera\n                    </Button>\n                  </div>\n                  \n                  {cameraError && (\n                    <div className=\"text-red-600 text-sm text-center\">{cameraError}</div>\n                  )}\n                </div>\n              )}\n\n              {/* Upload Area */}\n              {(selectedMethod === \"upload\" || !isCameraActive) && (\n                <div>\n                  {imagePreview ? (\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"relative inline-block\">\n                        <img \n                          src={imagePreview} \n                          alt=\"Palm preview\" \n                          className=\"max-w-xs mx-auto rounded-lg shadow-md\"\n                          data-testid=\"img-palm-preview\"\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={resetUpload}\n                          className=\"absolute top-2 right-2 bg-white/80 hover:bg-white\"\n                          data-testid=\"button-remove-image\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-sm text-secondary\">Palm image uploaded successfully</p>\n                    </div>\n                  ) : (\n                    <div \n                      className=\"border-2 border-dashed border-slate-300 rounded-lg p-12 text-center hover:border-accent transition-colors cursor-pointer\"\n                      onDragOver={(e) => e.preventDefault()}\n                      onDrop={handleDrop}\n                      onClick={() => fileInputRef.current?.click()}\n                      data-testid=\"drop-zone\"\n                    >\n                      <Upload className=\"h-16 w-16 text-slate-300 mx-auto mb-4\" />\n                      <p className=\"text-xl text-primary font-medium mb-2\">Drop your palm image here</p>\n                      <p className=\"text-secondary mb-6\">or click to browse your files</p>\n                      <Button className=\"bg-accent hover:bg-blue-600\" data-testid=\"button-browse-files\">\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Browse Files\n                      </Button>\n                    </div>\n                  )}\n\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                    data-testid=\"input-file-upload\"\n                  />\n                </div>\n              )}\n\n              {/* Photo Guidelines */}\n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <h5 className=\"font-medium text-primary mb-3 flex items-center\">\n                  <Camera className=\"text-accent mr-2 h-4 w-4\" />\n                  Photo Guidelines for Best Results\n                </h5>\n                <ul className=\"text-sm text-secondary space-y-1\">\n                  <li>• Ensure your palm is well-lit and clearly visible</li>\n                  <li>• Keep your hand flat and open with fingers spread</li>\n                  <li>• Take the photo from directly above your palm</li>\n                  <li>• Avoid shadows and reflections</li>\n                  <li>• Use a plain background for better contrast</li>\n                </ul>\n              </div>\n\n              {/* Analysis Button */}\n              <div className=\"mt-8 text-center\">\n                <Button\n                  onClick={handleAnalyze}\n                  disabled={!uploadedImage || analysisMutation.isPending}\n                  size=\"lg\"\n                  className=\"bg-accent hover:bg-blue-600 text-white px-8 py-4 text-lg shadow-lg\"\n                  data-testid=\"button-analyze-palm\"\n                >\n                  {analysisMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                      Analyzing Palm...\n                    </>\n                  ) : (\n                    <>\n                      <Camera className=\"mr-2 h-5 w-5\" />\n                      Analyze Palm\n                    </>\n                  )}\n                </Button>\n                <p className=\"text-sm text-secondary mt-2\">Analysis typically takes 10-30 seconds</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <CosmicLoader \n        analysisType=\"palm\"\n        isVisible={analysisMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":13158},"client/src/components/vastu-analysis-interface.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Home, Upload, Plus, Trash2, Loader2, X } from \"lucide-react\";\nimport { VastuAnalysisResult, VastuInput } from \"@shared/schema\";\nimport { CosmicLoader } from \"@/components/cosmic-loader\";\n\ninterface VastuAnalysisInterfaceProps {\n  onAnalysisComplete: (result: VastuAnalysisResult, inputData: VastuInput, analysisId: string, imageUrl?: string) => void;\n}\n\nexport function VastuAnalysisInterface({ onAnalysisComplete }: VastuAnalysisInterfaceProps) {\n  const [layoutType, setLayoutType] = useState(\"\");\n  const [entrance, setEntrance] = useState(\"\");\n  const [buildingShape, setBuildingShape] = useState(\"\");\n  const [surroundings, setSurroundings] = useState(\"\");\n  const [rooms, setRooms] = useState([{ name: \"\", direction: \"\", size: \"\" }]);\n  const [uploadedImage, setUploadedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const { toast } = useToast();\n\n  const analysisMutation = useMutation({\n    mutationFn: async ({ vastuData, imageFile }: { vastuData: VastuInput; imageFile?: File }) => {\n      const formData = new FormData();\n      formData.append('vastuData', JSON.stringify(vastuData));\n      if (imageFile) {\n        formData.append('layoutImage', imageFile);\n      }\n      \n      const response = await apiRequest(\"POST\", \"/api/vastu/analyze\", formData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onAnalysisComplete(data.result, data.inputData, data.id, data.imageUrl);\n      toast({\n        title: \"Analysis Complete!\",\n        description: \"Your Vastu analysis is ready.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addRoom = () => {\n    setRooms([...rooms, { name: \"\", direction: \"\", size: \"\" }]);\n  };\n\n  const removeRoom = (index: number) => {\n    setRooms(rooms.filter((_, i) => i !== index));\n  };\n\n  const updateRoom = (index: number, field: string, value: string) => {\n    const updatedRooms = rooms.map((room, i) => \n      i === index ? { ...room, [field]: value } : room\n    );\n    setRooms(updatedRooms);\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setUploadedImage(file);\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n    }\n  };\n\n  const resetUpload = () => {\n    setUploadedImage(null);\n    setImagePreview(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const handleAnalyze = () => {\n    if (!layoutType || !entrance || !buildingShape) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in the basic layout information.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const validRooms = rooms.filter(room => room.name && room.direction);\n    if (validRooms.length === 0) {\n      toast({\n        title: \"No Rooms Added\",\n        description: \"Please add at least one room with direction.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const vastuData: VastuInput = {\n      layoutType,\n      entrance,\n      buildingShape,\n      surroundings,\n      rooms: validRooms,\n    };\n\n    analysisMutation.mutate({ vastuData, imageFile: uploadedImage || undefined });\n  };\n\n  return (\n    <div className=\"py-8\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-primary mb-4\">Vastu Analysis</h3>\n            <p className=\"text-lg text-secondary\">\n              Get comprehensive Vastu guidance for your home or office layout\n            </p>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"space-y-6\">\n                {/* Basic Information */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"layoutType\" className=\"text-primary font-medium\">\n                      Layout Type\n                    </Label>\n                    <Select value={layoutType} onValueChange={setLayoutType}>\n                      <SelectTrigger data-testid=\"select-layout-type\">\n                        <SelectValue placeholder=\"Select layout type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"home\">Home</SelectItem>\n                        <SelectItem value=\"office\">Office</SelectItem>\n                        <SelectItem value=\"shop\">Shop/Store</SelectItem>\n                        <SelectItem value=\"apartment\">Apartment</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"entrance\" className=\"text-primary font-medium\">\n                      Main Entrance Direction\n                    </Label>\n                    <Select value={entrance} onValueChange={setEntrance}>\n                      <SelectTrigger data-testid=\"select-entrance\">\n                        <SelectValue placeholder=\"Select entrance direction\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"north\">North</SelectItem>\n                        <SelectItem value=\"northeast\">Northeast</SelectItem>\n                        <SelectItem value=\"east\">East</SelectItem>\n                        <SelectItem value=\"southeast\">Southeast</SelectItem>\n                        <SelectItem value=\"south\">South</SelectItem>\n                        <SelectItem value=\"southwest\">Southwest</SelectItem>\n                        <SelectItem value=\"west\">West</SelectItem>\n                        <SelectItem value=\"northwest\">Northwest</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"buildingShape\" className=\"text-primary font-medium\">\n                      Building Shape\n                    </Label>\n                    <Select value={buildingShape} onValueChange={setBuildingShape}>\n                      <SelectTrigger data-testid=\"select-building-shape\">\n                        <SelectValue placeholder=\"Select building shape\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"square\">Square</SelectItem>\n                        <SelectItem value=\"rectangle\">Rectangle</SelectItem>\n                        <SelectItem value=\"l-shaped\">L-Shaped</SelectItem>\n                        <SelectItem value=\"t-shaped\">T-Shaped</SelectItem>\n                        <SelectItem value=\"irregular\">Irregular</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"surroundings\" className=\"text-primary font-medium\">\n                      Surroundings\n                    </Label>\n                    <Textarea\n                      id=\"surroundings\"\n                      placeholder=\"Describe nearby roads, water bodies, mountains, other buildings...\"\n                      value={surroundings}\n                      onChange={(e) => setSurroundings(e.target.value)}\n                      className=\"min-h-[80px]\"\n                      data-testid=\"textarea-surroundings\"\n                    />\n                  </div>\n                </div>\n\n                {/* Rooms Section */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-primary font-medium text-lg\">Rooms Layout</Label>\n                    <Button \n                      onClick={addRoom} \n                      variant=\"outline\" \n                      size=\"sm\"\n                      data-testid=\"button-add-room\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Add Room\n                    </Button>\n                  </div>\n\n                  {rooms.map((room, index) => (\n                    <Card key={index} className=\"bg-slate-50\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"grid md:grid-cols-4 gap-4 items-end\">\n                          <div className=\"space-y-2\">\n                            <Label>Room Name</Label>\n                            <Input\n                              placeholder=\"e.g., Living Room\"\n                              value={room.name}\n                              onChange={(e) => updateRoom(index, \"name\", e.target.value)}\n                              data-testid={`input-room-name-${index}`}\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label>Direction</Label>\n                            <Select \n                              value={room.direction} \n                              onValueChange={(value) => updateRoom(index, \"direction\", value)}\n                            >\n                              <SelectTrigger data-testid={`select-room-direction-${index}`}>\n                                <SelectValue placeholder=\"Direction\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"north\">North</SelectItem>\n                                <SelectItem value=\"northeast\">Northeast</SelectItem>\n                                <SelectItem value=\"east\">East</SelectItem>\n                                <SelectItem value=\"southeast\">Southeast</SelectItem>\n                                <SelectItem value=\"south\">South</SelectItem>\n                                <SelectItem value=\"southwest\">Southwest</SelectItem>\n                                <SelectItem value=\"west\">West</SelectItem>\n                                <SelectItem value=\"northwest\">Northwest</SelectItem>\n                                <SelectItem value=\"center\">Center</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label>Size</Label>\n                            <Select \n                              value={room.size} \n                              onValueChange={(value) => updateRoom(index, \"size\", value)}\n                            >\n                              <SelectTrigger data-testid={`select-room-size-${index}`}>\n                                <SelectValue placeholder=\"Size\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"small\">Small</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"large\">Large</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeRoom(index)}\n                            disabled={rooms.length === 1}\n                            data-testid={`button-remove-room-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {/* Layout Image Upload */}\n                <div className=\"space-y-4\">\n                  <Label className=\"text-primary font-medium text-lg\">\n                    Layout Image (Optional)\n                  </Label>\n                  \n                  {imagePreview ? (\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"relative inline-block\">\n                        <img \n                          src={imagePreview} \n                          alt=\"Layout preview\" \n                          className=\"max-w-xs mx-auto rounded-lg shadow-md\"\n                          data-testid=\"img-layout-preview\"\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={resetUpload}\n                          className=\"absolute top-2 right-2 bg-white/80 hover:bg-white\"\n                          data-testid=\"button-remove-layout-image\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-sm text-secondary\">Layout image uploaded successfully</p>\n                    </div>\n                  ) : (\n                    <div \n                      className=\"border-2 border-dashed border-slate-300 rounded-lg p-8 text-center hover:border-accent transition-colors cursor-pointer\"\n                      onClick={() => fileInputRef.current?.click()}\n                      data-testid=\"layout-drop-zone\"\n                    >\n                      <Upload className=\"h-12 w-12 text-slate-300 mx-auto mb-4\" />\n                      <p className=\"text-lg text-primary font-medium mb-2\">Upload Layout Plan</p>\n                      <p className=\"text-secondary mb-4\">Floor plan, sketch, or photo of your layout</p>\n                      <Button className=\"bg-accent hover:bg-blue-600\" data-testid=\"button-browse-layout-files\">\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Browse Files\n                      </Button>\n                    </div>\n                  )}\n\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                    data-testid=\"input-layout-file-upload\"\n                  />\n                </div>\n\n                <div className=\"text-center mt-8\">\n                  <Button\n                    onClick={handleAnalyze}\n                    disabled={analysisMutation.isPending || !layoutType || !entrance || !buildingShape}\n                    size=\"lg\"\n                    className=\"bg-accent hover:bg-blue-600 text-white px-8 py-4 text-lg shadow-lg\"\n                    data-testid=\"button-analyze-vastu\"\n                  >\n                    {analysisMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                        Analyzing Vastu...\n                      </>\n                    ) : (\n                      <>\n                        <Home className=\"mr-2 h-5 w-5\" />\n                        Analyze Vastu\n                      </>\n                    )}\n                  </Button>\n                  <p className=\"text-sm text-secondary mt-2\">Analysis typically takes 20-60 seconds</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <CosmicLoader \n        analysisType=\"vastu\"\n        isVisible={analysisMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":16390},"client/src/components/vastu-results.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { VastuAnalysisResult, VastuInput } from \"@shared/schema\";\nimport { PostAnalysisChat } from \"./post-analysis-chat\";\nimport { \n  Home, \n  TrendingUp, \n  AlertTriangle, \n  CheckCircle,\n  Download,\n  Share,\n  RotateCcw,\n  Compass,\n  Heart,\n  DollarSign,\n  Activity,\n  Briefcase,\n  Zap,\n  ArrowUp,\n  ArrowDown,\n  Minus\n} from \"lucide-react\";\n\ninterface VastuResultsProps {\n  result: VastuAnalysisResult;\n  inputData: VastuInput;\n  imageUrl?: string;\n  onAnalyzeAnother: () => void;\n  analysisId?: string;\n  isAuthenticated?: boolean;\n  onLoginRequired?: () => void;\n}\n\nexport function VastuResults({ \n  result, \n  inputData, \n  imageUrl, \n  onAnalyzeAnother, \n  analysisId, \n  isAuthenticated = false, \n  onLoginRequired \n}: VastuResultsProps) {\n  const handleDownloadReport = () => {\n    const reportContent = `VASTU ANALYSIS REPORT\\n\\n` +\n      `Layout Details:\\n` +\n      `Type: ${inputData.layoutType}\\n` +\n      `Entrance: ${inputData.entrance}\\n` +\n      `Building Shape: ${inputData.buildingShape}\\n` +\n      `Surroundings: ${inputData.surroundings}\\n\\n` +\n      `Overall Vastu Score: ${result.overallScore}/100\\n\\n` +\n      `Overall Assessment:\\n${result.overallAssessment || 'Not available'}\\n\\n` +\n      `Room Analysis:\\n` +\n      (result.roomAnalysis?.map(room => \n        `${room?.room}: ${room?.score}/100 - ${room?.vastuCompliance}\\n`\n      ).join('') || 'Not available') + '\\n' +\n      `Prosperity Impact:\\n` +\n      `Wealth: ${result.prosperity?.wealth || 'Not available'}\\n` +\n      `Health: ${result.prosperity?.health || 'Not available'}\\n` +\n      `Relationships: ${result.prosperity?.relationships || 'Not available'}\\n` +\n      `Career: ${result.prosperity?.career || 'Not available'}\\n\\n` +\n      `Generated by MysticRead AI - ${new Date().toLocaleDateString()}`;\n    \n    const blob = new Blob([reportContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `vastu-analysis-report-${new Date().getTime()}.txt`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleShareResults = () => {\n    const shareText = `I just got my Vastu analysis from MysticRead AI! ` +\n      `Overall Score: ${result.overallScore}/100 for my ${inputData.layoutType}. ` +\n      `Check out MysticRead AI for your own Vastu guidance!`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: 'My Vastu Analysis Report',\n        text: shareText,\n      });\n    } else {\n      navigator.clipboard.writeText(shareText).then(() => {\n        alert('Results copied to clipboard!');\n      });\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600\";\n    if (score >= 60) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreBgColor = (score: number) => {\n    if (score >= 80) return \"bg-green-100\";\n    if (score >= 60) return \"bg-yellow-100\";\n    return \"bg-red-100\";\n  };\n\n  return (\n    <section id=\"vastu-results-section\" className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          \n          {/* Results Header */}\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-primary mb-4\">Your Vastu Analysis Report</h3>\n            <p className=\"text-lg text-secondary\">\n              Comprehensive Vastu assessment for your {inputData.layoutType} with practical recommendations\n            </p>\n          </div>\n\n          {/* Overall Score and Assessment */}\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n            {imageUrl && (\n              <div className=\"lg:col-span-1\">\n                <Card className=\"bg-slate-50\">\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"font-semibold text-primary mb-4\">Layout Image</h4>\n                    <div className=\"relative\">\n                      <img \n                        src={imageUrl} \n                        alt=\"Analyzed layout\" \n                        className=\"w-full rounded-lg shadow-md\"\n                        data-testid=\"img-analyzed-layout\"\n                      />\n                      <div className=\"absolute top-2 right-2 bg-white bg-opacity-90 rounded-full p-2\">\n                        <CheckCircle className=\"h-4 w-4 text-success\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            <div className={imageUrl ? \"lg:col-span-2\" : \"lg:col-span-3\"}>\n              <div className=\"space-y-6\">\n                {/* Overall Score */}\n                <Card className={`${getScoreBgColor(result.overallScore)} border-2`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4 mb-4\">\n                      <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center\">\n                        <Home className=\"h-8 w-8 text-accent\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"text-2xl font-bold text-primary\">Overall Vastu Score</h4>\n                        <div className={`text-3xl font-bold ${getScoreColor(result.overallScore)}`} data-testid=\"text-overall-score\">\n                          {result.overallScore}/100\n                        </div>\n                      </div>\n                    </div>\n                    <Progress value={result.overallScore} className=\"mb-4\" />\n                    <p className=\"text-secondary\" data-testid=\"text-overall-assessment\">\n                      {result.overallAssessment}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Energy Flow */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"text-xl font-semibold text-primary mb-4 flex items-center\">\n                      <Zap className=\"mr-2 h-5 w-5 text-yellow-500\" />\n                      Energy Flow Analysis\n                    </h4>\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"flex items-center justify-center mb-2\">\n                          <ArrowUp className=\"h-5 w-5 text-green-500 mr-1\" />\n                          <span className=\"font-medium text-green-600\">Positive</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          {result.energyFlow?.positive?.map((area, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"bg-green-100 text-green-800 text-xs\">\n                              {area}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"flex items-center justify-center mb-2\">\n                          <ArrowDown className=\"h-5 w-5 text-red-500 mr-1\" />\n                          <span className=\"font-medium text-red-600\">Negative</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          {result.energyFlow?.negative?.map((area, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"bg-red-100 text-red-800 text-xs\">\n                              {area}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"flex items-center justify-center mb-2\">\n                          <Minus className=\"h-5 w-5 text-gray-500 mr-1\" />\n                          <span className=\"font-medium text-gray-600\">Neutral</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          {result.energyFlow?.neutral?.map((area, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"bg-gray-100 text-gray-800 text-xs\">\n                              {area}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n\n          {/* Room Analysis */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h4 className=\"text-xl font-semibold text-primary mb-6 flex items-center\">\n                <Compass className=\"mr-2 h-5 w-5 text-blue-500\" />\n                Room-wise Analysis\n              </h4>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {result.roomAnalysis?.map((room, index) => (\n                  <Card key={index} className=\"bg-slate-50\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h5 className=\"font-medium text-primary\">{room?.room || 'Unknown Room'}</h5>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {room?.direction || 'N/A'}\n                          </Badge>\n                          <div className={`text-sm font-bold ${getScoreColor(room.score)}`}>\n                            {room?.score || 0}/100\n                          </div>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-secondary mb-3\" data-testid={`text-room-compliance-${index}`}>\n                        {room?.vastuCompliance || 'Analysis not available'}\n                      </p>\n                      <div>\n                        <h6 className=\"text-xs font-medium text-primary mb-1\">Recommendations:</h6>\n                        <ul className=\"text-xs text-secondary space-y-1\">\n                          {room.recommendations?.map((rec, recIndex) => (\n                            <li key={recIndex} data-testid={`text-room-recommendation-${index}-${recIndex}`}>\n                              • {rec}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recommendations */}\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-8\">\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-green-500 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Immediate Actions</h4>\n                </div>\n                <ul className=\"text-secondary text-sm space-y-2\">\n                  {result.recommendations?.immediate?.map((recommendation, index) => (\n                    <li key={index} data-testid={`text-immediate-recommendation-${index}`}>\n                      • {recommendation}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <TrendingUp className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Long-term Changes</h4>\n                </div>\n                <ul className=\"text-secondary text-sm space-y-2\">\n                  {result.recommendations?.longTerm?.map((recommendation, index) => (\n                    <li key={index} data-testid={`text-longterm-recommendation-${index}`}>\n                      • {recommendation}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center\">\n                    <AlertTriangle className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-primary\">Vastu Remedies</h4>\n                </div>\n                <ul className=\"text-secondary text-sm space-y-2\">\n                  {result.recommendations?.remedies?.map((remedy, index) => (\n                    <li key={index} data-testid={`text-remedy-${index}`}>\n                      • {remedy}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Prosperity Impact */}\n          <Card className=\"mb-8 bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200\">\n            <CardContent className=\"p-6\">\n              <h4 className=\"text-xl font-semibold text-primary mb-6 flex items-center\">\n                <TrendingUp className=\"mr-2 h-5 w-5 text-amber-600\" />\n                Impact on Prosperity\n              </h4>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <h5 className=\"font-medium text-primary mb-2\">Wealth</h5>\n                  <p className=\"text-sm text-secondary\" data-testid=\"text-wealth-impact\">\n                    {result.prosperity?.wealth || 'Analysis not available'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <Activity className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <h5 className=\"font-medium text-primary mb-2\">Health</h5>\n                  <p className=\"text-sm text-secondary\" data-testid=\"text-health-impact\">\n                    {result.prosperity?.health || 'Analysis not available'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <Heart className=\"h-6 w-6 text-pink-600\" />\n                  </div>\n                  <h5 className=\"font-medium text-primary mb-2\">Relationships</h5>\n                  <p className=\"text-sm text-secondary\" data-testid=\"text-relationships-impact\">\n                    {result.prosperity?.relationships || 'Analysis not available'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <Briefcase className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <h5 className=\"font-medium text-primary mb-2\">Career</h5>\n                  <p className=\"text-sm text-secondary\" data-testid=\"text-career-impact\">\n                    {result.prosperity?.career || 'Analysis not available'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Post-Analysis Chat */}\n          {analysisId && (\n            <div className=\"mb-12\">\n              <PostAnalysisChat\n                analysisId={analysisId}\n                analysisType=\"vastu\"\n                analysisData={result}\n                isAuthenticated={isAuthenticated}\n                onLoginRequired={onLoginRequired || (() => {})}\n              />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"text-center\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleDownloadReport}\n                className=\"bg-accent hover:bg-blue-600\"\n                data-testid=\"button-download-vastu-report\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Full Report\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleShareResults}\n                data-testid=\"button-share-vastu-results\"\n              >\n                <Share className=\"mr-2 h-4 w-4\" />\n                Share Results\n              </Button>\n              <Button \n                variant=\"ghost\"\n                onClick={onAnalyzeAnother}\n                className=\"text-accent hover:text-blue-600\"\n                data-testid=\"button-analyze-another-vastu\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Analyze Another Layout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":17910},"client/src/hooks/use-camera.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\n\nexport function useCamera() {\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  const startCamera = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: \"user\" },\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        streamRef.current = stream;\n        setIsCameraActive(true);\n        setError(null);\n      }\n    } catch (err) {\n      setError(\"Failed to access camera. Please check your camera permissions.\");\n      console.error(\"Camera error:\", err);\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    \n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n    \n    setIsCameraActive(false);\n  }, []);\n\n  const capturePhoto = useCallback((): Promise<Blob | null> => {\n    return new Promise((resolve) => {\n      if (!videoRef.current || !isCameraActive) {\n        resolve(null);\n        return;\n      }\n\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      \n      if (!context) {\n        resolve(null);\n        return;\n      }\n\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      \n      context.drawImage(videoRef.current, 0, 0);\n      \n      canvas.toBlob((blob) => {\n        resolve(blob);\n      }, \"image/jpeg\", 0.8);\n    });\n  }, [isCameraActive]);\n\n  return {\n    isCameraActive,\n    error,\n    videoRef,\n    startCamera,\n    stopCamera,\n    capturePhoto,\n  };\n}\n","size_bytes":1909},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: data && !isFormData ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? (isFormData ? data : JSON.stringify(data)) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1470},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { Header } from \"@/components/header\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { FeaturesSection } from \"@/components/features-section\";\nimport { HowItWorksSection } from \"@/components/how-it-works-section\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <HeroSection />\n      <FeaturesSection />\n      <HowItWorksSection />\n      <Footer />\n    </div>\n  );\n}","size_bytes":506},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/auth/auth-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, firstName?: string, lastName?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const refreshUser = async () => {\n    try {\n      const response = await fetch('/api/auth/me', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Failed to refresh user:', error);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Login failed');\n    }\n\n    const userData = await response.json();\n    setUser(userData);\n  };\n\n  const register = async (email: string, password: string, firstName?: string, lastName?: string) => {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password, firstName, lastName }),\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Registration failed');\n    }\n\n    const userData = await response.json();\n    setUser(userData);\n  };\n\n  const logout = async () => {\n    await fetch('/api/auth/logout', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    setUser(null);\n  };\n\n  useEffect(() => {\n    refreshUser();\n  }, []);\n\n  const value = {\n    user,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}","size_bytes":2778},"client/src/components/auth/auth-header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"./auth-context\";\nimport { LoginDialog } from \"./login-dialog\";\nimport { RegisterDialog } from \"./register-dialog\";\nimport { Link } from \"wouter\";\nimport { User, LogOut, CreditCard, LayoutDashboard } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function AuthHeader() {\n  const { user, logout, isLoading } = useAuth();\n  const [showLogin, setShowLogin] = useState(false);\n  const [showRegister, setShowRegister] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"h-8 w-20 bg-gray-200 animate-pulse rounded\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <>\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setShowLogin(true)}\n            data-testid=\"button-header-login\"\n          >\n            Sign In\n          </Button>\n          <Button \n            onClick={() => setShowRegister(true)}\n            data-testid=\"button-header-register\"\n          >\n            Get Started\n          </Button>\n        </div>\n\n        <LoginDialog\n          isOpen={showLogin}\n          onClose={() => setShowLogin(false)}\n          onSwitchToRegister={() => {\n            setShowLogin(false);\n            setShowRegister(true);\n          }}\n        />\n\n        <RegisterDialog\n          isOpen={showRegister}\n          onClose={() => setShowRegister(false)}\n          onSwitchToLogin={() => {\n            setShowRegister(false);\n            setShowLogin(true);\n          }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n        <CreditCard className=\"h-3 w-3\" />\n        <span data-testid=\"text-user-credits\">{user.credits} Credits</span>\n      </Badge>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n            <User className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">{user.firstName || user.email}</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem disabled>\n            <div className=\"flex flex-col\">\n              <span className=\"font-medium\">{user.firstName} {user.lastName}</span>\n              <span className=\"text-sm text-muted-foreground\">{user.email}</span>\n            </div>\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem asChild>\n            <Link href=\"/dashboard\" className=\"flex items-center w-full\" data-testid=\"link-dashboard\">\n              <LayoutDashboard className=\"mr-2 h-4 w-4\" />\n              Dashboard\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Sign Out\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}","size_bytes":3558},"client/src/components/auth/login-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"./auth-context\";\nimport { useLocation } from \"wouter\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface LoginDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSwitchToRegister: () => void;\n}\n\nexport function LoginDialog({ isOpen, onClose, onSwitchToRegister }: LoginDialogProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n      onClose();\n      setEmail(\"\");\n      setPassword(\"\");\n      // Navigate to dashboard after successful login with a small delay to ensure user state is updated\n      setTimeout(() => {\n        setLocation(\"/dashboard\");\n      }, 100);\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Welcome Back</DialogTitle>\n          <DialogDescription>\n            Sign in to your account to continue your mystical journey\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n              data-testid=\"input-login-email\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n              required\n              data-testid=\"input-login-password\"\n            />\n          </div>\n          <div className=\"flex flex-col space-y-2\">\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              data-testid=\"button-login-submit\"\n            >\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Sign In\n            </Button>\n            <Button \n              type=\"button\" \n              variant=\"ghost\" \n              onClick={onSwitchToRegister}\n              data-testid=\"button-switch-to-register\"\n            >\n              Don't have an account? Sign up\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3509},"client/src/components/auth/register-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"./auth-context\";\nimport { useLocation } from \"wouter\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface RegisterDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSwitchToLogin: () => void;\n}\n\nexport function RegisterDialog({ isOpen, onClose, onSwitchToLogin }: RegisterDialogProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await register(email, password, firstName, lastName);\n      toast({\n        title: \"Welcome to MysticRead AI!\",\n        description: \"Your account has been created successfully.\",\n      });\n      onClose();\n      setEmail(\"\");\n      setPassword(\"\");\n      setFirstName(\"\");\n      setLastName(\"\");\n      // Navigate to dashboard after successful registration with a small delay to ensure user state is updated\n      setTimeout(() => {\n        setLocation(\"/dashboard\");\n      }, 100);\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Join MysticRead AI</DialogTitle>\n          <DialogDescription>\n            Create your account to unlock personalized mystical insights\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                placeholder=\"First name\"\n                data-testid=\"input-register-firstname\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                placeholder=\"Last name\"\n                data-testid=\"input-register-lastname\"\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n              data-testid=\"input-register-email\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Create a password (min 8 characters)\"\n              required\n              minLength={8}\n              data-testid=\"input-register-password\"\n            />\n          </div>\n          <div className=\"flex flex-col space-y-2\">\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              data-testid=\"button-register-submit\"\n            >\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Account\n            </Button>\n            <Button \n              type=\"button\" \n              variant=\"ghost\" \n              onClick={onSwitchToLogin}\n              data-testid=\"button-switch-to-login\"\n            >\n              Already have an account? Sign in\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4610},"client/src/components/numerology-analysis-interface.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calculator, Hash, Loader2, Building, User } from \"lucide-react\";\nimport { NumerologyAnalysisResult, NumerologyInput } from \"@shared/schema\";\nimport { CosmicLoader } from \"@/components/cosmic-loader\";\n\ninterface NumerologyAnalysisInterfaceProps {\n  onAnalysisComplete: (result: NumerologyAnalysisResult, inputData: NumerologyInput, analysisId: string) => void;\n}\n\nexport function NumerologyAnalysisInterface({ onAnalysisComplete }: NumerologyAnalysisInterfaceProps) {\n  const [analysisType, setAnalysisType] = useState<\"personal\" | \"business\">(\"personal\");\n  const [name, setName] = useState(\"\");\n  const [birthDate, setBirthDate] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n  \n  const { toast } = useToast();\n\n  const analysisMutation = useMutation({\n    mutationFn: async (numerologyData: NumerologyInput) => {\n      const response = await apiRequest(\"POST\", \"/api/numerology/analyze\", numerologyData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onAnalysisComplete(data.result, data.inputData, data.id);\n      toast({\n        title: \"Analysis Complete!\",\n        description: \"Your numerology analysis is ready.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = () => {\n    const numerologyData: NumerologyInput = {\n      analysisType,\n      ...(analysisType === \"personal\" && {\n        name: name.trim(),\n        birthDate: birthDate,\n      }),\n      ...(analysisType === \"business\" && {\n        companyName: companyName.trim(),\n      }),\n    };\n\n    // Basic validation\n    if (analysisType === \"personal\") {\n      if (!name.trim()) {\n        toast({\n          title: \"Missing Information\",\n          description: \"Please enter your full name.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      if (!birthDate) {\n        toast({\n          title: \"Missing Information\", \n          description: \"Please enter your birth date.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else {\n      if (!companyName.trim()) {\n        toast({\n          title: \"Missing Information\",\n          description: \"Please enter the company name.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    analysisMutation.mutate(numerologyData);\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setBirthDate(\"\");\n    setCompanyName(\"\");\n    setAnalysisType(\"personal\");\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <Card className=\"bg-gradient-to-br from-purple-50 to-indigo-50 border-purple-200\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4\">\n            <Calculator className=\"h-6 w-6 text-purple-600\" />\n          </div>\n          <CardTitle className=\"text-2xl text-purple-800\">Numerology Analysis</CardTitle>\n          <CardDescription className=\"text-purple-600\">\n            Discover the hidden meanings behind numbers in your life\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Analysis Type Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"analysisType\">Analysis Type</Label>\n            <Select value={analysisType} onValueChange={(value: \"personal\" | \"business\") => setAnalysisType(value)}>\n              <SelectTrigger data-testid=\"select-numerology-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"personal\">\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"h-4 w-4\" />\n                    <span>Personal Numerology</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"business\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Building className=\"h-4 w-4\" />\n                    <span>Business Numerology</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {analysisType === \"personal\" ? (\n            <>\n              {/* Personal Information */}\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full Name</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    placeholder=\"Enter your full name as on birth certificate\"\n                    data-testid=\"input-numerology-name\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Use your complete birth name for the most accurate reading\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"birthDate\">Birth Date</Label>\n                  <Input\n                    id=\"birthDate\"\n                    type=\"date\"\n                    value={birthDate}\n                    onChange={(e) => setBirthDate(e.target.value)}\n                    data-testid=\"input-numerology-birthdate\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Your birth date is used to calculate your Life Path number\n                  </p>\n                </div>\n              </div>\n\n              {/* Personal Analysis Features */}\n              <Card className=\"bg-white/50 border-purple-100\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-purple-800 mb-2 flex items-center\">\n                    <Hash className=\"mr-2 h-4 w-4\" />\n                    Personal Analysis Includes:\n                  </h4>\n                  <ul className=\"text-sm text-purple-700 space-y-1\">\n                    <li>• Life Path Number - Your life's purpose and journey</li>\n                    <li>• Destiny Number - Your ultimate life goals</li>\n                    <li>• Soul Urge Number - Your inner desires and motivations</li>\n                    <li>• Personality Number - How others perceive you</li>\n                    <li>• Lucky numbers, colors, and favorable periods</li>\n                    <li>• Relationship compatibility insights</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </>\n          ) : (\n            <>\n              {/* Business Information */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"companyName\">Company Name</Label>\n                <Input\n                  id=\"companyName\"\n                  value={companyName}\n                  onChange={(e) => setCompanyName(e.target.value)}\n                  placeholder=\"Enter the full company name\"\n                  data-testid=\"input-numerology-company\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Use the complete business name as registered\n                </p>\n              </div>\n\n              {/* Business Analysis Features */}\n              <Card className=\"bg-white/50 border-purple-100\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-purple-800 mb-2 flex items-center\">\n                    <Hash className=\"mr-2 h-4 w-4\" />\n                    Business Analysis Includes:\n                  </h4>\n                  <ul className=\"text-sm text-purple-700 space-y-1\">\n                    <li>• Business Destiny Number - Company's ultimate purpose</li>\n                    <li>• Success potential and growth opportunities</li>\n                    <li>• Favorable business activities and ventures</li>\n                    <li>• Lucky dates for important decisions</li>\n                    <li>• Branding and marketing insights</li>\n                    <li>• Partnership compatibility analysis</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </>\n          )}\n\n          {/* Action Button */}\n          <Button \n            onClick={handleAnalyze}\n            disabled={analysisMutation.isPending}\n            className=\"w-full bg-purple-600 hover:bg-purple-700\"\n            size=\"lg\"\n            data-testid=\"button-analyze-numerology\"\n          >\n            {analysisMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            {analysisMutation.isPending ? \"Calculating Numbers...\" : \"Analyze Numbers\"}\n          </Button>\n\n          <Button \n            onClick={resetForm}\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-reset-numerology-form\"\n          >\n            Reset Form\n          </Button>\n        </CardContent>\n      </Card>\n\n      <CosmicLoader \n        analysisType=\"numerology\"\n        isVisible={analysisMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":9748},"client/src/components/numerology-results.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { NumerologyAnalysisResult, NumerologyInput } from \"@shared/schema\";\nimport { PostAnalysisChat } from \"./post-analysis-chat\";\nimport { \n  Calculator, \n  Hash, \n  Star, \n  Heart,\n  Target,\n  Compass,\n  Download,\n  Share,\n  RotateCcw,\n  TrendingUp,\n  Palette,\n  Calendar\n} from \"lucide-react\";\n\ninterface NumerologyResultsProps {\n  result: NumerologyAnalysisResult;\n  inputData: NumerologyInput;\n  onAnalyzeAnother: () => void;\n  analysisId?: string;\n  isAuthenticated?: boolean;\n  onLoginRequired?: () => void;\n}\n\nexport function NumerologyResults({ \n  result, \n  inputData, \n  onAnalyzeAnother, \n  analysisId, \n  isAuthenticated = false, \n  onLoginRequired \n}: NumerologyResultsProps) {\n  const handleDownloadReport = () => {\n    const reportContent = `NUMEROLOGY ANALYSIS REPORT\\\\n\\\\n` +\n      `Analysis Type: ${inputData.analysisType}\\\\n` +\n      (inputData.name ? `Name: ${inputData.name}\\\\n` : '') +\n      (inputData.birthDate ? `Birth Date: ${inputData.birthDate}\\\\n` : '') +\n      (inputData.companyName ? `Company: ${inputData.companyName}\\\\n` : '') +\n      `\\\\nPersonality Overview:\\\\n${result.personalityOverview}\\\\n\\\\n` +\n      `Core Numbers:\\\\n` +\n      `Life Path: ${result.coreNumbers.lifePathNumber.number} - ${result.coreNumbers.lifePathNumber.meaning}\\\\n` +\n      `Destiny: ${result.coreNumbers.destinyNumber.number} - ${result.coreNumbers.destinyNumber.meaning}\\\\n` +\n      `Soul Urge: ${result.coreNumbers.soulUrgeNumber.number} - ${result.coreNumbers.soulUrgeNumber.meaning}\\\\n` +\n      `Personality: ${result.coreNumbers.personalityNumber.number} - ${result.coreNumbers.personalityNumber.meaning}\\\\n\\\\n` +\n      `Strengths: ${result.lifeAreas.strengths.join(', ')}\\\\n` +\n      `Challenges: ${result.lifeAreas.challenges.join(', ')}\\\\n\\\\n` +\n      `Career Path: ${result.lifeAreas.careerPath}\\\\n\\\\n` +\n      `Lucky Numbers: ${result.lifeAreas.luckyNumbers.join(', ')}\\\\n` +\n      `Favorable Colors: ${result.lifeAreas.favorableColors.join(', ')}\\\\n\\\\n` +\n      `Current Year: ${result.predictions.currentYear}\\\\n\\\\n` +\n      `Generated by MysticRead AI - ${new Date().toLocaleDateString()}`;\n    \n    const blob = new Blob([reportContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `numerology-report-${new Date().getTime()}.txt`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleShareResults = () => {\n    const shareText = `I just got my numerology analysis from MysticRead AI! ` +\n      `Life Path: ${result.coreNumbers.lifePathNumber.number}, ` +\n      `Destiny: ${result.coreNumbers.destinyNumber.number}. ` +\n      `Check out MysticRead AI for your own numerology insights!`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: 'My Numerology Analysis',\n        text: shareText,\n      });\n    } else {\n      navigator.clipboard.writeText(shareText).then(() => {\n        alert('Results copied to clipboard!');\n      });\n    }\n  };\n\n  return (\n    <section id=\"numerology-results-section\" className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          \n          {/* Results Header */}\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-foreground mb-4\">Your Numerology Analysis</h3>\n            <p className=\"text-lg text-secondary-foreground\">\n              {inputData.analysisType === \"personal\" \n                ? `Personal numerology insights for ${inputData.name}` \n                : `Business numerology analysis for ${inputData.companyName}`}\n            </p>\n          </div>\n\n          {/* Core Numbers Overview */}\n          <div className=\"grid lg:grid-cols-4 gap-6 mb-12\">\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">\n                    {result.coreNumbers.lifePathNumber.number}\n                  </span>\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Life Path</h4>\n                <p className=\"text-sm text-secondary-foreground\">\n                  {result.coreNumbers.lifePathNumber.meaning}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">\n                    {result.coreNumbers.destinyNumber.number}\n                  </span>\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Destiny</h4>\n                <p className=\"text-sm text-secondary-foreground\">\n                  {result.coreNumbers.destinyNumber.meaning}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-pink-500 to-rose-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">\n                    {result.coreNumbers.soulUrgeNumber.number}\n                  </span>\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Soul Urge</h4>\n                <p className=\"text-sm text-secondary-foreground\">\n                  {result.coreNumbers.soulUrgeNumber.meaning}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">\n                    {result.coreNumbers.personalityNumber.number}\n                  </span>\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Personality</h4>\n                <p className=\"text-sm text-secondary-foreground\">\n                  {result.coreNumbers.personalityNumber.meaning}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Detailed Analysis */}\n          <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n            \n            {/* Personality Overview */}\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-4 flex items-center\">\n                  <Calculator className=\"mr-2 h-5 w-5 text-accent\" />\n                  Personality Overview\n                </h4>\n                <p className=\"text-secondary-foreground leading-relaxed\">\n                  {result.personalityOverview}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Core Numbers Details */}\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-4 flex items-center\">\n                  <Hash className=\"mr-2 h-5 w-5 text-accent\" />\n                  Core Numbers Insights\n                </h4>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-1\">Life Path Traits</h5>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {result.coreNumbers.lifePathNumber.traits?.map((trait, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs bg-accent/20 text-accent-foreground\">\n                          {trait}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-1\">Life Purpose</h5>\n                    <p className=\"text-sm text-secondary-foreground\">\n                      {result.coreNumbers.destinyNumber.purpose}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Strengths & Challenges */}\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-4 flex items-center\">\n                  <TrendingUp className=\"mr-2 h-5 w-5 text-green-400\" />\n                  Strengths & Challenges\n                </h4>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-2 flex items-center\">\n                      <Star className=\"mr-1 h-4 w-4 text-green-400\" />\n                      Strengths\n                    </h5>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {result.lifeAreas.strengths.map((strength, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-green-500/20 text-green-300 border-green-500/30\">\n                          {strength}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-2 flex items-center\">\n                      <Target className=\"mr-1 h-4 w-4 text-orange-400\" />\n                      Challenges to Overcome\n                    </h5>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {result.lifeAreas.challenges.map((challenge, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-orange-500/20 text-orange-300 border-orange-500/30\">\n                          {challenge}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Life Areas */}\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-4 flex items-center\">\n                  <Compass className=\"mr-2 h-5 w-5 text-blue-400\" />\n                  Life Areas Guidance\n                </h4>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-1 flex items-center\">\n                      <TrendingUp className=\"mr-1 h-4 w-4 text-blue-400\" />\n                      Career Path\n                    </h5>\n                    <p className=\"text-sm text-secondary-foreground\">\n                      {result.lifeAreas.careerPath}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-1 flex items-center\">\n                      <Heart className=\"mr-1 h-4 w-4 text-pink-400\" />\n                      Relationships\n                    </h5>\n                    <p className=\"text-sm text-secondary-foreground\">\n                      {result.lifeAreas.relationships}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lucky Elements */}\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-4 flex items-center\">\n                  <Star className=\"mr-2 h-5 w-5 text-yellow-400\" />\n                  Lucky Elements\n                </h4>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-2 flex items-center\">\n                      <Hash className=\"mr-1 h-4 w-4 text-purple-400\" />\n                      Lucky Numbers\n                    </h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {result.lifeAreas.luckyNumbers.map((number, index) => (\n                        <div key={index} className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-indigo-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-bold text-white\">{number}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-2 flex items-center\">\n                      <Palette className=\"mr-1 h-4 w-4 text-pink-400\" />\n                      Favorable Colors\n                    </h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {result.lifeAreas.favorableColors.map((color, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-pink-500/20 text-pink-300 border-pink-500/30\">\n                          {color}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Predictions */}\n            <Card className=\"clean-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-foreground mb-4 flex items-center\">\n                  <Calendar className=\"mr-2 h-5 w-5 text-indigo-400\" />\n                  Predictions & Opportunities\n                </h4>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-1\">Current Year Focus</h5>\n                    <p className=\"text-sm text-secondary-foreground\">\n                      {result.predictions.currentYear}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-1\">Next Phase</h5>\n                    <p className=\"text-sm text-secondary-foreground\">\n                      {result.predictions.nextPhase}\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-foreground mb-2\">Upcoming Opportunities</h5>\n                    <ul className=\"text-sm text-secondary-foreground space-y-1\">\n                      {result.predictions.opportunities.map((opportunity, index) => (\n                        <li key={index} className=\"flex items-start\">\n                          <span className=\"text-blue-400 mr-2\">•</span>\n                          {opportunity}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Post-Analysis Chat */}\n          {analysisId && (\n            <div className=\"mb-12\">\n              <PostAnalysisChat\n                analysisId={analysisId}\n                analysisType=\"numerology\"\n                analysisData={result}\n                isAuthenticated={isAuthenticated}\n                onLoginRequired={onLoginRequired || (() => {})}\n              />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"text-center\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleDownloadReport}\n                className=\"bg-accent hover:bg-blue-600\"\n                data-testid=\"button-download-numerology-report\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Full Report\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleShareResults}\n                data-testid=\"button-share-numerology-results\"\n              >\n                <Share className=\"mr-2 h-4 w-4\" />\n                Share Results\n              </Button>\n              <Button \n                variant=\"ghost\"\n                onClick={onAnalyzeAnother}\n                className=\"text-accent hover:text-blue-600\"\n                data-testid=\"button-analyze-another-numerology\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Analyze Another\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":16874},"client/src/components/kundli-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AstrologyAnalysisResult } from \"@shared/schema\";\nimport { Circle, Star, Sun, Moon } from \"lucide-react\";\n\ninterface KundliChartProps {\n  kundliData: AstrologyAnalysisResult['kundliChart'];\n}\n\nconst HOUSE_POSITIONS = [\n  { x: 250, y: 50, rotation: 0 },    // House 1 (Top)\n  { x: 350, y: 100, rotation: 30 },  // House 2 (Top Right)\n  { x: 400, y: 200, rotation: 60 },  // House 3 (Right)\n  { x: 350, y: 300, rotation: 90 },  // House 4 (Bottom Right)\n  { x: 250, y: 350, rotation: 120 }, // House 5 (Bottom)\n  { x: 150, y: 300, rotation: 150 }, // House 6 (Bottom Left)\n  { x: 100, y: 200, rotation: 180 }, // House 7 (Left)\n  { x: 150, y: 100, rotation: 210 }, // House 8 (Top Left)\n  { x: 200, y: 75, rotation: 240 },  // House 9\n  { x: 300, y: 75, rotation: 270 },  // House 10  \n  { x: 375, y: 150, rotation: 300 }, // House 11\n  { x: 325, y: 250, rotation: 330 }, // House 12\n];\n\nconst PLANET_COLORS = {\n  sun: \"#FFD700\",\n  moon: \"#C0C0C0\", \n  mercury: \"#90EE90\",\n  venus: \"#FFC0CB\",\n  mars: \"#FF6347\",\n  jupiter: \"#FFD700\",\n  saturn: \"#8B4513\",\n  rahu: \"#800080\",\n  ketu: \"#800080\"\n};\n\nconst PLANET_SYMBOLS = {\n  sun: \"☉\",\n  moon: \"☽\",\n  mercury: \"☿\",\n  venus: \"♀\",\n  mars: \"♂\",\n  jupiter: \"♃\",\n  saturn: \"♄\",\n  rahu: \"☊\",\n  ketu: \"☋\"\n};\n\nexport function KundliChart({ kundliData }: KundliChartProps) {\n  const getPlanetSymbol = (planetName: string) => {\n    const key = planetName.toLowerCase() as keyof typeof PLANET_SYMBOLS;\n    return PLANET_SYMBOLS[key] || planetName.charAt(0);\n  };\n\n  const getPlanetColor = (planetName: string) => {\n    const key = planetName.toLowerCase() as keyof typeof PLANET_COLORS;\n    return PLANET_COLORS[key] || \"#666\";\n  };\n\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-8\">\n      {/* Kundli Chart Visualization */}\n      <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-indigo-800 flex items-center justify-center gap-2\">\n            <Star className=\"h-5 w-5\" />\n            Kundli Chart (Birth Chart)\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex justify-center\">\n          <div className=\"relative w-[500px] h-[400px]\">\n            {/* Chart Background */}\n            <svg width=\"500\" height=\"400\" className=\"absolute inset-0\">\n              {/* Outer Circle */}\n              <circle\n                cx=\"250\"\n                cy=\"200\"\n                r=\"180\"\n                fill=\"none\"\n                stroke=\"#4338ca\"\n                strokeWidth=\"2\"\n                className=\"opacity-30\"\n              />\n              \n              {/* Inner Circle */}\n              <circle\n                cx=\"250\"\n                cy=\"200\"\n                r=\"120\"\n                fill=\"none\"\n                stroke=\"#4338ca\"\n                strokeWidth=\"1\"\n                className=\"opacity-20\"\n              />\n\n              {/* House Division Lines */}\n              {Array.from({ length: 12 }, (_, i) => {\n                const angle = (i * 30) * (Math.PI / 180);\n                const x1 = 250 + Math.cos(angle) * 120;\n                const y1 = 200 + Math.sin(angle) * 120;\n                const x2 = 250 + Math.cos(angle) * 180;\n                const y2 = 200 + Math.sin(angle) * 180;\n                \n                return (\n                  <line\n                    key={i}\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"#4338ca\"\n                    strokeWidth=\"1\"\n                    className=\"opacity-30\"\n                  />\n                );\n              })}\n            </svg>\n\n            {/* Houses */}\n            {kundliData.houses.map((house, index) => {\n              const position = HOUSE_POSITIONS[index] || HOUSE_POSITIONS[0];\n              const planetsInHouse = house.planets || [];\n              \n              return (\n                <div\n                  key={house.number}\n                  className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n                  style={{\n                    left: position.x,\n                    top: position.y,\n                  }}\n                >\n                  {/* House Number and Sign */}\n                  <div className=\"text-center bg-white rounded-lg border border-indigo-200 p-2 shadow-sm min-w-[80px]\">\n                    <div className=\"font-bold text-indigo-800 text-sm\">\n                      {house.number}\n                    </div>\n                    <div className=\"text-xs text-indigo-600 truncate\">\n                      {house.sign}\n                    </div>\n                    \n                    {/* Planets in this house */}\n                    <div className=\"flex flex-wrap gap-1 mt-1 justify-center\">\n                      {planetsInHouse.map((planet, planetIndex) => (\n                        <div\n                          key={planetIndex}\n                          className=\"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold text-white\"\n                          style={{ backgroundColor: getPlanetColor(planet) }}\n                          title={planet}\n                        >\n                          {getPlanetSymbol(planet)}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n\n            {/* Central Label */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"bg-white rounded-lg border-2 border-indigo-300 p-3 shadow-lg\">\n                <div className=\"text-center\">\n                  <Sun className=\"h-6 w-6 text-yellow-500 mx-auto mb-1\" />\n                  <div className=\"text-xs font-semibold text-indigo-800\">\n                    Kundli\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Planetary Positions Details */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-primary flex items-center gap-2\">\n            <Circle className=\"h-5 w-5\" />\n            Planetary Positions\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Object.entries(kundliData.planetaryPositions).map(([planet, data]) => (\n            <div key={planet} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <div\n                  className=\"w-8 h-8 rounded-full flex items-center justify-center text-white font-bold\"\n                  style={{ backgroundColor: getPlanetColor(planet) }}\n                >\n                  {getPlanetSymbol(planet)}\n                </div>\n                <div>\n                  <div className=\"font-semibold capitalize text-gray-800\">\n                    {planet}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {data.sign} • House {data.house}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {data.degrees.toFixed(1)}°\n                </Badge>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Houses Details */}\n      <Card className=\"lg:col-span-2\">\n        <CardHeader>\n          <CardTitle className=\"text-primary flex items-center gap-2\">\n            <Star className=\"h-5 w-5\" />\n            Houses & Their Significance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {kundliData.houses.map((house) => (\n              <div key={house.number} className=\"p-4 border rounded-lg bg-gradient-to-br from-blue-50 to-indigo-50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-indigo-800\">\n                    House {house.number}\n                  </h4>\n                  <Badge variant=\"secondary\">{house.sign}</Badge>\n                </div>\n                <div className=\"text-sm text-gray-600 mb-2\">\n                  <span className=\"font-medium\">Ruling:</span> {house.ruling}\n                </div>\n                {house.planets && house.planets.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {house.planets.map((planet, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex items-center px-2 py-1 rounded-full text-xs text-white\"\n                        style={{ backgroundColor: getPlanetColor(planet) }}\n                      >\n                        {getPlanetSymbol(planet)} {planet}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Planetary Aspects */}\n      {kundliData.aspects && kundliData.aspects.length > 0 && (\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"text-primary flex items-center gap-2\">\n              <Moon className=\"h-5 w-5\" />\n              Planetary Aspects\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {kundliData.aspects.map((aspect, index) => (\n                <div key={index} className=\"p-4 border rounded-lg bg-gradient-to-br from-purple-50 to-pink-50\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span\n                      className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold\"\n                      style={{ backgroundColor: getPlanetColor(aspect.from) }}\n                    >\n                      {getPlanetSymbol(aspect.from)}\n                    </span>\n                    <span className=\"text-gray-500\">→</span>\n                    <span\n                      className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold\"\n                      style={{ backgroundColor: getPlanetColor(aspect.to) }}\n                    >\n                      {getPlanetSymbol(aspect.to)}\n                    </span>\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {aspect.type}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-700\">{aspect.influence}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11037},"client/src/components/post-analysis-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ChatMessage, ChatConversation } from \"@shared/schema\";\nimport { \n  MessageCircle, \n  Send, \n  CreditCard, \n  Sparkles, \n  User, \n  Bot,\n  Coins,\n  Zap,\n  Lock\n} from \"lucide-react\";\n\ninterface PostAnalysisChatProps {\n  analysisId: string;\n  analysisType: 'palm' | 'astrology' | 'vastu' | 'numerology' | 'tarot';\n  analysisData: any;\n  isAuthenticated: boolean;\n  onLoginRequired: () => void;\n}\n\nexport function PostAnalysisChat({ \n  analysisId, \n  analysisType, \n  analysisData, \n  isAuthenticated,\n  onLoginRequired \n}: PostAnalysisChatProps) {\n  const [message, setMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get conversation data\n  const { data: conversation, isLoading } = useQuery<{messages: ChatMessage[]}>({\n    queryKey: ['/api/chat/conversation', analysisId],\n    enabled: isAuthenticated\n  });\n\n  // Get user credits\n  const { data: userCredits } = useQuery<{credits: number}>({\n    queryKey: ['/api/auth/me'],\n    enabled: isAuthenticated\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat/send\", {\n        analysisId,\n        analysisType,\n        message: messageText,\n        analysisData\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/chat/conversation', analysisId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n\n  const handleSendMessage = () => {\n    if (!isAuthenticated) {\n      onLoginRequired();\n      return;\n    }\n\n    if (!message.trim()) return;\n\n    sendMessageMutation.mutate(message.trim());\n  };\n\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [conversation?.messages]);\n\n  if (!isAuthenticated) {\n    return (\n      <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center\">\n              <MessageCircle className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold text-blue-800 mb-2\">\n                Want to Ask Follow-up Questions?\n              </h3>\n              <p className=\"text-blue-600 mb-4\">\n                Sign in to chat with our AI about your analysis results. Get personalized insights and answers!\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-sm text-blue-700\">\n                <Sparkles className=\"h-4 w-4\" />\n                <span>Ask unlimited questions about your analysis</span>\n              </div>\n            </div>\n            <Button onClick={onLoginRequired} className=\"bg-blue-600 hover:bg-blue-700\">\n              Sign In to Chat\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const messages = conversation?.messages || [];\n  const canSendMessage = true; // Simplified - no limits for now\n\n  return (\n    <Card className=\"bg-gradient-to-br from-purple-50 to-blue-50 border-purple-200\">\n      <CardHeader className=\"bg-gradient-to-r from-purple-500 to-blue-600 text-white rounded-t-lg\">\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <MessageCircle className=\"h-6 w-6\" />\n            <span>Chat About Your {analysisType} Analysis</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n              <Sparkles className=\"h-3 w-3 mr-1\" />\n              Unlimited Chat\n            </Badge>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        {/* Messages Area */}\n        <ScrollArea className=\"h-96 p-4\">\n          <div className=\"space-y-4\">\n            {messages.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Bot className=\"h-12 w-12 text-purple-400 mx-auto mb-3\" />\n                <p className=\"text-gray-900\">\n                  Ask me anything about your {analysisType} analysis!\n                </p>\n                <p className=\"text-sm text-gray-700 mt-1\">\n                  I can provide deeper insights, clarify meanings, or answer specific questions.\n                </p>\n              </div>\n            ) : (\n              messages.map((msg: ChatMessage, index: number) => (\n                <div key={index} className={`flex gap-3 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                  <div className={`flex gap-3 max-w-[80%] ${msg.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                      msg.role === 'user' \n                        ? 'bg-blue-500 text-white' \n                        : 'bg-purple-500 text-white'\n                    }`}>\n                      {msg.role === 'user' ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n                    </div>\n                    <div className={`p-3 rounded-lg ${\n                      msg.role === 'user'\n                        ? 'bg-blue-500 text-white'\n                        : 'bg-white border border-gray-200 text-gray-900'\n                    }`}>\n                      <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                      <p className=\"text-xs opacity-70 mt-1\">\n                        {new Date(msg.createdAt).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        <Separator />\n\n\n        {/* Input Area */}\n        <div className=\"p-4 bg-gray-50\">\n          <div className=\"flex gap-2\">\n            <Input\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Ask about your analysis...\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n              disabled={sendMessageMutation.isPending}\n              className=\"flex-1\"\n            />\n            <Button \n              onClick={handleSendMessage}\n              disabled={!message.trim() || sendMessageMutation.isPending}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n            >\n              {sendMessageMutation.isPending ? (\n                <Zap className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7847},"client/src/components/tarot-analysis-interface.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Sparkles, Zap, Shuffle, Loader2 } from \"lucide-react\";\nimport { TarotAnalysisResult, TarotInput } from \"@shared/schema\";\nimport { CosmicLoader } from \"@/components/cosmic-loader\";\n\ninterface TarotAnalysisInterfaceProps {\n  onAnalysisComplete: (result: TarotAnalysisResult, inputData: TarotInput, analysisId: string) => void;\n}\n\n// Predefined tarot cards for realistic simulation\nconst MAJOR_ARCANA = [\n  \"The Fool\", \"The Magician\", \"The High Priestess\", \"The Empress\", \"The Emperor\",\n  \"The Hierophant\", \"The Lovers\", \"The Chariot\", \"Strength\", \"The Hermit\",\n  \"Wheel of Fortune\", \"Justice\", \"The Hanged Man\", \"Death\", \"Temperance\",\n  \"The Devil\", \"The Tower\", \"The Star\", \"The Moon\", \"The Sun\", \"Judgement\", \"The World\"\n];\n\nconst MINOR_ARCANA = [\n  // Wands\n  \"Ace of Wands\", \"Two of Wands\", \"Three of Wands\", \"Four of Wands\", \"Five of Wands\",\n  \"Six of Wands\", \"Seven of Wands\", \"Eight of Wands\", \"Nine of Wands\", \"Ten of Wands\",\n  \"Page of Wands\", \"Knight of Wands\", \"Queen of Wands\", \"King of Wands\",\n  // Cups\n  \"Ace of Cups\", \"Two of Cups\", \"Three of Cups\", \"Four of Cups\", \"Five of Cups\",\n  \"Six of Cups\", \"Seven of Cups\", \"Eight of Cups\", \"Nine of Cups\", \"Ten of Cups\",\n  \"Page of Cups\", \"Knight of Cups\", \"Queen of Cups\", \"King of Cups\",\n  // Swords\n  \"Ace of Swords\", \"Two of Swords\", \"Three of Swords\", \"Four of Swords\", \"Five of Swords\",\n  \"Six of Swords\", \"Seven of Swords\", \"Eight of Swords\", \"Nine of Swords\", \"Ten of Swords\",\n  \"Page of Swords\", \"Knight of Swords\", \"Queen of Swords\", \"King of Swords\",\n  // Pentacles\n  \"Ace of Pentacles\", \"Two of Pentacles\", \"Three of Pentacles\", \"Four of Pentacles\", \"Five of Pentacles\",\n  \"Six of Pentacles\", \"Seven of Pentacles\", \"Eight of Pentacles\", \"Nine of Pentacles\", \"Ten of Pentacles\",\n  \"Page of Pentacles\", \"Knight of Pentacles\", \"Queen of Pentacles\", \"King of Pentacles\"\n];\n\nconst ALL_CARDS = [...MAJOR_ARCANA, ...MINOR_ARCANA];\n\nexport function TarotAnalysisInterface({ onAnalysisComplete }: TarotAnalysisInterfaceProps) {\n  const [spreadType, setSpreadType] = useState<\"single-card\" | \"three-card\" | \"celtic-cross\">(\"three-card\");\n  const [question, setQuestion] = useState(\"\");\n  const [drawnCards, setDrawnCards] = useState<Array<{cardName: string; suit: string; position: string; reversed: boolean}>>([]);\n  const [isDrawingCards, setIsDrawingCards] = useState(false);\n  \n  const { toast } = useToast();\n\n  const analysisMutation = useMutation({\n    mutationFn: async (tarotData: TarotInput) => {\n      const response = await apiRequest(\"POST\", \"/api/tarot/analyze\", tarotData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onAnalysisComplete(data.result, data.inputData, data.id);\n      toast({\n        title: \"Reading Complete!\",\n        description: \"Your tarot reading is ready.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Reading Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getSpreadPositions = (type: string) => {\n    switch (type) {\n      case \"single-card\":\n        return [\"Present Situation\"];\n      case \"three-card\":\n        return [\"Past\", \"Present\", \"Future\"];\n      case \"celtic-cross\":\n        return [\n          \"Present Situation\", \"Challenge\", \"Distant Past\", \"Recent Past\",\n          \"Possible Outcome\", \"Near Future\", \"Your Approach\", \"External Influences\",\n          \"Hopes and Fears\", \"Final Outcome\"\n        ];\n      default:\n        return [\"Past\", \"Present\", \"Future\"];\n    }\n  };\n\n  const drawCards = () => {\n    setIsDrawingCards(true);\n    const positions = getSpreadPositions(spreadType);\n    const selectedCards: Array<{cardName: string; suit: string; position: string; reversed: boolean}> = [];\n    const availableCards = [...ALL_CARDS];\n\n    // Simulate card drawing with animation delay\n    setTimeout(() => {\n      for (let i = 0; i < positions.length; i++) {\n        const randomIndex = Math.floor(Math.random() * availableCards.length);\n        const cardName = availableCards.splice(randomIndex, 1)[0];\n        const reversed = Math.random() < 0.3; // 30% chance of reversed card\n        \n        // Determine suit for minor arcana\n        let suit = \"\";\n        if (cardName.includes(\"Wands\")) suit = \"Wands\";\n        else if (cardName.includes(\"Cups\")) suit = \"Cups\";\n        else if (cardName.includes(\"Swords\")) suit = \"Swords\";\n        else if (cardName.includes(\"Pentacles\")) suit = \"Pentacles\";\n        else suit = \"Major Arcana\";\n\n        selectedCards.push({\n          cardName,\n          suit,\n          position: positions[i],\n          reversed\n        });\n      }\n      \n      setDrawnCards(selectedCards);\n      setIsDrawingCards(false);\n    }, 1500);\n  };\n\n  const handleAnalyze = () => {\n    if (drawnCards.length === 0) {\n      toast({\n        title: \"No Cards Drawn\",\n        description: \"Please draw cards first before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const tarotData: TarotInput = {\n      spreadType,\n      question: question.trim() || undefined,\n      drawnCards,\n    };\n\n    analysisMutation.mutate(tarotData);\n  };\n\n  const resetReading = () => {\n    setQuestion(\"\");\n    setDrawnCards([]);\n    setSpreadType(\"three-card\");\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-4\">\n            <Zap className=\"h-6 w-6 text-indigo-600\" />\n          </div>\n          <CardTitle className=\"text-2xl text-indigo-800\">Tarot Reading</CardTitle>\n          <CardDescription className=\"text-indigo-600\">\n            Discover guidance and insights through the ancient wisdom of tarot\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Spread Type Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"spreadType\">Choose Your Spread</Label>\n            <Select value={spreadType} onValueChange={(value: any) => setSpreadType(value)}>\n              <SelectTrigger data-testid=\"select-tarot-spread\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"single-card\">Single Card - Quick Insight</SelectItem>\n                <SelectItem value=\"three-card\">Three Card - Past, Present, Future</SelectItem>\n                <SelectItem value=\"celtic-cross\">Celtic Cross - Comprehensive Reading</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Question Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"question\">Your Question (Optional)</Label>\n            <Textarea\n              id=\"question\"\n              value={question}\n              onChange={(e) => setQuestion(e.target.value)}\n              placeholder=\"Ask the cards for guidance on love, career, spirituality, or any area of your life...\"\n              rows={3}\n              data-testid=\"textarea-tarot-question\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              Focus your intention while asking your question for more meaningful insights\n            </p>\n          </div>\n\n          {/* Card Drawing Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-semibold text-indigo-800\">Draw Your Cards</h4>\n              <Button \n                onClick={drawCards}\n                disabled={isDrawingCards}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-draw-tarot-cards\"\n              >\n                {isDrawingCards ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Drawing...\n                  </>\n                ) : (\n                  <>\n                    <Shuffle className=\"mr-2 h-4 w-4\" />\n                    Draw Cards\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {/* Display Drawn Cards */}\n            {drawnCards.length > 0 && (\n              <div className=\"grid gap-3\">\n                {drawnCards.map((card, index) => (\n                  <Card key={index} className=\"bg-white/70 border-indigo-100\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium text-indigo-800\">{card.position}</p>\n                          <p className=\"text-sm text-indigo-600\">\n                            {card.cardName} {card.reversed && \"(Reversed)\"}\n                          </p>\n                          {card.suit && card.suit !== \"Major Arcana\" && (\n                            <p className=\"text-xs text-muted-foreground\">{card.suit}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <Sparkles className={`h-5 w-5 ${card.reversed ? 'transform rotate-180 text-orange-500' : 'text-yellow-500'}`} />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Spread Information */}\n          <Card className=\"bg-white/50 border-indigo-100\">\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold text-indigo-800 mb-2 flex items-center\">\n                <Zap className=\"mr-2 h-4 w-4\" />\n                {spreadType === \"single-card\" && \"Single Card Reading\"}\n                {spreadType === \"three-card\" && \"Three Card Reading\"}\n                {spreadType === \"celtic-cross\" && \"Celtic Cross Reading\"}\n              </h4>\n              <p className=\"text-sm text-indigo-700\">\n                {spreadType === \"single-card\" && \"Perfect for quick daily guidance or focused questions about your current situation.\"}\n                {spreadType === \"three-card\" && \"Explores the past influences, present situation, and future potential around your question.\"}\n                {spreadType === \"celtic-cross\" && \"The most comprehensive spread, revealing complex layers of your situation with detailed guidance.\"}\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <Button \n              onClick={handleAnalyze}\n              disabled={analysisMutation.isPending || drawnCards.length === 0}\n              className=\"w-full bg-indigo-600 hover:bg-indigo-700\"\n              size=\"lg\"\n              data-testid=\"button-analyze-tarot\"\n            >\n              {analysisMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {analysisMutation.isPending ? \"Interpreting Cards...\" : \"Interpret Reading\"}\n            </Button>\n\n            <Button \n              onClick={resetReading}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-reset-tarot-reading\"\n            >\n              New Reading\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <CosmicLoader \n        analysisType=\"tarot\"\n        isVisible={analysisMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":12103},"client/src/components/tarot-results.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TarotAnalysisResult, TarotInput } from \"@shared/schema\";\nimport { PostAnalysisChat } from \"./post-analysis-chat\";\nimport { \n  Zap, \n  Sparkles, \n  Eye,\n  Heart,\n  Target,\n  Compass,\n  Download,\n  Share,\n  RotateCcw,\n  Clock,\n  Star,\n  ArrowRight\n} from \"lucide-react\";\n\ninterface TarotResultsProps {\n  result: TarotAnalysisResult;\n  inputData: TarotInput;\n  onAnalyzeAnother: () => void;\n  analysisId?: string;\n  isAuthenticated?: boolean;\n  onLoginRequired?: () => void;\n}\n\nexport function TarotResults({ \n  result, \n  inputData, \n  onAnalyzeAnother, \n  analysisId, \n  isAuthenticated = false, \n  onLoginRequired \n}: TarotResultsProps) {\n  const handleDownloadReport = () => {\n    const reportContent = `TAROT READING REPORT\\\\n\\\\n` +\n      `Spread Type: ${result.spreadType}\\\\n` +\n      (inputData.question ? `Question: ${inputData.question}\\\\n` : '') +\n      `\\\\nPersonality Overview:\\\\n${result.personalityOverview}\\\\n\\\\n` +\n      `Card Analysis:\\\\n` +\n      result.cardAnalysis.map((card, index) => \n        `${index + 1}. ${card.position}: ${card.cardName}${card.reversed ? ' (Reversed)' : ''}\\\\n` +\n        `   Meaning: ${card.meaning}\\\\n` +\n        `   Interpretation: ${card.interpretation}\\\\n`\n      ).join('\\\\n') +\n      `\\\\nOverall Message:\\\\n${result.overallMessage}\\\\n\\\\n` +\n      `Guidance:\\\\n` +\n      `Present Situation: ${result.guidance.presentSituation}\\\\n` +\n      (result.guidance.pastInfluences ? `Past Influences: ${result.guidance.pastInfluences}\\\\n` : '') +\n      (result.guidance.futureOutlook ? `Future Outlook: ${result.guidance.futureOutlook}\\\\n` : '') +\n      `Advice: ${result.guidance.advice}\\\\n` +\n      (result.guidance.outcome ? `Outcome: ${result.guidance.outcome}\\\\n` : '') +\n      `\\\\nAction Steps:\\\\n${result.actionSteps.map((step, i) => `${i + 1}. ${step}`).join('\\\\n')}\\\\n\\\\n` +\n      `Reflection:\\\\n${result.reflection}\\\\n\\\\n` +\n      `Generated by MysticRead AI - ${new Date().toLocaleDateString()}`;\n    \n    const blob = new Blob([reportContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `tarot-reading-${new Date().getTime()}.txt`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleShareResults = () => {\n    const shareText = `I just received a ${result.spreadType} tarot reading from MysticRead AI! ` +\n      `Cards drawn: ${result.cardAnalysis.map(c => c.cardName).join(', ')}. ` +\n      `The insights were truly enlightening! Check out MysticRead AI for your own tarot reading.`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: 'My Tarot Reading',\n        text: shareText,\n      });\n    } else {\n      navigator.clipboard.writeText(shareText).then(() => {\n        alert('Reading copied to clipboard!');\n      });\n    }\n  };\n\n  const getSpreadDisplayName = (spreadType: string) => {\n    switch (spreadType) {\n      case \"single-card\": return \"Single Card Reading\";\n      case \"three-card\": return \"Three Card Reading\";\n      case \"celtic-cross\": return \"Celtic Cross Reading\";\n      default: return \"Tarot Reading\";\n    }\n  };\n\n  return (\n    <section id=\"tarot-results-section\" className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          \n          {/* Results Header */}\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-primary mb-4\">Your Tarot Reading</h3>\n            <p className=\"text-lg text-secondary\">\n              {getSpreadDisplayName(result.spreadType)}\n              {inputData.question && (\n                <span className=\"block text-indigo-600 mt-2 italic\">\n                  \"{inputData.question}\"\n                </span>\n              )}\n            </p>\n          </div>\n\n          {/* Card Analysis */}\n          <div className=\"grid lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-12\">\n            {result.cardAnalysis.map((card, index) => (\n              <Card key={index} className=\"bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-4\">\n                    <div className=\"w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Sparkles className={`h-8 w-8 ${card.reversed ? 'transform rotate-180 text-orange-600' : 'text-indigo-600'}`} />\n                    </div>\n                    <h4 className=\"font-semibold text-indigo-800 mb-1\">{card.position}</h4>\n                    <p className=\"text-sm font-medium text-indigo-600\">\n                      {card.cardName}\n                      {card.reversed && (\n                        <Badge variant=\"outline\" className=\"ml-2 text-orange-600 border-orange-200\">\n                          Reversed\n                        </Badge>\n                      )}\n                    </p>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h5 className=\"font-medium text-purple-800 mb-1\">Meaning</h5>\n                      <p className=\"text-sm text-secondary\">{card.meaning}</p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-blue-800 mb-1\">Interpretation</h5>\n                      <p className=\"text-sm text-secondary\">{card.interpretation}</p>\n                    </div>\n                    {card.reversed && card.reversedMeaning && (\n                      <div>\n                        <h5 className=\"font-medium text-orange-800 mb-1\">Reversed Meaning</h5>\n                        <p className=\"text-sm text-secondary\">{card.reversedMeaning}</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Overall Analysis */}\n          <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n            \n            {/* Personality Overview */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-primary mb-4 flex items-center\">\n                  <Eye className=\"mr-2 h-5 w-5 text-purple-600\" />\n                  Personality Insights\n                </h4>\n                <p className=\"text-secondary leading-relaxed\">\n                  {result.personalityOverview}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Overall Message */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-primary mb-4 flex items-center\">\n                  <Zap className=\"mr-2 h-5 w-5 text-indigo-600\" />\n                  Overall Message\n                </h4>\n                <p className=\"text-secondary leading-relaxed\">\n                  {result.overallMessage}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Guidance Section */}\n            <Card className=\"lg:col-span-2\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-primary mb-6 flex items-center\">\n                  <Compass className=\"mr-2 h-5 w-5 text-blue-600\" />\n                  Detailed Guidance\n                </h4>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {result.guidance.pastInfluences && (\n                    <div>\n                      <h5 className=\"font-medium text-purple-800 mb-2 flex items-center\">\n                        <Clock className=\"mr-1 h-4 w-4\" />\n                        Past Influences\n                      </h5>\n                      <p className=\"text-sm text-secondary\">{result.guidance.pastInfluences}</p>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <h5 className=\"font-medium text-blue-800 mb-2 flex items-center\">\n                      <Eye className=\"mr-1 h-4 w-4\" />\n                      Present Situation\n                    </h5>\n                    <p className=\"text-sm text-secondary\">{result.guidance.presentSituation}</p>\n                  </div>\n                  \n                  {result.guidance.futureOutlook && (\n                    <div>\n                      <h5 className=\"font-medium text-green-800 mb-2 flex items-center\">\n                        <Star className=\"mr-1 h-4 w-4\" />\n                        Future Outlook\n                      </h5>\n                      <p className=\"text-sm text-secondary\">{result.guidance.futureOutlook}</p>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <h5 className=\"font-medium text-indigo-800 mb-2 flex items-center\">\n                      <Target className=\"mr-1 h-4 w-4\" />\n                      Advice\n                    </h5>\n                    <p className=\"text-sm text-secondary\">{result.guidance.advice}</p>\n                  </div>\n                  \n                  {result.guidance.outcome && (\n                    <div className=\"md:col-span-2\">\n                      <h5 className=\"font-medium text-emerald-800 mb-2 flex items-center\">\n                        <Heart className=\"mr-1 h-4 w-4\" />\n                        Potential Outcome\n                      </h5>\n                      <p className=\"text-sm text-secondary\">{result.guidance.outcome}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Steps */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-primary mb-4 flex items-center\">\n                  <ArrowRight className=\"mr-2 h-5 w-5 text-green-600\" />\n                  Action Steps\n                </h4>\n                <ul className=\"space-y-3\">\n                  {result.actionSteps.map((step, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <span className=\"flex-shrink-0 w-6 h-6 bg-green-100 text-green-600 rounded-full flex items-center justify-center text-sm font-medium mr-3\">\n                        {index + 1}\n                      </span>\n                      <span className=\"text-sm text-secondary\">{step}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Reflection */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-semibold text-primary mb-4 flex items-center\">\n                  <Sparkles className=\"mr-2 h-5 w-5 text-yellow-600\" />\n                  Reflection\n                </h4>\n                <p className=\"text-secondary leading-relaxed\">\n                  {result.reflection}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Post-Analysis Chat */}\n          {analysisId && (\n            <div className=\"mb-12\">\n              <PostAnalysisChat\n                analysisId={analysisId}\n                analysisType=\"tarot\"\n                analysisData={result}\n                isAuthenticated={isAuthenticated}\n                onLoginRequired={onLoginRequired || (() => {})}\n              />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"text-center\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleDownloadReport}\n                className=\"bg-accent hover:bg-blue-600\"\n                data-testid=\"button-download-tarot-report\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Full Reading\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleShareResults}\n                data-testid=\"button-share-tarot-results\"\n              >\n                <Share className=\"mr-2 h-4 w-4\" />\n                Share Reading\n              </Button>\n              <Button \n                variant=\"ghost\"\n                onClick={onAnalyzeAnother}\n                className=\"text-accent hover:text-blue-600\"\n                data-testid=\"button-new-tarot-reading\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                New Reading\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":12675},"client/src/components/celestial-background.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nexport function CelestialBackground() {\n  const starsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!starsRef.current) return;\n\n    // Create stars\n    const createStars = () => {\n      const starsContainer = starsRef.current;\n      if (!starsContainer) return;\n\n      for (let i = 0; i < 100; i++) {\n        const star = document.createElement('div');\n        star.className = 'star';\n        star.style.left = Math.random() * 100 + '%';\n        star.style.top = Math.random() * 100 + '%';\n        star.style.width = Math.random() * 3 + 1 + 'px';\n        star.style.height = star.style.width;\n        star.style.animationDelay = Math.random() * 3 + 's';\n        star.style.animationDuration = (Math.random() * 3 + 2) + 's';\n        starsContainer.appendChild(star);\n      }\n    };\n\n    createStars();\n\n    // Cleanup\n    return () => {\n      if (starsRef.current) {\n        starsRef.current.innerHTML = '';\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"celestial-bg\">\n      {/* Animated Stars */}\n      <div ref={starsRef} className=\"stars\"></div>\n      \n      {/* Nebula Effects */}\n      <div className=\"nebula nebula-1\"></div>\n      <div className=\"nebula nebula-2\"></div>\n      <div className=\"nebula nebula-3\"></div>\n      \n      {/* Constellation SVG */}\n      <svg className=\"constellation w-full h-full absolute top-0 left-0\" viewBox=\"0 0 1920 1080\">\n        {/* Orion-like constellation */}\n        <g className=\"constellation-group\">\n          <line x1=\"300\" y1=\"200\" x2=\"450\" y2=\"280\" className=\"constellation-line\" />\n          <line x1=\"450\" y1=\"280\" x2=\"600\" y2=\"220\" className=\"constellation-line\" />\n          <line x1=\"600\" y1=\"220\" x2=\"750\" y2=\"300\" className=\"constellation-line\" />\n          <line x1=\"350\" y1=\"350\" x2=\"500\" y2=\"400\" className=\"constellation-line\" />\n          <line x1=\"500\" y1=\"400\" x2=\"650\" y2=\"380\" className=\"constellation-line\" />\n          <line x1=\"400\" y1=\"500\" x2=\"550\" y2=\"520\" className=\"constellation-line\" />\n          <line x1=\"550\" y1=\"520\" x2=\"700\" y2=\"510\" className=\"constellation-line\" />\n          \n          {/* Constellation stars */}\n          <circle cx=\"300\" cy=\"200\" r=\"3\" fill=\"var(--mystical-gold)\" className=\"constellation-star\" />\n          <circle cx=\"450\" cy=\"280\" r=\"4\" fill=\"var(--mystical-silver)\" className=\"constellation-star\" />\n          <circle cx=\"600\" cy=\"220\" r=\"3\" fill=\"var(--mystical-gold)\" className=\"constellation-star\" />\n          <circle cx=\"750\" cy=\"300\" r=\"2\" fill=\"var(--mystical-silver)\" className=\"constellation-star\" />\n          <circle cx=\"350\" cy=\"350\" r=\"3\" fill=\"var(--mystical-violet)\" className=\"constellation-star\" />\n          <circle cx=\"500\" cy=\"400\" r=\"4\" fill=\"var(--mystical-gold)\" className=\"constellation-star\" />\n          <circle cx=\"650\" cy=\"380\" r=\"3\" fill=\"var(--mystical-silver)\" className=\"constellation-star\" />\n          <circle cx=\"400\" cy=\"500\" r=\"2\" fill=\"var(--mystical-violet)\" className=\"constellation-star\" />\n          <circle cx=\"550\" cy=\"520\" r=\"3\" fill=\"var(--mystical-gold)\" className=\"constellation-star\" />\n          <circle cx=\"700\" cy=\"510\" r=\"3\" fill=\"var(--mystical-silver)\" className=\"constellation-star\" />\n        </g>\n\n        {/* Second constellation */}\n        <g className=\"constellation-group\" style={{animationDelay: '3s'}}>\n          <line x1=\"1200\" y1=\"150\" x2=\"1300\" y2=\"200\" className=\"constellation-line\" />\n          <line x1=\"1300\" y1=\"200\" x2=\"1400\" y2=\"180\" className=\"constellation-line\" />\n          <line x1=\"1400\" y1=\"180\" x2=\"1500\" y2=\"250\" className=\"constellation-line\" />\n          <line x1=\"1250\" y1=\"300\" x2=\"1350\" y2=\"350\" className=\"constellation-line\" />\n          <line x1=\"1350\" y1=\"350\" x2=\"1450\" y2=\"320\" className=\"constellation-line\" />\n          \n          <circle cx=\"1200\" cy=\"150\" r=\"3\" fill=\"var(--mystical-indigo)\" className=\"constellation-star\" />\n          <circle cx=\"1300\" cy=\"200\" r=\"4\" fill=\"var(--mystical-gold)\" className=\"constellation-star\" />\n          <circle cx=\"1400\" cy=\"180\" r=\"3\" fill=\"var(--mystical-silver)\" className=\"constellation-star\" />\n          <circle cx=\"1500\" cy=\"250\" r=\"2\" fill=\"var(--mystical-violet)\" className=\"constellation-star\" />\n          <circle cx=\"1250\" cy=\"300\" r=\"3\" fill=\"var(--mystical-indigo)\" className=\"constellation-star\" />\n          <circle cx=\"1350\" cy=\"350\" r=\"4\" fill=\"var(--mystical-gold)\" className=\"constellation-star\" />\n          <circle cx=\"1450\" cy=\"320\" r=\"3\" fill=\"var(--mystical-silver)\" className=\"constellation-star\" />\n        </g>\n      </svg>\n    </div>\n  );\n}","size_bytes":4586},"client/src/components/magical-orb.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport function MagicalOrb() {\n  const [isHovered, setIsHovered] = useState(false);\n  const [clicks, setClicks] = useState(0);\n\n  const handleClick = () => {\n    setClicks(prev => prev + 1);\n    \n    // Create magical particles effect\n    const orb = document.querySelector('.magical-orb');\n    if (orb) {\n      for (let i = 0; i < 6; i++) {\n        const particle = document.createElement('div');\n        particle.style.position = 'absolute';\n        particle.style.width = '4px';\n        particle.style.height = '4px';\n        particle.style.background = 'var(--mystical-gold)';\n        particle.style.borderRadius = '50%';\n        particle.style.pointerEvents = 'none';\n        particle.style.left = '50%';\n        particle.style.top = '50%';\n        \n        const angle = (i * 60) * Math.PI / 180;\n        const distance = 100;\n        const endX = Math.cos(angle) * distance;\n        const endY = Math.sin(angle) * distance;\n        \n        particle.style.animation = `\n          particleFloat 1s ease-out forwards\n        `;\n        \n        // Add custom animation\n        particle.style.setProperty('--end-x', endX + 'px');\n        particle.style.setProperty('--end-y', endY + 'px');\n        \n        orb.appendChild(particle);\n        \n        setTimeout(() => {\n          orb.removeChild(particle);\n        }, 1000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Add particle animation CSS\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes particleFloat {\n        0% {\n          transform: translate(-50%, -50%) scale(1);\n          opacity: 1;\n        }\n        100% {\n          transform: translate(calc(-50% + var(--end-x)), calc(-50% + var(--end-y))) scale(0);\n          opacity: 0;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n\n    return () => {\n      document.head.removeChild(style);\n    };\n  }, []);\n\n  return (\n    <div \n      className=\"magical-orb\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onClick={handleClick}\n      title={`✨ Mystical Energy: ${clicks} clicks`}\n      style={{\n        position: 'fixed',\n        top: '50%',\n        right: '50px',\n        transform: 'translateY(-50%)',\n        zIndex: 1000,\n      }}\n    >\n      {/* Inner glow effect */}\n      <div \n        style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '30px',\n          height: '30px',\n          borderRadius: '50%',\n          background: isHovered \n            ? 'radial-gradient(circle, var(--mystical-gold), var(--mystical-violet))' \n            : 'radial-gradient(circle, var(--mystical-silver), var(--mystical-purple))',\n          transition: 'all 0.3s ease',\n          opacity: 0.8,\n        }}\n      />\n      \n      {/* Rune symbol */}\n      <div \n        style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          fontSize: '20px',\n          color: 'var(--mystical-gold)',\n          fontFamily: 'var(--font-mystical)',\n          textShadow: '0 0 10px var(--mystical-gold)',\n          transition: 'all 0.3s ease',\n        }}\n      >\n        ⚡\n      </div>\n    </div>\n  );\n}","size_bytes":3330},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { PalmAnalysisInterface } from \"@/components/palm-analysis-interface\";\nimport { AstrologyAnalysisInterface } from \"@/components/astrology-analysis-interface\";\nimport { VastuAnalysisInterface } from \"@/components/vastu-analysis-interface\";\nimport { NumerologyAnalysisInterface } from \"@/components/numerology-analysis-interface\";\nimport { TarotAnalysisInterface } from \"@/components/tarot-analysis-interface\";\nimport { AiChatInterface } from \"@/components/ai-chat-interface\";\nimport { AnalysisResults } from \"@/components/analysis-results\";\nimport { AstrologyResults } from \"@/components/astrology-results\";\nimport { VastuResults } from \"@/components/vastu-results\";\nimport { NumerologyResults } from \"@/components/numerology-results\";\nimport { TarotResults } from \"@/components/tarot-results\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/components/auth/auth-context\";\nimport { Hand, Stars, Home as HomeIcon, Calculator, Zap, User, Sparkles, MessageCircle } from \"lucide-react\";\nimport { PalmAnalysisResult, AstrologyAnalysisResult, AstrologyInput, VastuAnalysisResult, VastuInput, NumerologyAnalysisResult, NumerologyInput, TarotAnalysisResult, TarotInput } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"palm\");\n  \n  const isAuthenticated = !!user;\n  \n  // Palm analysis state\n  const [palmAnalysisResult, setPalmAnalysisResult] = useState<PalmAnalysisResult | null>(null);\n  const [palmImageUrl, setPalmImageUrl] = useState<string | null>(null);\n  const [palmAnalysisId, setPalmAnalysisId] = useState<string | null>(null);\n  \n  // Astrology analysis state\n  const [astrologyAnalysisResult, setAstrologyAnalysisResult] = useState<AstrologyAnalysisResult | null>(null);\n  const [astrologyInputData, setAstrologyInputData] = useState<AstrologyInput | null>(null);\n  const [astrologyAnalysisId, setAstrologyAnalysisId] = useState<string | null>(null);\n  \n  // Vastu analysis state\n  const [vastuAnalysisResult, setVastuAnalysisResult] = useState<VastuAnalysisResult | null>(null);\n  const [vastuInputData, setVastuInputData] = useState<VastuInput | null>(null);\n  const [vastuImageUrl, setVastuImageUrl] = useState<string | null>(null);\n  const [vastuAnalysisId, setVastuAnalysisId] = useState<string | null>(null);\n\n  // Numerology analysis state\n  const [numerologyAnalysisResult, setNumerologyAnalysisResult] = useState<NumerologyAnalysisResult | null>(null);\n  const [numerologyInputData, setNumerologyInputData] = useState<NumerologyInput | null>(null);\n  const [numerologyAnalysisId, setNumerologyAnalysisId] = useState<string | null>(null);\n\n  // Tarot analysis state\n  const [tarotAnalysisResult, setTarotAnalysisResult] = useState<TarotAnalysisResult | null>(null);\n  const [tarotInputData, setTarotInputData] = useState<TarotInput | null>(null);\n  const [tarotAnalysisId, setTarotAnalysisId] = useState<string | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Palm analysis handlers\n  const handlePalmAnalysisComplete = (result: PalmAnalysisResult, imageUrl: string, analysisId: string) => {\n    setPalmAnalysisResult(result);\n    setPalmImageUrl(imageUrl);\n    setPalmAnalysisId(analysisId);\n    scrollToResults();\n  };\n\n  const handlePalmAnalyzeAnother = () => {\n    setPalmAnalysisResult(null);\n    setPalmImageUrl(null);\n    setPalmAnalysisId(null);\n    scrollToAnalysis();\n  };\n\n  // Astrology analysis handlers\n  const handleAstrologyAnalysisComplete = (result: AstrologyAnalysisResult, inputData: AstrologyInput, analysisId: string) => {\n    setAstrologyAnalysisResult(result);\n    setAstrologyInputData(inputData);\n    setAstrologyAnalysisId(analysisId);\n    scrollToResults();\n  };\n\n  const handleAstrologyAnalyzeAnother = () => {\n    setAstrologyAnalysisResult(null);\n    setAstrologyInputData(null);\n    setAstrologyAnalysisId(null);\n    scrollToAnalysis();\n  };\n\n  // Vastu analysis handlers\n  const handleVastuAnalysisComplete = (result: VastuAnalysisResult, inputData: VastuInput, analysisId: string, imageUrl?: string) => {\n    setVastuAnalysisResult(result);\n    setVastuInputData(inputData);\n    setVastuAnalysisId(analysisId);\n    setVastuImageUrl(imageUrl || null);\n    scrollToResults();\n  };\n\n  const handleVastuAnalyzeAnother = () => {\n    setVastuAnalysisResult(null);\n    setVastuInputData(null);\n    setVastuAnalysisId(null);\n    setVastuImageUrl(null);\n    scrollToAnalysis();\n  };\n\n  // Numerology analysis handlers\n  const handleNumerologyAnalysisComplete = (result: NumerologyAnalysisResult, inputData: NumerologyInput, analysisId: string) => {\n    setNumerologyAnalysisResult(result);\n    setNumerologyInputData(inputData);\n    setNumerologyAnalysisId(analysisId);\n    scrollToResults();\n  };\n\n  const handleNumerologyAnalyzeAnother = () => {\n    setNumerologyAnalysisResult(null);\n    setNumerologyInputData(null);\n    setNumerologyAnalysisId(null);\n    scrollToAnalysis();\n  };\n\n  // Tarot analysis handlers\n  const handleTarotAnalysisComplete = (result: TarotAnalysisResult, inputData: TarotInput, analysisId: string) => {\n    setTarotAnalysisResult(result);\n    setTarotInputData(inputData);\n    setTarotAnalysisId(analysisId);\n    scrollToResults();\n  };\n\n  const handleTarotAnalyzeAnother = () => {\n    setTarotAnalysisResult(null);\n    setTarotInputData(null);\n    setTarotAnalysisId(null);\n    scrollToAnalysis();\n  };\n\n  const scrollToResults = () => {\n    setTimeout(() => {\n      const resultsSection = document.getElementById(\"results-section\");\n      if (resultsSection) {\n        resultsSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n      }\n    }, 100);\n  };\n\n  const scrollToAnalysis = () => {\n    const analysisSection = document.getElementById(\"analysis-section\");\n    if (analysisSection) {\n      analysisSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  // Check if any results exist\n  const hasAnyResults = palmAnalysisResult || astrologyAnalysisResult || vastuAnalysisResult || numerologyAnalysisResult || tarotAnalysisResult;\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n\n  // Don't render if not authenticated (will redirect)\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Dashboard Header */}\n      <section className=\"pt-24 pb-12 subtle-bg\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"w-16 h-16 accent-gradient rounded-full flex items-center justify-center shadow-lg\">\n                <User className=\"h-8 w-8 text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl font-heading font-bold text-foreground mb-4\">\n              Welcome {user?.firstName ? `, ${user.firstName}` : ''}!\n            </h1>\n            <p className=\"text-xl text-secondary-foreground mb-6\">\n              Your personal mystical insights dashboard. Choose an analysis type to begin your journey of discovery.\n            </p>\n            <div className=\"flex items-center justify-center gap-2\">\n              <Sparkles className=\"h-5 w-5 text-gradient\" />\n              <span className=\"text-sm text-muted-foreground\">All analysis types available</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Analysis Section */}\n      <section id=\"analysis-section\" className=\"py-20 bg-card\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            \n            {/* Section Header */}\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-heading font-bold text-foreground mb-4\">Choose Your Analysis</h2>\n              <p className=\"text-lg text-secondary-foreground max-w-2xl mx-auto\">\n                Select from our comprehensive range of mystical analysis tools. Each provides unique insights into different aspects of your life.\n              </p>\n            </div>\n\n            {/* Analysis Layout with Sidebar */}\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <div className=\"flex gap-8\">\n                \n                {/* Main Content Area */}\n                <div className=\"flex-1\">\n                  <div className=\"clean-card p-8\">\n                    <TabsContent value=\"palm\" className=\"mt-0\">\n                      <PalmAnalysisInterface onAnalysisComplete={handlePalmAnalysisComplete} />\n                    </TabsContent>\n                    \n                    <TabsContent value=\"astrology\" className=\"mt-0\">\n                      <AstrologyAnalysisInterface onAnalysisComplete={handleAstrologyAnalysisComplete} />\n                    </TabsContent>\n                    \n                    <TabsContent value=\"vastu\" className=\"mt-0\">\n                      <VastuAnalysisInterface onAnalysisComplete={handleVastuAnalysisComplete} />\n                    </TabsContent>\n                    \n                    <TabsContent value=\"numerology\" className=\"mt-0\">\n                      <NumerologyAnalysisInterface onAnalysisComplete={handleNumerologyAnalysisComplete} />\n                    </TabsContent>\n                    \n                    <TabsContent value=\"tarot\" className=\"mt-0\">\n                      <TarotAnalysisInterface onAnalysisComplete={handleTarotAnalysisComplete} />\n                    </TabsContent>\n                    \n                    <TabsContent value=\"ai-chat\" className=\"mt-0\">\n                      <AiChatInterface />\n                    </TabsContent>\n                  </div>\n                </div>\n\n                {/* Right Sidebar Navigation */}\n                <div className=\"w-80 flex-shrink-0\">\n                  <div className=\"sticky top-8\">\n                    <div className=\"clean-card p-6\">\n                      <h3 className=\"text-lg font-semibold text-foreground mb-6\">Analysis Tools</h3>\n                      <TabsList className=\"flex flex-col h-auto p-0 bg-transparent gap-2 w-full\">\n                        <TabsTrigger \n                          value=\"palm\" \n                          className=\"w-full justify-start gap-3 p-4 h-auto data-[state=active]:bg-accent data-[state=active]:text-accent-foreground text-secondary-foreground hover:text-foreground hover:bg-muted transition-all\"\n                          data-testid=\"tab-palm\"\n                        >\n                          <Hand className=\"h-5 w-5\" />\n                          <div className=\"text-left\">\n                            <div className=\"font-medium\">Palm Reading</div>\n                            <div className=\"text-xs text-muted-foreground\">Analyze your palm lines</div>\n                          </div>\n                        </TabsTrigger>\n                        \n                        <TabsTrigger \n                          value=\"astrology\" \n                          className=\"w-full justify-start gap-3 p-4 h-auto data-[state=active]:bg-accent data-[state=active]:text-accent-foreground text-secondary-foreground hover:text-foreground hover:bg-muted transition-all\"\n                          data-testid=\"tab-astrology\"\n                        >\n                          <Stars className=\"h-5 w-5\" />\n                          <div className=\"text-left\">\n                            <div className=\"font-medium\">Astrology</div>\n                            <div className=\"text-xs text-muted-foreground\">Birth chart insights</div>\n                          </div>\n                        </TabsTrigger>\n                        \n                        <TabsTrigger \n                          value=\"vastu\" \n                          className=\"w-full justify-start gap-3 p-4 h-auto data-[state=active]:bg-accent data-[state=active]:text-accent-foreground text-secondary-foreground hover:text-foreground hover:bg-muted transition-all\"\n                          data-testid=\"tab-vastu\"\n                        >\n                          <HomeIcon className=\"h-5 w-5\" />\n                          <div className=\"text-left\">\n                            <div className=\"font-medium\">Vastu</div>\n                            <div className=\"text-xs text-muted-foreground\">Space energy analysis</div>\n                          </div>\n                        </TabsTrigger>\n                        \n                        <TabsTrigger \n                          value=\"numerology\" \n                          className=\"w-full justify-start gap-3 p-4 h-auto data-[state=active]:bg-accent data-[state=active]:text-accent-foreground text-secondary-foreground hover:text-foreground hover:bg-muted transition-all\"\n                          data-testid=\"tab-numerology\"\n                        >\n                          <Calculator className=\"h-5 w-5\" />\n                          <div className=\"text-left\">\n                            <div className=\"font-medium\">Numerology</div>\n                            <div className=\"text-xs text-muted-foreground\">Numbers and destiny</div>\n                          </div>\n                        </TabsTrigger>\n                        \n                        <TabsTrigger \n                          value=\"tarot\" \n                          className=\"w-full justify-start gap-3 p-4 h-auto data-[state=active]:bg-accent data-[state=active]:text-accent-foreground text-secondary-foreground hover:text-foreground hover:bg-muted transition-all\"\n                          data-testid=\"tab-tarot\"\n                        >\n                          <Zap className=\"h-5 w-5\" />\n                          <div className=\"text-left\">\n                            <div className=\"font-medium\">Tarot</div>\n                            <div className=\"text-xs text-muted-foreground\">Card divination</div>\n                          </div>\n                        </TabsTrigger>\n\n                        <TabsTrigger \n                          value=\"ai-chat\" \n                          className=\"w-full justify-start gap-3 p-4 h-auto data-[state=active]:bg-accent data-[state=active]:text-accent-foreground text-secondary-foreground hover:text-foreground hover:bg-muted transition-all\"\n                          data-testid=\"tab-ai-chat\"\n                        >\n                          <MessageCircle className=\"h-5 w-5\" />\n                          <div className=\"text-left\">\n                            <div className=\"font-medium\">AI Chat</div>\n                            <div className=\"text-xs text-muted-foreground\">Mystical guidance</div>\n                          </div>\n                        </TabsTrigger>\n                        \n                      </TabsList>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n            </Tabs>\n          </div>\n        </div>\n      </section>\n\n      {/* Results Section */}\n      {hasAnyResults && (\n        <div id=\"results-section\">\n          {palmAnalysisResult && palmImageUrl && (\n            <AnalysisResults \n              result={palmAnalysisResult}\n              imageUrl={palmImageUrl}\n              onAnalyzeAnother={handlePalmAnalyzeAnother}\n              analysisId={palmAnalysisId || undefined}\n              isAuthenticated={isAuthenticated}\n            />\n          )}\n          {astrologyAnalysisResult && astrologyInputData && (\n            <AstrologyResults \n              result={astrologyAnalysisResult}\n              inputData={astrologyInputData}\n              onAnalyzeAnother={handleAstrologyAnalyzeAnother}\n              analysisId={astrologyAnalysisId || undefined}\n              isAuthenticated={isAuthenticated}\n            />\n          )}\n          {vastuAnalysisResult && vastuInputData && (\n            <VastuResults \n              result={vastuAnalysisResult}\n              inputData={vastuInputData}\n              imageUrl={vastuImageUrl || undefined}\n              onAnalyzeAnother={handleVastuAnalyzeAnother}\n              analysisId={vastuAnalysisId || undefined}\n              isAuthenticated={isAuthenticated}\n            />\n          )}\n          \n          {numerologyAnalysisResult && numerologyInputData && (\n            <NumerologyResults \n              result={numerologyAnalysisResult} \n              inputData={numerologyInputData}\n              onAnalyzeAnother={handleNumerologyAnalyzeAnother}\n              analysisId={numerologyAnalysisId || undefined}\n              isAuthenticated={isAuthenticated}\n            />\n          )}\n          \n          {tarotAnalysisResult && tarotInputData && (\n            <TarotResults \n              result={tarotAnalysisResult} \n              inputData={tarotInputData}\n              onAnalyzeAnother={handleTarotAnalyzeAnother}\n              analysisId={tarotAnalysisId || undefined}\n              isAuthenticated={isAuthenticated}\n            />\n          )}\n        </div>\n      )}\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17782},"client/src/components/ai-chat-interface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  MessageCircle, \n  Send, \n  Loader2, \n  Sparkles, \n  Clock, \n  CreditCard, \n  AlertCircle,\n  Bot,\n  User\n} from \"lucide-react\";\nimport { RazorpayPayment } from \"./razorpay-payment\";\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface User {\n  aiChatCredits: number;\n  aiChatMinutesUsed: number;\n}\n\nexport function AiChatInterface() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [showPayment, setShowPayment] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get user data including AI chat credits\n  const { data: user, isLoading: userLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai-chat\", { message });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Add AI response to messages\n      const aiMessage: ChatMessage = {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: data.response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // Update credits in user query\n      queryClient.setQueryData([\"/api/auth/me\"], (oldData: any) => ({\n        ...oldData,\n        aiChatCredits: data.creditsRemaining\n      }));\n\n      toast({\n        title: \"Response Generated\",\n        description: `${data.creditsRemaining} credits remaining`,\n      });\n    },\n    onError: (error: any) => {\n      if (error.needsPayment) {\n        setShowPayment(true);\n        toast({\n          title: \"Credits Needed\",\n          description: \"Purchase AI chat credits to continue the conversation\",\n          variant: \"destructive\"\n        });\n      } else {\n        toast({\n          title: \"Chat Error\",\n          description: error.message || \"Failed to send message\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim() || sendMessageMutation.isPending) return;\n\n    // Add user message to messages\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: 'user', \n      content: inputMessage.trim(),\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Send to API\n    sendMessageMutation.mutate(inputMessage.trim());\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    setShowPayment(false);\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    toast({\n      title: \"Credits Added!\",\n      description: \"You can now continue your AI chat session\",\n    });\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-accent\" />\n      </div>\n    );\n  }\n\n  // Show payment interface if no credits or user explicitly requested it\n  if (!user?.aiChatCredits || showPayment) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"border-accent/20\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mb-4\">\n              <MessageCircle className=\"h-8 w-8 text-accent\" />\n            </div>\n            <CardTitle className=\"text-2xl text-foreground\">AI Mystical Assistant</CardTitle>\n            <CardDescription>\n              {user?.aiChatCredits ? (\n                \"Get more credits to continue your mystical journey\"\n              ) : (\n                \"Get personalized mystical guidance powered by AI. Purchase credits to start chatting.\"\n              )}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center space-y-4\">\n              {user?.aiChatCredits ? (\n                <div className=\"flex items-center justify-center gap-4\">\n                  <Badge variant=\"secondary\" className=\"text-sm\">\n                    <CreditCard className=\"h-4 w-4 mr-1\" />\n                    {user.aiChatCredits} credits remaining\n                  </Badge>\n                  <Button\n                    onClick={() => setShowPayment(false)}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    Back to Chat\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center gap-2 text-orange-600 dark:text-orange-400\">\n                  <AlertCircle className=\"h-5 w-5\" />\n                  <span className=\"text-sm font-medium\">No AI chat credits available</span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <RazorpayPayment onPaymentSuccess={handlePaymentSuccess} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with Credit Info */}\n      <Card className=\"border-accent/20\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-accent/10 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"h-5 w-5 text-accent\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">AI Mystical Assistant</CardTitle>\n                <CardDescription>Your guide to mystical insights</CardDescription>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"secondary\" className=\"text-sm\">\n                <CreditCard className=\"h-4 w-4 mr-1\" />\n                {user.aiChatCredits} credits\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                <Clock className=\"h-4 w-4 mr-1\" />\n                {user.aiChatMinutesUsed.toFixed(1)}m used\n              </Badge>\n              <Button\n                onClick={() => setShowPayment(true)}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-buy-credits\"\n              >\n                Buy More Credits\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Chat Interface */}\n      <Card className=\"h-[600px] flex flex-col\">\n        <CardContent className=\"flex-1 flex flex-col p-0\">\n          {/* Messages Area */}\n          <ScrollArea className=\"flex-1 p-6\">\n            <div className=\"space-y-4\">\n              {messages.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-12\">\n                  <Bot className=\"h-12 w-12 mx-auto mb-4 text-accent/50\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Welcome to AI Mystical Chat</h3>\n                  <p className=\"text-sm max-w-md mx-auto\">\n                    Ask me anything about spirituality, mysticism, or seek guidance on your life's journey. \n                    Each message uses 1 credit.\n                  </p>\n                </div>\n              ) : (\n                messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div className={`flex gap-3 max-w-[80%] ${message.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                        message.role === 'user' \n                          ? 'bg-accent text-accent-foreground' \n                          : 'bg-muted text-muted-foreground'\n                      }`}>\n                        {message.role === 'user' ? (\n                          <User className=\"h-4 w-4\" />\n                        ) : (\n                          <Bot className=\"h-4 w-4\" />\n                        )}\n                      </div>\n                      <div className={`rounded-lg px-4 py-3 ${\n                        message.role === 'user'\n                          ? 'bg-accent text-accent-foreground'\n                          : 'bg-muted text-foreground'\n                      }`}>\n                        <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                        <p className=\"text-xs opacity-70 mt-1\">\n                          {message.timestamp.toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n          </ScrollArea>\n\n          {/* Input Area */}\n          <div className=\"border-t p-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Ask me anything mystical...\"\n                disabled={sendMessageMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"input-ai-chat-message\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!inputMessage.trim() || sendMessageMutation.isPending}\n                size=\"icon\"\n                data-testid=\"button-send-ai-chat\"\n              >\n                {sendMessageMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <Send className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Each message uses 1 credit • {user.aiChatCredits} credits remaining\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11011},"client/src/components/cosmic-loader.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Sparkles, Stars, Zap } from \"lucide-react\";\n\ninterface CosmicLoaderProps {\n  analysisType?: 'palm' | 'astrology' | 'vastu' | 'numerology' | 'tarot';\n  message?: string;\n  isVisible?: boolean;\n}\n\nconst analysisMessages = {\n  palm: [\n    \"Reading the lines of destiny...\",\n    \"Interpreting the ancient palm wisdom...\",\n    \"Unveiling your life's journey...\",\n    \"Discovering your inner strengths...\"\n  ],\n  astrology: [\n    \"Aligning with celestial energies...\",\n    \"Mapping your cosmic blueprint...\",\n    \"Reading the stars' ancient messages...\",\n    \"Channeling planetary influences...\"\n  ],\n  vastu: [\n    \"Analyzing energy flow patterns...\",\n    \"Harmonizing spatial vibrations...\",\n    \"Balancing elemental forces...\",\n    \"Optimizing cosmic alignment...\"\n  ],\n  numerology: [\n    \"Calculating mystical number patterns...\",\n    \"Decoding numerical vibrations...\",\n    \"Unlocking hidden frequencies...\",\n    \"Revealing sacred geometries...\"\n  ],\n  tarot: [\n    \"Shuffling the cosmic deck...\",\n    \"Drawing from universal wisdom...\",\n    \"Connecting with ancient archetypes...\",\n    \"Channeling mystical insights...\"\n  ]\n};\n\nexport function CosmicLoader({ analysisType = 'palm', message, isVisible = true }: CosmicLoaderProps) {\n  const [currentMessage, setCurrentMessage] = useState(0);\n  const [particles, setParticles] = useState<Array<{id: number, x: number, y: number, delay: number, duration: number}>>([]);\n\n  const messages = message ? [message] : analysisMessages[analysisType];\n\n  useEffect(() => {\n    // Generate random particles\n    const newParticles = Array.from({ length: 20 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      delay: Math.random() * 2,\n      duration: 2 + Math.random() * 3\n    }));\n    setParticles(newParticles);\n\n    // Cycle through messages\n    if (messages.length > 1) {\n      const interval = setInterval(() => {\n        setCurrentMessage(prev => (prev + 1) % messages.length);\n      }, 3000);\n      return () => clearInterval(interval);\n    }\n  }, [analysisType, messages.length]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center\">\n      <Card className=\"relative overflow-hidden bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 border-purple-500 shadow-2xl\">\n        <CardContent className=\"p-12 text-center relative\">\n          {/* Animated background stars */}\n          <div className=\"absolute inset-0 overflow-hidden\">\n            {particles.map(particle => (\n              <div\n                key={particle.id}\n                className=\"absolute w-1 h-1 bg-white rounded-full animate-pulse\"\n                style={{\n                  left: `${particle.x}%`,\n                  top: `${particle.y}%`,\n                  animationDelay: `${particle.delay}s`,\n                  animationDuration: `${particle.duration}s`\n                }}\n              />\n            ))}\n            \n            {/* Larger floating stars */}\n            <div className=\"absolute top-6 left-8 animate-float\">\n              <Stars className=\"h-4 w-4 text-yellow-300 opacity-70\" />\n            </div>\n            <div className=\"absolute top-12 right-12 animate-float-delayed\">\n              <Sparkles className=\"h-3 w-3 text-blue-300 opacity-60\" />\n            </div>\n            <div className=\"absolute bottom-8 left-16 animate-float\">\n              <Zap className=\"h-3 w-3 text-purple-300 opacity-50\" />\n            </div>\n            <div className=\"absolute bottom-16 right-8 animate-float-delayed\">\n              <Stars className=\"h-5 w-5 text-indigo-300 opacity-80\" />\n            </div>\n          </div>\n\n          {/* Main content */}\n          <div className=\"relative z-10\">\n            {/* Central cosmic animation */}\n            <div className=\"relative mb-8\">\n              <div className=\"w-24 h-24 mx-auto relative\">\n                {/* Outer ring */}\n                <div className=\"absolute inset-0 border-4 border-purple-400 rounded-full animate-spin-slow opacity-60\"></div>\n                \n                {/* Middle ring */}\n                <div className=\"absolute inset-2 border-2 border-blue-400 rounded-full animate-spin-reverse opacity-80\"></div>\n                \n                {/* Inner glow */}\n                <div className=\"absolute inset-4 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full animate-pulse shadow-lg shadow-purple-500/50\"></div>\n                \n                {/* Central star */}\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <Sparkles className=\"h-8 w-8 text-white animate-pulse\" />\n                </div>\n              </div>\n\n              {/* Orbital particles */}\n              <div className=\"absolute inset-0 animate-spin-slow\">\n                <div className=\"absolute top-0 left-1/2 w-2 h-2 bg-yellow-400 rounded-full transform -translate-x-1/2 animate-pulse\"></div>\n              </div>\n              <div className=\"absolute inset-0 animate-spin-reverse\">\n                <div className=\"absolute bottom-0 right-1/2 w-1 h-1 bg-blue-400 rounded-full transform translate-x-1/2 animate-pulse\"></div>\n              </div>\n            </div>\n\n            {/* Loading message */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-2xl font-semibold text-white mb-2\">\n                Cosmic Analysis in Progress\n              </h3>\n              \n              <div className=\"h-6 flex items-center justify-center\">\n                <p \n                  key={currentMessage}\n                  className=\"text-purple-200 animate-fade-in text-lg\"\n                  data-testid=\"text-loading-message\"\n                >\n                  {messages[currentMessage]}\n                </p>\n              </div>\n\n              {/* Loading dots */}\n              <div className=\"flex justify-center space-x-2 mt-6\">\n                <div className=\"w-3 h-3 bg-purple-400 rounded-full animate-bounce\"></div>\n                <div className=\"w-3 h-3 bg-blue-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                <div className=\"w-3 h-3 bg-indigo-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n              </div>\n            </div>\n          </div>\n\n          {/* Shooting star effect */}\n          <div className=\"absolute top-0 left-0 w-full h-full overflow-hidden pointer-events-none\">\n            <div className=\"shooting-star\"></div>\n            <div className=\"shooting-star\" style={{animationDelay: '3s'}}></div>\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}","size_bytes":6792},"client/src/components/razorpay-payment.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Check, Clock, MessageCircle, Zap, Loader2, CheckCircle, CreditCard } from \"lucide-react\";\n\ninterface PaymentTier {\n  id: string;\n  name: string;\n  credits: number;\n  minutes: number;\n  price: number;\n  popular?: boolean;\n  description: string;\n  features: string[];\n}\n\nconst paymentTiers: PaymentTier[] = [\n  {\n    id: \"tier1\",\n    name: \"Starter\",\n    credits: 5,\n    minutes: 5,\n    price: 1,\n    description: \"Perfect for quick questions\",\n    features: [\n      \"5 minutes of AI chat\",\n      \"5 chat credits\",\n      \"Mystical guidance\",\n      \"24/7 availability\"\n    ]\n  },\n  {\n    id: \"tier2\",\n    name: \"Explorer\",\n    credits: 10,\n    minutes: 10,\n    price: 2.5,\n    popular: true,\n    description: \"Great for deeper insights\",\n    features: [\n      \"10 minutes of AI chat\",\n      \"10 chat credits\",\n      \"Extended conversations\",\n      \"Detailed guidance\",\n      \"Priority support\"\n    ]\n  },\n  {\n    id: \"tier3\",\n    name: \"Mystic\",\n    credits: 15,\n    minutes: 15,\n    price: 5,\n    description: \"Comprehensive spiritual guidance\",\n    features: [\n      \"15 minutes of AI chat\",\n      \"15 chat credits\",\n      \"Unlimited questions\",\n      \"Deep spiritual insights\",\n      \"Premium features\",\n      \"Expert guidance\"\n    ]\n  }\n];\n\ninterface RazorpayPaymentProps {\n  onPaymentSuccess: () => void;\n}\n\nexport function RazorpayPayment({ onPaymentSuccess }: RazorpayPaymentProps) {\n  const [selectedTier, setSelectedTier] = useState<PaymentTier | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [paymentStep, setPaymentStep] = useState<'processing' | 'success' | 'error'>('processing');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (tier: PaymentTier) => {\n      const response = await apiRequest(\"POST\", \"/api/payments/create-order\", {\n        amount: tier.price,\n        creditsRequested: tier.credits,\n        paymentTier: tier.id,\n        minutesGranted: tier.minutes\n      });\n      return response.json();\n    }\n  });\n\n  const verifyPaymentMutation = useMutation({\n    mutationFn: async (paymentData: { paymentId: string; tier: PaymentTier }) => {\n      // Simulate payment verification with mock data\n      const response = await apiRequest(\"POST\", \"/api/payments/verify\", {\n        razorpay_payment_id: `pay_mock_${Date.now()}`,\n        razorpay_order_id: `order_mock_${Date.now()}`,\n        razorpay_signature: `mock_signature_${Date.now()}`,\n        paymentId: paymentData.paymentId\n      });\n      return { response: response.json(), tier: paymentData.tier };\n    }\n  });\n\n  const handlePurchase = async (tier: PaymentTier) => {\n    setIsProcessing(true);\n    setSelectedTier(tier);\n    setShowPaymentModal(true);\n    setPaymentStep('processing');\n\n    try {\n      // Step 1: Create order\n      const orderData = await createOrderMutation.mutateAsync(tier);\n\n      // Step 2: Simulate payment processing delay (2-3 seconds)\n      await new Promise(resolve => setTimeout(resolve, 2500));\n\n      // Step 3: Process payment verification\n      await verifyPaymentMutation.mutateAsync({ \n        paymentId: orderData.paymentId, \n        tier \n      });\n\n      // Step 4: Show success\n      setPaymentStep('success');\n\n      // Step 5: Update UI after a short delay\n      setTimeout(() => {\n        toast({\n          title: \"Payment Successful! 🎉\",\n          description: `You've received ${tier.credits} AI chat credits (${tier.minutes} minutes)`,\n        });\n\n        // Invalidate user data to refresh credit balance\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n        setShowPaymentModal(false);\n        onPaymentSuccess();\n        \n        // Reset states\n        setIsProcessing(false);\n        setSelectedTier(null);\n        setPaymentStep('processing');\n      }, 1500);\n\n    } catch (error) {\n      setPaymentStep('error');\n      setTimeout(() => {\n        toast({\n          title: \"Payment Failed\",\n          description: \"Unable to process payment. Please try again.\",\n          variant: \"destructive\"\n        });\n        setShowPaymentModal(false);\n        setIsProcessing(false);\n        setSelectedTier(null);\n        setPaymentStep('processing');\n      }, 2000);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-2\">Choose Your AI Chat Plan</h2>\n        <p className=\"text-muted-foreground\">\n          Get instant access to our AI mystical assistant for personalized guidance\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {paymentTiers.map((tier) => (\n          <Card \n            key={tier.id} \n            className={`relative transition-all hover:scale-105 ${\n              tier.popular \n                ? 'border-accent shadow-lg ring-2 ring-accent ring-opacity-20' \n                : 'border-border'\n            }`}\n          >\n            {tier.popular && (\n              <Badge className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 bg-accent text-accent-foreground\">\n                Most Popular\n              </Badge>\n            )}\n            \n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-xl\">{tier.name}</CardTitle>\n              <CardDescription>{tier.description}</CardDescription>\n              <div className=\"mt-4\">\n                <span className=\"text-3xl font-bold text-foreground\">${tier.price}</span>\n                <span className=\"text-muted-foreground\"> USD</span>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-center space-x-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center\">\n                  <MessageCircle className=\"h-4 w-4 mr-1\" />\n                  {tier.credits} credits\n                </div>\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  {tier.minutes} minutes\n                </div>\n              </div>\n\n              <ul className=\"space-y-2\">\n                {tier.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-center text-sm\">\n                    <Check className=\"h-4 w-4 text-accent mr-2 flex-shrink-0\" />\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n\n              <Button\n                onClick={() => handlePurchase(tier)}\n                disabled={isProcessing}\n                className={`w-full ${\n                  tier.popular \n                    ? 'bg-accent hover:bg-accent/90' \n                    : 'bg-secondary hover:bg-secondary/90'\n                }`}\n                data-testid={`button-purchase-${tier.id}`}\n              >\n                {isProcessing && selectedTier?.id === tier.id ? (\n                  <>\n                    <Zap className=\"mr-2 h-4 w-4 animate-pulse\" />\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <Zap className=\"mr-2 h-4 w-4\" />\n                    Get {tier.name} Plan\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"text-center text-sm text-muted-foreground\">\n        <p>💳 Secure mock payment system (Demo mode)</p>\n        <p>✨ Credits are valid for 30 days from purchase</p>\n      </div>\n\n      {/* Mock Payment Modal */}\n      <Dialog open={showPaymentModal} onOpenChange={() => {}}>\n        <DialogContent className=\"sm:max-w-md\"  onPointerDownOutside={(e) => e.preventDefault()}>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              {paymentStep === 'processing' && \"Processing Payment\"}\n              {paymentStep === 'success' && \"Payment Successful!\"}\n              {paymentStep === 'error' && \"Payment Failed\"}\n            </DialogTitle>\n            <DialogDescription>\n              {paymentStep === 'processing' && `Processing your ${selectedTier?.name} plan purchase...`}\n              {paymentStep === 'success' && `Your ${selectedTier?.name} plan has been activated!`}\n              {paymentStep === 'error' && \"There was an issue processing your payment.\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex flex-col items-center py-6\">\n            {paymentStep === 'processing' && (\n              <div className=\"flex flex-col items-center space-y-4\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-accent\" />\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">Please wait...</p>\n                  <div className=\"flex items-center justify-center space-x-1\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {paymentStep === 'success' && (\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-medium text-foreground\">Payment Complete!</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedTier?.credits} credits added to your account\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {paymentStep === 'error' && (\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"w-16 h-16 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center\">\n                  <Zap className=\"h-8 w-8 text-red-600 dark:text-red-400\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-medium text-foreground\">Payment Failed</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Please try again or contact support\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {selectedTier && (\n            <div className=\"border-t pt-4\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Plan:</span>\n                <span className=\"font-medium\">{selectedTier.name}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Credits:</span>\n                <span className=\"font-medium\">{selectedTier.credits}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Amount:</span>\n                <span className=\"font-medium\">${selectedTier.price} USD</span>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12262},"client/src/components/command-palette-fab.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Badge } from '@/components/ui/badge';\nimport { Sparkles, Mic, Keyboard } from 'lucide-react';\n\ninterface CommandPaletteFABProps {\n  onClick: () => void;\n}\n\nexport function CommandPaletteFAB({ onClick }: CommandPaletteFABProps) {\n  const [showTooltip, setShowTooltip] = useState(true);\n\n  // Auto-hide tooltip after 5 seconds\n  React.useEffect(() => {\n    const timer = setTimeout(() => setShowTooltip(false), 5000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Tooltip open={showTooltip} onOpenChange={setShowTooltip}>\n        <TooltipTrigger asChild>\n          <Button\n            onClick={() => {\n              onClick();\n              setShowTooltip(false);\n            }}\n            className=\"h-14 w-14 rounded-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 shadow-2xl hover:shadow-purple-500/25 transition-all duration-300 hover:scale-110 group\"\n            data-testid=\"command-palette-fab\"\n          >\n            <div className=\"relative\">\n              <Sparkles className=\"h-6 w-6 text-white group-hover:animate-pulse\" />\n              <div className=\"absolute -top-1 -right-1\">\n                <div className=\"h-3 w-3 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full animate-pulse\" />\n              </div>\n            </div>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent \n          side=\"left\" \n          sideOffset={10}\n          className=\"bg-gradient-to-r from-purple-800 to-indigo-800 text-white border-purple-600 shadow-xl max-w-xs\"\n        >\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-4 w-4\" />\n              <span className=\"font-semibold\">Mystical Command Palette</span>\n            </div>\n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex items-center gap-2\">\n                <Keyboard className=\"h-3 w-3\" />\n                <span><kbd className=\"bg-purple-700 px-1 rounded text-xs\">Ctrl+K</kbd> to open</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Mic className=\"h-3 w-3\" />\n                <span><kbd className=\"bg-purple-700 px-1 rounded text-xs\">Ctrl+Shift+M</kbd> for voice</span>\n              </div>\n            </div>\n            <div className=\"pt-1 border-t border-purple-600\">\n              <span className=\"text-xs text-purple-200\">Navigate with voice or keyboard!</span>\n            </div>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n      \n      {/* Mystical background glow */}\n      <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-purple-600 to-indigo-600 opacity-20 animate-ping\" />\n      <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-purple-600 to-indigo-600 opacity-10 animate-pulse\" />\n    </div>\n  );\n}","size_bytes":3114},"client/src/components/command-palette.tsx":{"content":"import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { useLocation } from 'wouter';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  Mic, \n  MicOff, \n  Search, \n  Sparkles, \n  Navigation, \n  MessageCircle, \n  CreditCard, \n  Home, \n  BarChart3,\n  Hand,\n  Star,\n  Building,\n  Calculator,\n  Heart,\n  Bot,\n  Settings,\n  HelpCircle,\n  Zap,\n  Moon,\n  Sun\n} from 'lucide-react';\n\ninterface Command {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ElementType;\n  category: 'navigation' | 'analysis' | 'chat' | 'account' | 'help';\n  keywords: string[];\n  action: () => void;\n  shortcut?: string;\n}\n\ninterface CommandPaletteProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CommandPalette({ isOpen, onClose }: CommandPaletteProps) {\n  const [, setLocation] = useLocation();\n  const [query, setQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState<any | null>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      \n      recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript.toLowerCase();\n        setQuery(transcript);\n        setIsListening(false);\n        \n        // Try to execute command directly if it's a clear match\n        const matchedCommand = commands.find(cmd => \n          cmd.keywords.some(keyword => transcript.includes(keyword.toLowerCase()))\n        );\n        \n        if (matchedCommand) {\n          setTimeout(() => {\n            matchedCommand.action();\n            onClose();\n          }, 500);\n        }\n      };\n      \n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      \n      recognition.onerror = () => {\n        setIsListening(false);\n      };\n      \n      setRecognition(recognition);\n    }\n  }, []);\n\n  // Define commands\n  const commands: Command[] = useMemo(() => [\n    // Navigation Commands\n    {\n      id: 'go-home',\n      title: 'Go to Home',\n      description: 'Navigate to the landing page',\n      icon: Home,\n      category: 'navigation',\n      keywords: ['home', 'landing', 'start'],\n      shortcut: 'Ctrl+H',\n      action: () => setLocation('/')\n    },\n    {\n      id: 'go-dashboard',\n      title: 'Go to Dashboard',\n      description: 'Open your mystical dashboard',\n      icon: BarChart3,\n      category: 'navigation',\n      keywords: ['dashboard', 'main', 'overview'],\n      shortcut: 'Ctrl+D',\n      action: () => setLocation('/dashboard')\n    },\n    \n    // Analysis Commands  \n    {\n      id: 'palm-reading',\n      title: 'Start Palm Reading',\n      description: 'Begin a new palmistry analysis',\n      icon: Hand,\n      category: 'analysis',\n      keywords: ['palm', 'palmistry', 'reading', 'hand'],\n      action: () => {\n        setLocation('/dashboard');\n        // Focus palm tab after navigation\n        setTimeout(() => {\n          const palmTab = document.querySelector('[data-testid=\"tab-palm\"]') as HTMLElement;\n          if (palmTab) palmTab.click();\n        }, 100);\n      }\n    },\n    {\n      id: 'astrology-chart',\n      title: 'Create Astrology Chart',\n      description: 'Generate your astrological insights',\n      icon: Star,\n      category: 'analysis',\n      keywords: ['astrology', 'chart', 'horoscope', 'stars'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const astrologyTab = document.querySelector('[data-testid=\"tab-astrology\"]') as HTMLElement;\n          if (astrologyTab) astrologyTab.click();\n        }, 100);\n      }\n    },\n    {\n      id: 'vastu-analysis',\n      title: 'Vastu Analysis',\n      description: 'Analyze your space energy flow',\n      icon: Building,\n      category: 'analysis',\n      keywords: ['vastu', 'space', 'energy', 'home'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const vastuTab = document.querySelector('[data-testid=\"tab-vastu\"]') as HTMLElement;\n          if (vastuTab) vastuTab.click();\n        }, 100);\n      }\n    },\n    {\n      id: 'numerology',\n      title: 'Numerology Reading',\n      description: 'Discover your numbers destiny',\n      icon: Calculator,\n      category: 'analysis',\n      keywords: ['numerology', 'numbers', 'destiny', 'calculation'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const numerologyTab = document.querySelector('[data-testid=\"tab-numerology\"]') as HTMLElement;\n          if (numerologyTab) numerologyTab.click();\n        }, 100);\n      }\n    },\n    {\n      id: 'tarot-reading',\n      title: 'Tarot Reading',\n      description: 'Draw cards for spiritual guidance',\n      icon: Heart,\n      category: 'analysis',\n      keywords: ['tarot', 'cards', 'reading', 'guidance'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const tarotTab = document.querySelector('[data-testid=\"tab-tarot\"]') as HTMLElement;\n          if (tarotTab) tarotTab.click();\n        }, 100);\n      }\n    },\n    \n    // Chat Commands\n    {\n      id: 'ai-chat',\n      title: 'Open AI Chat',\n      description: 'Start chatting with the mystical AI',\n      icon: MessageCircle,\n      category: 'chat',\n      keywords: ['chat', 'ai', 'talk', 'assistant'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const aiChatTab = document.querySelector('[data-testid=\"tab-ai-chat\"]') as HTMLElement;\n          if (aiChatTab) aiChatTab.click();\n        }, 100);\n      }\n    },\n    {\n      id: 'mystical-guidance',\n      title: 'Ask for Guidance',\n      description: 'Get spiritual advice and insights',\n      icon: Bot,\n      category: 'chat',\n      keywords: ['guidance', 'advice', 'help', 'spiritual'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const aiChatTab = document.querySelector('[data-testid=\"tab-ai-chat\"]') as HTMLElement;\n          if (aiChatTab) aiChatTab.click();\n          // Pre-fill with guidance request\n          setTimeout(() => {\n            const chatInput = document.querySelector('input[placeholder*=\"Ask\"]') as HTMLInputElement;\n            if (chatInput) {\n              chatInput.value = 'I need spiritual guidance. Can you help me?';\n              chatInput.focus();\n            }\n          }, 200);\n        }, 100);\n      }\n    },\n    \n    // Account Commands\n    {\n      id: 'buy-credits',\n      title: 'Buy Credits',\n      description: 'Purchase credits for AI chat',\n      icon: CreditCard,\n      category: 'account',\n      keywords: ['buy', 'credits', 'purchase', 'payment'],\n      action: () => {\n        setLocation('/dashboard');\n        setTimeout(() => {\n          const aiChatTab = document.querySelector('[data-testid=\"tab-ai-chat\"]') as HTMLElement;\n          if (aiChatTab) {\n            aiChatTab.click();\n            // Scroll to payment section\n            setTimeout(() => {\n              const paymentSection = document.querySelector('[data-testid=\"payment-plans\"]');\n              if (paymentSection) {\n                paymentSection.scrollIntoView({ behavior: 'smooth' });\n              }\n            }, 200);\n          }\n        }, 100);\n      }\n    },\n    \n    // Help Commands\n    {\n      id: 'help',\n      title: 'Show Help',\n      description: 'Get help using MysticRead AI',\n      icon: HelpCircle,\n      category: 'help',\n      keywords: ['help', 'support', 'how to', 'guide'],\n      action: () => {\n        // Open help dialog or navigate to help section\n        alert('Welcome to MysticRead AI! Use voice commands or type to quickly navigate and perform actions. Try saying \"analyze palm\" or \"go to dashboard\".');\n      }\n    },\n    {\n      id: 'toggle-theme',\n      title: 'Toggle Theme',\n      description: 'Switch between light and dark mode',\n      icon: isDarkMode ? Sun : Moon,\n      category: 'help',\n      keywords: ['theme', 'dark', 'light', 'toggle'],\n      action: () => {\n        setIsDarkMode(!isDarkMode);\n        // Implementation for theme toggle would go here\n        document.documentElement.classList.toggle('dark');\n      }\n    }\n  ], [setLocation, isDarkMode]);\n\n  // Filter commands based on search query\n  const filteredCommands = useMemo(() => {\n    if (!query) return commands;\n    \n    return commands.filter(command =>\n      command.title.toLowerCase().includes(query.toLowerCase()) ||\n      command.description.toLowerCase().includes(query.toLowerCase()) ||\n      command.keywords.some(keyword => \n        keyword.toLowerCase().includes(query.toLowerCase())\n      )\n    );\n  }, [commands, query]);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen) return;\n\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev < filteredCommands.length - 1 ? prev + 1 : 0\n          );\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev > 0 ? prev - 1 : filteredCommands.length - 1\n          );\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (filteredCommands[selectedIndex]) {\n            filteredCommands[selectedIndex].action();\n            onClose();\n          }\n          break;\n        case 'Escape':\n          e.preventDefault();\n          onClose();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, filteredCommands, selectedIndex, onClose]);\n\n  // Reset selection when query changes\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [query]);\n\n  // Focus input when dialog opens\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  const toggleVoiceRecognition = () => {\n    if (!recognition) {\n      alert('Speech recognition is not supported in your browser.');\n      return;\n    }\n\n    if (isListening) {\n      recognition.stop();\n      setIsListening(false);\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n\n  const getCategoryIcon = (category: Command['category']) => {\n    switch (category) {\n      case 'navigation': return Navigation;\n      case 'analysis': return Sparkles;\n      case 'chat': return MessageCircle;\n      case 'account': return CreditCard;\n      case 'help': return HelpCircle;\n      default: return Search;\n    }\n  };\n\n  const getCategoryColor = (category: Command['category']) => {\n    switch (category) {\n      case 'navigation': return 'bg-blue-100 text-blue-700';\n      case 'analysis': return 'bg-purple-100 text-purple-700';\n      case 'chat': return 'bg-green-100 text-green-700';\n      case 'account': return 'bg-orange-100 text-orange-700';\n      case 'help': return 'bg-gray-100 text-gray-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl p-0 bg-gradient-to-b from-purple-50 to-indigo-50 border border-purple-200 shadow-2xl\" \n                    onPointerDownOutside={(e) => e.preventDefault()}>\n        {/* Mystical Header */}\n        <div className=\"relative p-6 pb-0\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-purple-600/10 to-indigo-600/10 rounded-t-lg\"></div>\n          <div className=\"relative flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-full flex items-center justify-center\">\n              <Sparkles className=\"h-5 w-5 text-white animate-pulse\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold bg-gradient-to-r from-purple-800 to-indigo-800 bg-clip-text text-transparent\">\n                Mystical Command Palette\n              </h2>\n              <p className=\"text-sm text-gray-600\">\n                Type a command or use voice to navigate MysticRead AI\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Search Input */}\n        <div className=\"px-6 pb-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              ref={inputRef}\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type a command or click the mic to speak...\"\n              className=\"pl-10 pr-12 py-3 text-base bg-white/80 border-purple-200 focus:border-purple-400 focus:ring-purple-400\"\n            />\n            <Button\n              onClick={toggleVoiceRecognition}\n              size=\"sm\"\n              variant=\"ghost\"\n              data-testid=\"voice-button\"\n              className={`absolute right-1 top-1 h-8 w-8 rounded-full ${\n                isListening \n                  ? 'bg-red-100 text-red-600 hover:bg-red-200' \n                  : 'bg-purple-100 text-purple-600 hover:bg-purple-200'\n              }`}\n            >\n              {isListening ? (\n                <div className=\"relative\">\n                  <MicOff className=\"h-4 w-4\" />\n                  <div className=\"absolute inset-0 animate-pulse bg-red-400 rounded-full opacity-30\"></div>\n                </div>\n              ) : (\n                <Mic className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          \n          {isListening && (\n            <div className=\"mt-2 flex items-center gap-2 text-sm text-red-600\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n              <span>Listening for voice command...</span>\n              <Zap className=\"h-4 w-4 animate-bounce\" />\n            </div>\n          )}\n        </div>\n\n        {/* Commands List */}\n        <ScrollArea className=\"max-h-96 px-2\">\n          <div className=\"px-4 pb-4\">\n            {filteredCommands.length === 0 ? (\n              <div className=\"py-8 text-center\">\n                <Search className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n                <p className=\"text-gray-500\">No commands found for \"{query}\"</p>\n                <p className=\"text-sm text-gray-400 mt-1\">Try \"palm reading\" or \"go to dashboard\"</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {filteredCommands.map((command, index) => {\n                  const IconComponent = command.icon;\n                  const CategoryIcon = getCategoryIcon(command.category);\n                  \n                  return (\n                    <div\n                      key={command.id}\n                      onClick={() => {\n                        command.action();\n                        onClose();\n                      }}\n                      className={`flex items-center gap-3 p-3 rounded-lg cursor-pointer transition-all duration-200 ${\n                        index === selectedIndex\n                          ? 'bg-gradient-to-r from-purple-100 to-indigo-100 border border-purple-300 shadow-md scale-[1.02]'\n                          : 'bg-white/60 hover:bg-white/80 border border-gray-200'\n                      }`}\n                    >\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        index === selectedIndex\n                          ? 'bg-gradient-to-r from-purple-600 to-indigo-600 text-white'\n                          : 'bg-gray-100 text-gray-600'\n                      }`}>\n                        <IconComponent className=\"h-5 w-5\" />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <h3 className=\"font-medium text-gray-900\">{command.title}</h3>\n                          <Badge className={`text-xs ${getCategoryColor(command.category)}`}>\n                            <CategoryIcon className=\"h-3 w-3 mr-1\" />\n                            {command.category}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{command.description}</p>\n                      </div>\n                      \n                      {command.shortcut && (\n                        <Badge variant=\"outline\" className=\"text-xs font-mono\">\n                          {command.shortcut}\n                        </Badge>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        {/* Footer */}\n        <div className=\"px-6 py-3 bg-gradient-to-r from-purple-50 to-indigo-50 border-t border-purple-100\">\n          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n            <div className=\"flex items-center gap-4\">\n              <span>↑↓ Navigate</span>\n              <span>↵ Execute</span>\n              <span>ESC Close</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Sparkles className=\"h-3 w-3\" />\n              <span>Powered by Mystical AI</span>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default CommandPalette;","size_bytes":18097},"client/src/hooks/use-command-palette.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useCommandPalette() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Handle global keyboard shortcut\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Ctrl+K or Cmd+K to open command palette\n      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n        e.preventDefault();\n        setIsOpen(true);\n      }\n      \n      // Wake word detection for voice activation\n      // Could be enhanced with more sophisticated wake word detection\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {\n        e.preventDefault();\n        setIsOpen(true);\n        // Automatically start voice recognition when opened with this shortcut\n        setTimeout(() => {\n          const micButton = document.querySelector('[data-testid=\"voice-button\"]') as HTMLButtonElement;\n          if (micButton) {\n            micButton.click();\n          }\n        }, 200);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  const openPalette = () => setIsOpen(true);\n  const closePalette = () => setIsOpen(false);\n\n  return {\n    isOpen,\n    openPalette,\n    closePalette\n  };\n}","size_bytes":1266}},"version":1}