import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { TarotAnalysisResult, TarotInput } from "@shared/schema";
import { 
  Zap, 
  Sparkles, 
  Eye,
  Heart,
  Target,
  Compass,
  Download,
  Share,
  RotateCcw,
  Clock,
  Star,
  ArrowRight
} from "lucide-react";

interface TarotResultsProps {
  result: TarotAnalysisResult;
  inputData: TarotInput;
  onAnalyzeAnother: () => void;
}

export function TarotResults({ result, inputData, onAnalyzeAnother }: TarotResultsProps) {
  const handleDownloadReport = () => {
    const reportContent = `TAROT READING REPORT\\n\\n` +
      `Spread Type: ${result.spreadType}\\n` +
      (inputData.question ? `Question: ${inputData.question}\\n` : '') +
      `\\nPersonality Overview:\\n${result.personalityOverview}\\n\\n` +
      `Card Analysis:\\n` +
      result.cardAnalysis.map((card, index) => 
        `${index + 1}. ${card.position}: ${card.cardName}${card.reversed ? ' (Reversed)' : ''}\\n` +
        `   Meaning: ${card.meaning}\\n` +
        `   Interpretation: ${card.interpretation}\\n`
      ).join('\\n') +
      `\\nOverall Message:\\n${result.overallMessage}\\n\\n` +
      `Guidance:\\n` +
      `Present Situation: ${result.guidance.presentSituation}\\n` +
      (result.guidance.pastInfluences ? `Past Influences: ${result.guidance.pastInfluences}\\n` : '') +
      (result.guidance.futureOutlook ? `Future Outlook: ${result.guidance.futureOutlook}\\n` : '') +
      `Advice: ${result.guidance.advice}\\n` +
      (result.guidance.outcome ? `Outcome: ${result.guidance.outcome}\\n` : '') +
      `\\nAction Steps:\\n${result.actionSteps.map((step, i) => `${i + 1}. ${step}`).join('\\n')}\\n\\n` +
      `Reflection:\\n${result.reflection}\\n\\n` +
      `Generated by MysticRead AI - ${new Date().toLocaleDateString()}`;
    
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `tarot-reading-${new Date().getTime()}.txt`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleShareResults = () => {
    const shareText = `I just received a ${result.spreadType} tarot reading from MysticRead AI! ` +
      `Cards drawn: ${result.cardAnalysis.map(c => c.cardName).join(', ')}. ` +
      `The insights were truly enlightening! Check out MysticRead AI for your own tarot reading.`;
    
    if (navigator.share) {
      navigator.share({
        title: 'My Tarot Reading',
        text: shareText,
      });
    } else {
      navigator.clipboard.writeText(shareText).then(() => {
        alert('Reading copied to clipboard!');
      });
    }
  };

  const getSpreadDisplayName = (spreadType: string) => {
    switch (spreadType) {
      case "single-card": return "Single Card Reading";
      case "three-card": return "Three Card Reading";
      case "celtic-cross": return "Celtic Cross Reading";
      default: return "Tarot Reading";
    }
  };

  return (
    <section id="tarot-results-section" className="py-20 bg-white">
      <div className="container mx-auto px-4">
        <div className="max-w-6xl mx-auto">
          
          {/* Results Header */}
          <div className="text-center mb-12">
            <h3 className="text-3xl font-bold text-primary mb-4">Your Tarot Reading</h3>
            <p className="text-lg text-secondary">
              {getSpreadDisplayName(result.spreadType)}
              {inputData.question && (
                <span className="block text-indigo-600 mt-2 italic">
                  "{inputData.question}"
                </span>
              )}
            </p>
          </div>

          {/* Card Analysis */}
          <div className="grid lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-12">
            {result.cardAnalysis.map((card, index) => (
              <Card key={index} className="bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200">
                <CardContent className="p-6">
                  <div className="text-center mb-4">
                    <div className="w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto mb-3">
                      <Sparkles className={`h-8 w-8 ${card.reversed ? 'transform rotate-180 text-orange-600' : 'text-indigo-600'}`} />
                    </div>
                    <h4 className="font-semibold text-indigo-800 mb-1">{card.position}</h4>
                    <p className="text-sm font-medium text-indigo-600">
                      {card.cardName}
                      {card.reversed && (
                        <Badge variant="outline" className="ml-2 text-orange-600 border-orange-200">
                          Reversed
                        </Badge>
                      )}
                    </p>
                  </div>
                  <div className="space-y-3">
                    <div>
                      <h5 className="font-medium text-purple-800 mb-1">Meaning</h5>
                      <p className="text-sm text-secondary">{card.meaning}</p>
                    </div>
                    <div>
                      <h5 className="font-medium text-blue-800 mb-1">Interpretation</h5>
                      <p className="text-sm text-secondary">{card.interpretation}</p>
                    </div>
                    {card.reversed && card.reversedMeaning && (
                      <div>
                        <h5 className="font-medium text-orange-800 mb-1">Reversed Meaning</h5>
                        <p className="text-sm text-secondary">{card.reversedMeaning}</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Overall Analysis */}
          <div className="grid lg:grid-cols-2 gap-8 mb-12">
            
            {/* Personality Overview */}
            <Card>
              <CardContent className="p-6">
                <h4 className="font-semibold text-primary mb-4 flex items-center">
                  <Eye className="mr-2 h-5 w-5 text-purple-600" />
                  Personality Insights
                </h4>
                <p className="text-secondary leading-relaxed">
                  {result.personalityOverview}
                </p>
              </CardContent>
            </Card>

            {/* Overall Message */}
            <Card>
              <CardContent className="p-6">
                <h4 className="font-semibold text-primary mb-4 flex items-center">
                  <Zap className="mr-2 h-5 w-5 text-indigo-600" />
                  Overall Message
                </h4>
                <p className="text-secondary leading-relaxed">
                  {result.overallMessage}
                </p>
              </CardContent>
            </Card>

            {/* Guidance Section */}
            <Card className="lg:col-span-2">
              <CardContent className="p-6">
                <h4 className="font-semibold text-primary mb-6 flex items-center">
                  <Compass className="mr-2 h-5 w-5 text-blue-600" />
                  Detailed Guidance
                </h4>
                <div className="grid md:grid-cols-2 gap-6">
                  {result.guidance.pastInfluences && (
                    <div>
                      <h5 className="font-medium text-purple-800 mb-2 flex items-center">
                        <Clock className="mr-1 h-4 w-4" />
                        Past Influences
                      </h5>
                      <p className="text-sm text-secondary">{result.guidance.pastInfluences}</p>
                    </div>
                  )}
                  
                  <div>
                    <h5 className="font-medium text-blue-800 mb-2 flex items-center">
                      <Eye className="mr-1 h-4 w-4" />
                      Present Situation
                    </h5>
                    <p className="text-sm text-secondary">{result.guidance.presentSituation}</p>
                  </div>
                  
                  {result.guidance.futureOutlook && (
                    <div>
                      <h5 className="font-medium text-green-800 mb-2 flex items-center">
                        <Star className="mr-1 h-4 w-4" />
                        Future Outlook
                      </h5>
                      <p className="text-sm text-secondary">{result.guidance.futureOutlook}</p>
                    </div>
                  )}
                  
                  <div>
                    <h5 className="font-medium text-indigo-800 mb-2 flex items-center">
                      <Target className="mr-1 h-4 w-4" />
                      Advice
                    </h5>
                    <p className="text-sm text-secondary">{result.guidance.advice}</p>
                  </div>
                  
                  {result.guidance.outcome && (
                    <div className="md:col-span-2">
                      <h5 className="font-medium text-emerald-800 mb-2 flex items-center">
                        <Heart className="mr-1 h-4 w-4" />
                        Potential Outcome
                      </h5>
                      <p className="text-sm text-secondary">{result.guidance.outcome}</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Action Steps */}
            <Card>
              <CardContent className="p-6">
                <h4 className="font-semibold text-primary mb-4 flex items-center">
                  <ArrowRight className="mr-2 h-5 w-5 text-green-600" />
                  Action Steps
                </h4>
                <ul className="space-y-3">
                  {result.actionSteps.map((step, index) => (
                    <li key={index} className="flex items-start">
                      <span className="flex-shrink-0 w-6 h-6 bg-green-100 text-green-600 rounded-full flex items-center justify-center text-sm font-medium mr-3">
                        {index + 1}
                      </span>
                      <span className="text-sm text-secondary">{step}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>

            {/* Reflection */}
            <Card>
              <CardContent className="p-6">
                <h4 className="font-semibold text-primary mb-4 flex items-center">
                  <Sparkles className="mr-2 h-5 w-5 text-yellow-600" />
                  Reflection
                </h4>
                <p className="text-secondary leading-relaxed">
                  {result.reflection}
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Action Buttons */}
          <div className="text-center">
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button 
                onClick={handleDownloadReport}
                className="bg-accent hover:bg-blue-600"
                data-testid="button-download-tarot-report"
              >
                <Download className="mr-2 h-4 w-4" />
                Download Full Reading
              </Button>
              <Button 
                variant="outline"
                onClick={handleShareResults}
                data-testid="button-share-tarot-results"
              >
                <Share className="mr-2 h-4 w-4" />
                Share Reading
              </Button>
              <Button 
                variant="ghost"
                onClick={onAnalyzeAnother}
                className="text-accent hover:text-blue-600"
                data-testid="button-new-tarot-reading"
              >
                <RotateCcw className="mr-2 h-4 w-4" />
                New Reading
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}